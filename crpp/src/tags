!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALIGN1	utils.h	11;"	d
ALIGN2	utils.h	12;"	d
ALIGN_ARG	utils.h	10;"	d
Bool	utils.h	15;"	d
CRPP_DISABLED	crpp.h	/^    CRPP_DISABLED$/;"	e	enum:__anon1
CRPP_ENABLED	crpp.h	/^    CRPP_ENABLED,$/;"	e	enum:__anon1
Dprintf	log.c	/^void Dprintf(int level, const char *fmt, ...)$/;"	f	signature:(int level, const char *fmt, ...)
ENTRY_IDX	crpp.h	34;"	d
False	utils.h	16;"	d
IS_EMPTY_MAC	crpp.h	32;"	d
JRPP_SERVER	notify.c	6;"	d	file:
LIBS	Makefile	/^LIBS = -lubox -lubus -lblobmsg_json -ljwsconvert -luci -ljson-c -ljwf$/;"	m
LIST_HEAD	libepoll.c	/^static LIST_HEAD(timeouts);$/;"	p	file:
LOG_CHANNEL	log.h	/^}LOG_CHANNEL;$/;"	t	typeref:enum:__anon3
LOG_ERROR	log.h	23;"	d
LOG_LEVEL_DEBUG	log.h	12;"	d
LOG_LEVEL_DEFAULT	log.h	14;"	d
LOG_LEVEL_ERROR	log.h	9;"	d
LOG_LEVEL_INFO	log.h	10;"	d
LOG_LEVEL_MAX	log.h	13;"	d
LOG_LEVEL_MODULE	log.h	11;"	d
LOG_LEVEL_NONE	log.h	8;"	d
LOG_NORMAL	log.h	22;"	d
MAX_EVENTS	libepoll.c	6;"	d	file:
MODULE_NAME	crpp.c	21;"	d	file:
OBJS	Makefile	/^OBJS = $(patsubst %c,%o,$(SRC))$/;"	m
OCTET_NUM	crpp.h	35;"	d
PORT_IDX	crpp.h	33;"	d
PORT_NUM	crpp.h	30;"	d
RSTP_SERVER	notify.c	5;"	d	file:
SRC	Makefile	/^SRC = $(notdir $(wildcard *.c))$/;"	m
TO_STDIO	log.h	/^    TO_STDIO    = 0,$/;"	e	enum:__anon3
TO_SYSLOG	log.h	/^    TO_SYSLOG   = 1 $/;"	e	enum:__anon3
True	utils.h	17;"	d
VERSION	crpp.c	20;"	d	file:
_LIBEPOLL_H_	libepoll.h	2;"	d
_LIBRTNL_H_	librtnl.h	2;"	d
_LOG_H_	log.h	3;"	d
_NOTIFY_H_	notify.h	2;"	d
_RAWSOCK_H_	rawsock.h	2;"	d
_UNIXSOCK_H_	unixsock.h	2;"	d
__CRPP_H	crpp.h	16;"	d
__UTIILS_H	utils.h	2;"	d
__anon2::fd_l	crpp.h	/^    struct list_head fd_l;$/;"	m	struct:__anon2	typeref:struct:__anon2::list_head	access:public
__anon2::notify_cb	crpp.h	/^    void (*notify_cb)(struct list_head *head);$/;"	m	struct:__anon2	access:public
__anon2::state	crpp.h	/^    eCrppState state;  $/;"	m	struct:__anon2	access:public
__init	crpp.h	29;"	d
cb	libepoll.h	/^    void (*cb)(struct epoll_handler_s *h,uint32_t events);$/;"	m	struct:epoll_handler_s	access:public
cb	libepoll.h	/^    void (*cb)(struct epoll_timeout_s *t);$/;"	m	struct:epoll_timeout_s	access:public
crpp_filter	crpp.c	/^static struct sock_filter crpp_filter[] = {$/;"	v	typeref:struct:sock_filter	file:
crpp_init	crpp.c	/^static int crpp_init(void)$/;"	f	file:	signature:(void)
crpp_t	crpp.h	/^}crpp_t;$/;"	t	typeref:struct:__anon2
dump_hex	log.h	/^static inline void dump_hex(void *b, int l)$/;"	f	signature:(void *b, int l)
eCrppState	crpp.h	/^}eCrppState;$/;"	t	typeref:enum:__anon1
epoll_add	libepoll.c	/^int epoll_add(struct epoll_handler_s *h,uint32_t events)$/;"	f	signature:(struct epoll_handler_s *h,uint32_t events)
epoll_add	libepoll.h	/^int epoll_add(struct epoll_handler_s *h,uint32_t events);$/;"	p	signature:(struct epoll_handler_s *h,uint32_t events)
epoll_deal_events	libepoll.c	/^static int epoll_deal_events(uint32_t timeout)$/;"	f	file:	signature:(uint32_t timeout)
epoll_del	libepoll.c	/^int epoll_del(struct epoll_handler_s *h)$/;"	f	signature:(struct epoll_handler_s *h)
epoll_del	libepoll.h	/^int epoll_del(struct epoll_handler_s *h);$/;"	p	signature:(struct epoll_handler_s *h)
epoll_fd	libepoll.c	/^static int epoll_fd = -1;$/;"	v	file:
epoll_handler_s	libepoll.h	/^struct epoll_handler_s {$/;"	s
epoll_handler_s::cb	libepoll.h	/^    void (*cb)(struct epoll_handler_s *h,uint32_t events);$/;"	m	struct:epoll_handler_s	access:public
epoll_handler_s::fd	libepoll.h	/^    int fd;$/;"	m	struct:epoll_handler_s	access:public
epoll_handler_s::list	libepoll.h	/^    struct list_head list;$/;"	m	struct:epoll_handler_s	typeref:struct:epoll_handler_s::list_head	access:public
epoll_init	libepoll.c	/^int epoll_init(void)$/;"	f	signature:(void)
epoll_init	libepoll.h	/^int epoll_init(void);$/;"	p	signature:(void)
epoll_loop	libepoll.c	/^void epoll_loop(void)$/;"	f	signature:(void)
epoll_loop	libepoll.h	/^void epoll_loop(void);$/;"	p	signature:(void)
epoll_timeout_s	libepoll.h	/^struct epoll_timeout_s {$/;"	s
epoll_timeout_s::cb	libepoll.h	/^    void (*cb)(struct epoll_timeout_s *t);$/;"	m	struct:epoll_timeout_s	access:public
epoll_timeout_s::list	libepoll.h	/^    struct list_head list;$/;"	m	struct:epoll_timeout_s	typeref:struct:epoll_timeout_s::list_head	access:public
epoll_timeout_s::pending	libepoll.h	/^    Bool pending;$/;"	m	struct:epoll_timeout_s	access:public
epoll_timeout_s::time	libepoll.h	/^    struct timeval time;$/;"	m	struct:epoll_timeout_s	typeref:struct:epoll_timeout_s::timeval	access:public
event_pool	libepoll.c	/^static struct epoll_event event_pool[MAX_EVENTS];$/;"	v	typeref:struct:epoll_event	file:
fd	libepoll.h	/^    int fd;$/;"	m	struct:epoll_handler_s	access:public
fd_l	crpp.h	/^    struct list_head fd_l;$/;"	m	struct:__anon2	typeref:struct:__anon2::list_head	access:public
list	libepoll.h	/^    struct list_head list;$/;"	m	struct:epoll_handler_s	typeref:struct:epoll_handler_s::list_head	access:public
list	libepoll.h	/^    struct list_head list;$/;"	m	struct:epoll_timeout_s	typeref:struct:epoll_timeout_s::list_head	access:public
log_channel	log.c	/^static int log_channel = TO_SYSLOG;$/;"	v	file:
log_debug	log.c	/^void log_debug(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
log_debug	log.h	/^void log_debug(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
log_err	log.c	/^void log_err(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
log_err	log.h	/^void log_err(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
log_info	log.c	/^void log_info(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
log_info	log.h	/^void log_info(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
log_init	log.c	/^void log_init(const char *progname,unsigned char facility)$/;"	f	signature:(const char *progname,unsigned char facility)
log_init	log.h	/^void log_init(const char *progname,unsigned char);$/;"	p	signature:(const char *progname,unsigned char)
log_level	log.c	/^static int log_level = LOG_LEVEL_DEBUG;$/;"	v	file:
log_print	log.c	/^void log_print(int level, const char *fmt, ...)$/;"	f	signature:(int level, const char *fmt, ...)
log_set_channel	log.c	/^void log_set_channel(int channel)$/;"	f	signature:(int channel)
log_set_channel	log.h	/^void log_set_channel(int);$/;"	p	signature:(int)
log_threshold	log.c	/^void log_threshold(int level)$/;"	f	signature:(int level)
log_threshold	log.h	/^void log_threshold(int);$/;"	p	signature:(int)
log_trace	log.c	/^void log_trace(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
log_trace	log.h	/^void log_trace(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
main	crpp.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
notify_cb	crpp.h	/^    void (*notify_cb)(struct list_head *head);$/;"	m	struct:__anon2	access:public
notify_init	notify.c	/^int notify_init(void (*cb)(struct list_head *head))$/;"	f	signature:(void (*cb)(struct list_head *head))
notify_server	notify.c	/^static void notify_server(struct list_head *head)$/;"	f	file:	signature:(struct list_head *head)
pCrpp	crpp.c	/^static crpp_t *pCrpp = NULL;$/;"	v	file:
parse_rtattr	librtnl.c	/^static void parse_rtattr(struct rtattr **tb,int max,struct rtattr *attr,int len)$/;"	f	file:	signature:(struct rtattr **tb,int max,struct rtattr *attr,int len)
pending	libepoll.h	/^    Bool pending;$/;"	m	struct:epoll_timeout_s	access:public
rawsock_init	rawsock.c	/^struct epoll_handler_s *rawsock_init(struct sock_fprog *prog)$/;"	f	signature:(struct sock_fprog *prog)
rawsock_init	rawsock.h	/^struct epoll_handler_s *rawsock_init(struct sock_fprog *prog);$/;"	p	signature:(struct sock_fprog *prog)
rawsock_recv	rawsock.c	/^static void rawsock_recv(struct epoll_handler_s *h,uint32_t events)$/;"	f	file:	signature:(struct epoll_handler_s *h,uint32_t events)
rtnl_ifaddrmsg	librtnl.c	/^void rtnl_ifaddrmsg(struct nlmsghdr *nlh)$/;"	f	signature:(struct nlmsghdr *nlh)
rtnl_ifinfomsg	librtnl.c	/^void rtnl_ifinfomsg(struct nlmsghdr *nlh)$/;"	f	signature:(struct nlmsghdr *nlh)
rtnl_init	librtnl.c	/^struct epoll_handler_s *rtnl_init(uint32_t groups)$/;"	f	signature:(uint32_t groups)
rtnl_init	librtnl.h	/^struct epoll_handler_s *rtnl_init(uint32_t groups);$/;"	p	signature:(uint32_t groups)
rtnl_recv	librtnl.c	/^static void rtnl_recv(struct epoll_handler_s *h,uint32_t events)$/;"	f	file:	signature:(struct epoll_handler_s *h,uint32_t events)
rtnl_rtmsg	librtnl.c	/^void rtnl_rtmsg(struct nlmsghdr *nlh)$/;"	f	signature:(struct nlmsghdr *nlh)
state	crpp.h	/^    eCrppState state;  $/;"	m	struct:__anon2	access:public
time	libepoll.h	/^    struct timeval time;$/;"	m	struct:epoll_timeout_s	typeref:struct:epoll_timeout_s::timeval	access:public
timer_add	libepoll.c	/^int timer_add(struct epoll_timeout_s *timer, int msecs)$/;"	f	signature:(struct epoll_timeout_s *timer, int msecs)
timer_add	libepoll.h	/^int timer_add(struct epoll_timeout_s *timer, int msecs);$/;"	p	signature:(struct epoll_timeout_s *timer, int msecs)
timer_del	libepoll.c	/^int timer_del(struct epoll_timeout_s *timer)$/;"	f	signature:(struct epoll_timeout_s *timer)
timer_del	libepoll.h	/^int timer_del(struct epoll_timeout_s *timer);$/;"	p	signature:(struct epoll_timeout_s *timer)
timer_diff	libepoll.c	/^static int timer_diff(struct timeval *second, struct timeval *first)$/;"	f	file:	signature:(struct timeval *second, struct timeval *first)
timer_next_timeout	libepoll.c	/^static uint32_t timer_next_timeout(struct timeval *cur)$/;"	f	file:	signature:(struct timeval *cur)
timer_process	libepoll.c	/^static void timer_process(struct timeval *cur)$/;"	f	file:	signature:(struct timeval *cur)
unixsock_init	unixsock.c	/^struct epoll_handler_s *unixsock_init(char *s_name)$/;"	f	signature:(char *s_name)
unixsock_init	unixsock.h	/^struct epoll_handler_s *unixsock_init(void);$/;"	p	signature:(void)
unixsock_recv	unixsock.c	/^static void unixsock_recv(struct epoll_handler_s *h,uint32_t events)$/;"	f	file:	signature:(struct epoll_handler_s *h,uint32_t events)
usage	crpp.c	/^static int usage(const char *prog)$/;"	f	file:	signature:(const char *prog)
vDprintf	log.c	/^void vDprintf(int level, const char *fmt, va_list ap)$/;"	f	signature:(int level, const char *fmt, va_list ap)
