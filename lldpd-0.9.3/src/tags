!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AGENT_WRITE_TIMEOUT	daemon/agent_priv.c	81;"	d	file:
ALIGNED_CAST	daemon/lldpd.h	85;"	d
ALIGNOF	marshal.c	34;"	d	file:
ALIGNOF	marshal.c	36;"	d	file:
ARCH_NR	daemon/priv-seccomp.c	33;"	d	file:
ARCH_NR	daemon/priv-seccomp.c	36;"	d	file:
ARCH_NR	daemon/priv-seccomp.c	40;"	d	file:
ATOM_BUILDER_REGISTER	lib/atom.h	325;"	d
ATOM_MAP_REGISTER	lib/atom.h	297;"	d
BUILD_DATE	version.c	26;"	d	file:
CAN_EXECUTE	client/commands.c	368;"	d	file:
CDP_ADDRESS_PROTO_IP	daemon/protocols/cdp.h	50;"	d
CDP_CAP_HOST	daemon/protocols/cdp.h	56;"	d
CDP_CAP_IGMP	daemon/protocols/cdp.h	57;"	d
CDP_CAP_REPEATER	daemon/protocols/cdp.h	58;"	d
CDP_CAP_ROUTER	daemon/protocols/cdp.h	52;"	d
CDP_CAP_SOURCE_BRIDGE	daemon/protocols/cdp.h	54;"	d
CDP_CAP_SWITCH	daemon/protocols/cdp.h	55;"	d
CDP_CAP_TRANSPARENT_BRIDGE	daemon/protocols/cdp.h	53;"	d
CDP_MULTICAST_ADDR	daemon/protocols/cdp.h	21;"	d
CDP_TLV_ADDRESSES	daemon/protocols/cdp.h	/^	CDP_TLV_ADDRESSES		= 2,$/;"	e	enum:__anon3
CDP_TLV_CAPABILITIES	daemon/protocols/cdp.h	/^	CDP_TLV_CAPABILITIES		= 4,$/;"	e	enum:__anon3
CDP_TLV_CHASSIS	daemon/protocols/cdp.h	/^	CDP_TLV_CHASSIS			= 1,$/;"	e	enum:__anon3
CDP_TLV_NATIVEVLAN	daemon/protocols/cdp.h	/^	CDP_TLV_NATIVEVLAN		= 10,$/;"	e	enum:__anon3
CDP_TLV_PLATFORM	daemon/protocols/cdp.h	/^	CDP_TLV_PLATFORM		= 6,$/;"	e	enum:__anon3
CDP_TLV_PORT	daemon/protocols/cdp.h	/^	CDP_TLV_PORT			= 3,$/;"	e	enum:__anon3
CDP_TLV_POWER_CONSUMPTION	daemon/protocols/cdp.h	/^	CDP_TLV_POWER_CONSUMPTION	= 16$/;"	e	enum:__anon3
CDP_TLV_SOFTWARE	daemon/protocols/cdp.h	/^	CDP_TLV_SOFTWARE		= 5,$/;"	e	enum:__anon3
CESC	client/lldpcli.c	100;"	d	file:
CHANGED	daemon/client.c	66;"	d	file:
CHANGED_STR	daemon/client.c	67;"	d	file:
CHECK_TLV_SIZE	daemon/protocols/cdp.c	248;"	d	file:
CHECK_TLV_SIZE	daemon/protocols/edp.c	223;"	d	file:
CHECK_TLV_SIZE	daemon/protocols/lldp.c	561;"	d	file:
CONCAT_PLATFORM	daemon/protocols/cdp.c	552;"	d	file:
CONN_STATE_GET_CHASSIS_RECV	lib/atom.h	55;"	d
CONN_STATE_GET_CHASSIS_SEND	lib/atom.h	54;"	d
CONN_STATE_GET_CONFIG_RECV	lib/atom.h	51;"	d
CONN_STATE_GET_CONFIG_SEND	lib/atom.h	50;"	d
CONN_STATE_GET_DEFAULT_PORT_RECV	lib/atom.h	57;"	d
CONN_STATE_GET_DEFAULT_PORT_SEND	lib/atom.h	56;"	d
CONN_STATE_GET_INTERFACES_RECV	lib/atom.h	43;"	d
CONN_STATE_GET_INTERFACES_SEND	lib/atom.h	42;"	d
CONN_STATE_GET_PORT_RECV	lib/atom.h	45;"	d
CONN_STATE_GET_PORT_SEND	lib/atom.h	44;"	d
CONN_STATE_IDLE	lib/atom.h	41;"	d
CONN_STATE_SET_CONFIG_RECV	lib/atom.h	53;"	d
CONN_STATE_SET_CONFIG_SEND	lib/atom.h	52;"	d
CONN_STATE_SET_PORT_RECV	lib/atom.h	47;"	d
CONN_STATE_SET_PORT_SEND	lib/atom.h	46;"	d
CONN_STATE_SET_WATCH_RECV	lib/atom.h	49;"	d
CONN_STATE_SET_WATCH_SEND	lib/atom.h	48;"	d
CURRENT	client/tokenizer.c	71;"	d	file:
CUSTOM_TLV_ADD	lldpd-structs.h	224;"	d
CUSTOM_TLV_REMOVE	lldpd-structs.h	226;"	d
CUSTOM_TLV_REPLACE	lldpd-structs.h	225;"	d
DISPLAY_BRIEF	client/client.h	120;"	d
DISPLAY_DETAILS	client/client.h	122;"	d
DISPLAY_NORMAL	client/client.h	121;"	d
EDP_MULTICAST_ADDR	daemon/protocols/edp.h	21;"	d
EDP_TLV_DISPLAY	daemon/protocols/edp.h	/^	EDP_TLV_DISPLAY			= 1,$/;"	e	enum:__anon2
EDP_TLV_ESRP	daemon/protocols/edp.h	/^	EDP_TLV_ESRP			= 8,$/;"	e	enum:__anon2
EDP_TLV_INFO	daemon/protocols/edp.h	/^	EDP_TLV_INFO			= 2,$/;"	e	enum:__anon2
EDP_TLV_MARKER	daemon/protocols/edp.h	27;"	d
EDP_TLV_NULL	daemon/protocols/edp.h	/^	EDP_TLV_NULL			= 0,$/;"	e	enum:__anon2
EDP_TLV_VLAN	daemon/protocols/edp.h	/^	EDP_TLV_VLAN			= 5,$/;"	e	enum:__anon2
ESCAPED	client/tokenizer.c	72;"	d	file:
EVENT_BUFFER	daemon/event.c	37;"	d	file:
FDP_MULTICAST_ADDR	daemon/protocols/cdp.h	24;"	d
FIXEDPOINT_H	lib/fixedpoint.h	23;"	d
GET_CHASSIS	ctl.h	/^	GET_CHASSIS,		\/* Get local chassis *\/$/;"	e	enum:hmsg_type
GET_CONFIG	ctl.h	/^	GET_CONFIG,	        \/* Get global configuration *\/$/;"	e	enum:hmsg_type
GET_DEFAULT_PORT	ctl.h	/^	GET_DEFAULT_PORT,	\/* Get all information related to default port *\/$/;"	e	enum:hmsg_type
GET_INTERFACE	ctl.h	/^	GET_INTERFACE,		\/* Get all information related to an interface *\/$/;"	e	enum:hmsg_type
GET_INTERFACES	ctl.h	/^	GET_INTERFACES,		\/* Get list of interfaces *\/$/;"	e	enum:hmsg_type
HMSG_MAX_SIZE	ctl.h	51;"	d
IFACE_BOND_T	daemon/lldpd.h	302;"	d
IFACE_BRIDGE_T	daemon/lldpd.h	301;"	d
IFACE_PHYSICAL_T	daemon/lldpd.h	300;"	d
IFACE_VLAN_T	daemon/lldpd.h	303;"	d
IFACE_WIRELESS_T	daemon/lldpd.h	304;"	d
IFALIASZ	daemon/priv-linux.c	273;"	d	file:
IFDESCRSIZE	daemon/interfaces-bsd.c	53;"	d	file:
IN6_IS_ADDR_GLOBAL	daemon/interfaces.c	360;"	d	file:
IN6_IS_ADDR_GLOBAL	daemon/interfaces.c	361;"	d	file:
INIT_SZ	compat/asprintf.c	26;"	d	file:
INVALID	compat/strtonum.c	26;"	d	file:
IN_IS_ADDR_ANY	daemon/interfaces.c	354;"	d	file:
IN_IS_ADDR_ANY	daemon/interfaces.c	355;"	d	file:
IN_IS_ADDR_GLOBAL	daemon/interfaces.c	358;"	d	file:
IN_IS_ADDR_GLOBAL	daemon/interfaces.c	359;"	d	file:
IN_IS_ADDR_LINKLOCAL	daemon/interfaces.c	356;"	d	file:
IN_IS_ADDR_LINKLOCAL	daemon/interfaces.c	357;"	d	file:
IN_IS_ADDR_LOOPBACK	daemon/interfaces.c	352;"	d	file:
IN_IS_ADDR_LOOPBACK	daemon/interfaces.c	353;"	d	file:
LAGG_MAX_PORTS	daemon/interfaces-bsd.c	138;"	d	file:
LLC_ORG_CISCO	daemon/protocols/cdp.h	27;"	d
LLC_ORG_EXTREME	daemon/protocols/edp.h	24;"	d
LLC_ORG_FOUNDRY	daemon/protocols/cdp.h	28;"	d
LLC_ORG_NORTEL	daemon/protocols/sonmp.h	24;"	d
LLC_PID_CDP	daemon/protocols/cdp.h	29;"	d
LLC_PID_DRIP	daemon/protocols/cdp.h	31;"	d
LLC_PID_DTP	daemon/protocols/cdp.h	36;"	d
LLC_PID_EDP	daemon/protocols/edp.h	25;"	d
LLC_PID_PAGP	daemon/protocols/cdp.h	32;"	d
LLC_PID_PVSTP	daemon/protocols/cdp.h	33;"	d
LLC_PID_SONMP_FLATNET	daemon/protocols/sonmp.h	26;"	d
LLC_PID_SONMP_HELLO	daemon/protocols/sonmp.h	25;"	d
LLC_PID_STP	daemon/protocols/cdp.h	37;"	d
LLC_PID_UDLD	daemon/protocols/cdp.h	34;"	d
LLC_PID_VTP	daemon/protocols/cdp.h	35;"	d
LLDPCTL_ERR_BAD_VALUE	lib/lldpctl.h	/^	LLDPCTL_ERR_BAD_VALUE =  -509,$/;"	e	enum:__anon5
LLDPCTL_ERR_CALLBACK_FAILURE	lib/lldpctl.h	/^	LLDPCTL_ERR_CALLBACK_FAILURE = -902$/;"	e	enum:__anon5
LLDPCTL_ERR_CANNOT_CONNECT	lib/lldpctl.h	/^	LLDPCTL_ERR_CANNOT_CONNECT = -504,$/;"	e	enum:__anon5
LLDPCTL_ERR_CANNOT_CREATE	lib/lldpctl.h	/^	LLDPCTL_ERR_CANNOT_CREATE =  -510,$/;"	e	enum:__anon5
LLDPCTL_ERR_CANNOT_ITERATE	lib/lldpctl.h	/^	LLDPCTL_ERR_CANNOT_ITERATE =  -508,$/;"	e	enum:__anon5
LLDPCTL_ERR_EOF	lib/lldpctl.h	/^	LLDPCTL_ERR_EOF = -502,$/;"	e	enum:__anon5
LLDPCTL_ERR_FATAL	lib/lldpctl.h	/^	LLDPCTL_ERR_FATAL = -900,$/;"	e	enum:__anon5
LLDPCTL_ERR_INCORRECT_ATOM_TYPE	lib/lldpctl.h	/^	LLDPCTL_ERR_INCORRECT_ATOM_TYPE = -505,$/;"	e	enum:__anon5
LLDPCTL_ERR_INVALID_STATE	lib/lldpctl.h	/^	LLDPCTL_ERR_INVALID_STATE =  -507,$/;"	e	enum:__anon5
LLDPCTL_ERR_NOMEM	lib/lldpctl.h	/^	LLDPCTL_ERR_NOMEM = -901,$/;"	e	enum:__anon5
LLDPCTL_ERR_NOT_EXIST	lib/lldpctl.h	/^	LLDPCTL_ERR_NOT_EXIST = -503,$/;"	e	enum:__anon5
LLDPCTL_ERR_SERIALIZATION	lib/lldpctl.h	/^	LLDPCTL_ERR_SERIALIZATION =  -506,$/;"	e	enum:__anon5
LLDPCTL_ERR_WOULDBLOCK	lib/lldpctl.h	/^	LLDPCTL_ERR_WOULDBLOCK = -501,$/;"	e	enum:__anon5
LLDPCTL_H	lib/lldpctl.h	19;"	d
LLDPCTL_NO_ERROR	lib/lldpctl.h	/^	LLDPCTL_NO_ERROR = 0,$/;"	e	enum:__anon5
LLDPD_AF_IPV4	lldpd-structs.h	/^	LLDPD_AF_IPV4,$/;"	e	enum:__anon4
LLDPD_AF_IPV6	lldpd-structs.h	/^	LLDPD_AF_IPV6,$/;"	e	enum:__anon4
LLDPD_AF_LAST	lldpd-structs.h	/^	LLDPD_AF_LAST$/;"	e	enum:__anon4
LLDPD_AF_UNSPEC	lldpd-structs.h	/^	LLDPD_AF_UNSPEC = 0,$/;"	e	enum:__anon4
LLDPD_FAST_INIT	daemon/lldpd.h	77;"	d
LLDPD_FAST_TX_INTERVAL	daemon/lldpd.h	76;"	d
LLDPD_FILTER_F	daemon/lldpd.h	267;"	d
LLDPD_MAX_NEIGHBORS	daemon/lldpd.h	75;"	d
LLDPD_MGMT_MAXADDRSIZE	lldpd-structs.h	153;"	d
LLDPD_MODE_CDPV1	lldp-const.h	217;"	d
LLDPD_MODE_CDPV2	lldp-const.h	218;"	d
LLDPD_MODE_EDP	lldp-const.h	220;"	d
LLDPD_MODE_FDP	lldp-const.h	221;"	d
LLDPD_MODE_LLDP	lldp-const.h	216;"	d
LLDPD_MODE_MAX	lldp-const.h	222;"	d
LLDPD_MODE_SONMP	lldp-const.h	219;"	d
LLDPD_PORT_START_MARKER	lldpd-structs.h	261;"	d
LLDPD_RXTX_BOTH	lldpd-structs.h	319;"	d
LLDPD_RXTX_DISABLED	lldpd-structs.h	318;"	d
LLDPD_RXTX_FROM_PORT	lldpd-structs.h	320;"	d
LLDPD_RXTX_RXENABLED	lldpd-structs.h	324;"	d
LLDPD_RXTX_RXONLY	lldpd-structs.h	317;"	d
LLDPD_RXTX_TXENABLED	lldpd-structs.h	325;"	d
LLDPD_RXTX_TXONLY	lldpd-structs.h	316;"	d
LLDPD_RXTX_UNCHANGED	lldpd-structs.h	315;"	d
LLDPD_TTL	daemon/lldpd.h	73;"	d
LLDPD_TX_HOLD	daemon/lldpd.h	72;"	d
LLDPD_TX_INTERVAL	daemon/lldpd.h	71;"	d
LLDPD_TX_MSGDELAY	daemon/lldpd.h	74;"	d
LLDP_BOND_SLAVE_SRC_MAC_TYPE_FIXED	lldp-const.h	229;"	d
LLDP_BOND_SLAVE_SRC_MAC_TYPE_LOCALLY_ADMINISTERED	lldp-const.h	230;"	d
LLDP_BOND_SLAVE_SRC_MAC_TYPE_MAX	lldp-const.h	231;"	d
LLDP_BOND_SLAVE_SRC_MAC_TYPE_REAL	lldp-const.h	227;"	d
LLDP_BOND_SLAVE_SRC_MAC_TYPE_UNKNOWN	lldp-const.h	226;"	d
LLDP_BOND_SLAVE_SRC_MAC_TYPE_ZERO	lldp-const.h	228;"	d
LLDP_CAP_BRIDGE	lldp-const.h	140;"	d
LLDP_CAP_DOCSIS	lldp-const.h	144;"	d
LLDP_CAP_OTHER	lldp-const.h	138;"	d
LLDP_CAP_REPEATER	lldp-const.h	139;"	d
LLDP_CAP_ROUTER	lldp-const.h	142;"	d
LLDP_CAP_STATION	lldp-const.h	145;"	d
LLDP_CAP_TELEPHONE	lldp-const.h	143;"	d
LLDP_CAP_WLAN	lldp-const.h	141;"	d
LLDP_CHASSISID_SUBTYPE_ADDR	lldp-const.h	35;"	d
LLDP_CHASSISID_SUBTYPE_CHASSIS	lldp-const.h	31;"	d
LLDP_CHASSISID_SUBTYPE_IFALIAS	lldp-const.h	32;"	d
LLDP_CHASSISID_SUBTYPE_IFNAME	lldp-const.h	36;"	d
LLDP_CHASSISID_SUBTYPE_LLADDR	lldp-const.h	34;"	d
LLDP_CHASSISID_SUBTYPE_LOCAL	lldp-const.h	37;"	d
LLDP_CHASSISID_SUBTYPE_PORT	lldp-const.h	33;"	d
LLDP_DOT3_LINK_AUTONEG_1000BASE_T	lldp-const.h	134;"	d
LLDP_DOT3_LINK_AUTONEG_1000BASE_TFD	lldp-const.h	135;"	d
LLDP_DOT3_LINK_AUTONEG_1000BASE_X	lldp-const.h	132;"	d
LLDP_DOT3_LINK_AUTONEG_1000BASE_XFD	lldp-const.h	133;"	d
LLDP_DOT3_LINK_AUTONEG_100BASE_T2	lldp-const.h	126;"	d
LLDP_DOT3_LINK_AUTONEG_100BASE_T2FD	lldp-const.h	127;"	d
LLDP_DOT3_LINK_AUTONEG_100BASE_T4	lldp-const.h	123;"	d
LLDP_DOT3_LINK_AUTONEG_100BASE_TX	lldp-const.h	124;"	d
LLDP_DOT3_LINK_AUTONEG_100BASE_TXFD	lldp-const.h	125;"	d
LLDP_DOT3_LINK_AUTONEG_10BASET_FD	lldp-const.h	122;"	d
LLDP_DOT3_LINK_AUTONEG_10BASE_T	lldp-const.h	121;"	d
LLDP_DOT3_LINK_AUTONEG_FDX_APAUSE	lldp-const.h	129;"	d
LLDP_DOT3_LINK_AUTONEG_FDX_BPAUSE	lldp-const.h	131;"	d
LLDP_DOT3_LINK_AUTONEG_FDX_PAUSE	lldp-const.h	128;"	d
LLDP_DOT3_LINK_AUTONEG_FDX_SPAUSE	lldp-const.h	130;"	d
LLDP_DOT3_LINK_AUTONEG_OTHER	lldp-const.h	120;"	d
LLDP_DOT3_MAU_1000BASECXFD	lldp-const.h	78;"	d
LLDP_DOT3_MAU_1000BASECXHD	lldp-const.h	77;"	d
LLDP_DOT3_MAU_1000BASELXFD	lldp-const.h	74;"	d
LLDP_DOT3_MAU_1000BASELXHD	lldp-const.h	73;"	d
LLDP_DOT3_MAU_1000BASESXFD	lldp-const.h	76;"	d
LLDP_DOT3_MAU_1000BASESXHD	lldp-const.h	75;"	d
LLDP_DOT3_MAU_1000BASETFD	lldp-const.h	80;"	d
LLDP_DOT3_MAU_1000BASETHD	lldp-const.h	79;"	d
LLDP_DOT3_MAU_1000BASEXFD	lldp-const.h	72;"	d
LLDP_DOT3_MAU_1000BASEXHD	lldp-const.h	71;"	d
LLDP_DOT3_MAU_100BASEFXFD	lldp-const.h	68;"	d
LLDP_DOT3_MAU_100BASEFXHD	lldp-const.h	67;"	d
LLDP_DOT3_MAU_100BASET2FD	lldp-const.h	70;"	d
LLDP_DOT3_MAU_100BASET2HD	lldp-const.h	69;"	d
LLDP_DOT3_MAU_100BASETXFD	lldp-const.h	66;"	d
LLDP_DOT3_MAU_100BASETXHD	lldp-const.h	65;"	d
LLDP_DOT3_MAU_10BASE2	lldp-const.h	54;"	d
LLDP_DOT3_MAU_10BASE5	lldp-const.h	52;"	d
LLDP_DOT3_MAU_10BASEFB	lldp-const.h	57;"	d
LLDP_DOT3_MAU_10BASEFL	lldp-const.h	58;"	d
LLDP_DOT3_MAU_10BASEFLFD	lldp-const.h	63;"	d
LLDP_DOT3_MAU_10BASEFLHD	lldp-const.h	62;"	d
LLDP_DOT3_MAU_10BASEFP	lldp-const.h	56;"	d
LLDP_DOT3_MAU_10BASET	lldp-const.h	55;"	d
LLDP_DOT3_MAU_10BASET4	lldp-const.h	64;"	d
LLDP_DOT3_MAU_10BASETFD	lldp-const.h	61;"	d
LLDP_DOT3_MAU_10BASETHD	lldp-const.h	60;"	d
LLDP_DOT3_MAU_10BROAD36	lldp-const.h	59;"	d
LLDP_DOT3_MAU_10GIGBASEER	lldp-const.h	84;"	d
LLDP_DOT3_MAU_10GIGBASEEW	lldp-const.h	88;"	d
LLDP_DOT3_MAU_10GIGBASELR	lldp-const.h	85;"	d
LLDP_DOT3_MAU_10GIGBASELW	lldp-const.h	89;"	d
LLDP_DOT3_MAU_10GIGBASELX4	lldp-const.h	82;"	d
LLDP_DOT3_MAU_10GIGBASER	lldp-const.h	83;"	d
LLDP_DOT3_MAU_10GIGBASESR	lldp-const.h	86;"	d
LLDP_DOT3_MAU_10GIGBASESW	lldp-const.h	90;"	d
LLDP_DOT3_MAU_10GIGBASEW	lldp-const.h	87;"	d
LLDP_DOT3_MAU_10GIGBASEX	lldp-const.h	81;"	d
LLDP_DOT3_MAU_AUI	lldp-const.h	51;"	d
LLDP_DOT3_MAU_FOIRL	lldp-const.h	53;"	d
LLDP_DOT3_POWERPAIRS_SIGNAL	lldp-const.h	97;"	d
LLDP_DOT3_POWERPAIRS_SPARE	lldp-const.h	98;"	d
LLDP_DOT3_POWER_8023AT_OFF	lldp-const.h	101;"	d
LLDP_DOT3_POWER_8023AT_TYPE1	lldp-const.h	102;"	d
LLDP_DOT3_POWER_8023AT_TYPE2	lldp-const.h	103;"	d
LLDP_DOT3_POWER_PD	lldp-const.h	94;"	d
LLDP_DOT3_POWER_PRIO_CRITICAL	lldp-const.h	115;"	d
LLDP_DOT3_POWER_PRIO_HIGH	lldp-const.h	116;"	d
LLDP_DOT3_POWER_PRIO_LOW	lldp-const.h	117;"	d
LLDP_DOT3_POWER_PRIO_UNKNOWN	lldp-const.h	114;"	d
LLDP_DOT3_POWER_PSE	lldp-const.h	93;"	d
LLDP_DOT3_POWER_SOURCE_BACKUP	lldp-const.h	109;"	d
LLDP_DOT3_POWER_SOURCE_BOTH	lldp-const.h	111;"	d
LLDP_DOT3_POWER_SOURCE_LOCAL	lldp-const.h	110;"	d
LLDP_DOT3_POWER_SOURCE_PRIMARY	lldp-const.h	107;"	d
LLDP_DOT3_POWER_SOURCE_PSE	lldp-const.h	108;"	d
LLDP_DOT3_POWER_SOURCE_UNKNOWN	lldp-const.h	106;"	d
LLDP_H_MED	daemon/agent.c	820;"	d	file:
LLDP_INVENTORY	daemon/protocols/lldp.c	331;"	d	file:
LLDP_MED_APPTYPE_GUESTVOICE	lldp-const.h	168;"	d
LLDP_MED_APPTYPE_GUESTVOICESIGNAL	lldp-const.h	169;"	d
LLDP_MED_APPTYPE_LAST	lldp-const.h	174;"	d
LLDP_MED_APPTYPE_SOFTPHONEVOICE	lldp-const.h	170;"	d
LLDP_MED_APPTYPE_UNDEFINED	lldp-const.h	165;"	d
LLDP_MED_APPTYPE_VIDEOCONFERENCE	lldp-const.h	171;"	d
LLDP_MED_APPTYPE_VIDEOSIGNAL	lldp-const.h	173;"	d
LLDP_MED_APPTYPE_VIDEOSTREAM	lldp-const.h	172;"	d
LLDP_MED_APPTYPE_VOICE	lldp-const.h	166;"	d
LLDP_MED_APPTYPE_VOICESIGNAL	lldp-const.h	167;"	d
LLDP_MED_CAP_CAP	lldp-const.h	208;"	d
LLDP_MED_CAP_IV	lldp-const.h	213;"	d
LLDP_MED_CAP_LOCATION	lldp-const.h	210;"	d
LLDP_MED_CAP_MDI_PD	lldp-const.h	212;"	d
LLDP_MED_CAP_MDI_PSE	lldp-const.h	211;"	d
LLDP_MED_CAP_POLICY	lldp-const.h	209;"	d
LLDP_MED_CLASS_I	lldp-const.h	159;"	d
LLDP_MED_CLASS_II	lldp-const.h	160;"	d
LLDP_MED_CLASS_III	lldp-const.h	161;"	d
LLDP_MED_LOCATION_ALTITUDE_UNIT_FLOOR	lldp-const.h	187;"	d
LLDP_MED_LOCATION_ALTITUDE_UNIT_METER	lldp-const.h	186;"	d
LLDP_MED_LOCATION_GEOID_NAD83	lldp-const.h	183;"	d
LLDP_MED_LOCATION_GEOID_NAD83_MLLW	lldp-const.h	184;"	d
LLDP_MED_LOCATION_GEOID_WGS84	lldp-const.h	182;"	d
LLDP_MED_LOCFORMAT_CIVIC	lldp-const.h	178;"	d
LLDP_MED_LOCFORMAT_COORD	lldp-const.h	177;"	d
LLDP_MED_LOCFORMAT_ELIN	lldp-const.h	179;"	d
LLDP_MED_LOCFORMAT_LAST	lldp-const.h	180;"	d
LLDP_MED_NETWORK_DEVICE	lldp-const.h	162;"	d
LLDP_MED_POW_PRIO_CRITICAL	lldp-const.h	203;"	d
LLDP_MED_POW_PRIO_HIGH	lldp-const.h	204;"	d
LLDP_MED_POW_PRIO_LOW	lldp-const.h	205;"	d
LLDP_MED_POW_PRIO_UNKNOWN	lldp-const.h	202;"	d
LLDP_MED_POW_SOURCE_BACKUP	lldp-const.h	196;"	d
LLDP_MED_POW_SOURCE_BOTH	lldp-const.h	200;"	d
LLDP_MED_POW_SOURCE_LOCAL	lldp-const.h	199;"	d
LLDP_MED_POW_SOURCE_PRIMARY	lldp-const.h	195;"	d
LLDP_MED_POW_SOURCE_PSE	lldp-const.h	198;"	d
LLDP_MED_POW_SOURCE_RESERVED	lldp-const.h	197;"	d
LLDP_MED_POW_SOURCE_UNKNOWN	lldp-const.h	194;"	d
LLDP_MED_POW_TYPE_PD	lldp-const.h	191;"	d
LLDP_MED_POW_TYPE_PSE	lldp-const.h	190;"	d
LLDP_MED_POW_TYPE_RESERVED	lldp-const.h	192;"	d
LLDP_MGMT_ADDR_IP4	lldp-const.h	152;"	d
LLDP_MGMT_ADDR_IP6	lldp-const.h	153;"	d
LLDP_MGMT_ADDR_NONE	lldp-const.h	151;"	d
LLDP_MGMT_IFACE_IFINDEX	lldp-const.h	156;"	d
LLDP_MGMT_IFACE_SYSPORT	lldp-const.h	157;"	d
LLDP_MGMT_IFACE_UNKNOWN	lldp-const.h	155;"	d
LLDP_MULTICAST_ADDR	daemon/lldp-tlv.h	21;"	d
LLDP_OID	daemon/agent.h	30;"	d
LLDP_PORTID_SUBTYPE_ADDR	lldp-const.h	44;"	d
LLDP_PORTID_SUBTYPE_AGENTCID	lldp-const.h	46;"	d
LLDP_PORTID_SUBTYPE_IFALIAS	lldp-const.h	41;"	d
LLDP_PORTID_SUBTYPE_IFNAME	lldp-const.h	45;"	d
LLDP_PORTID_SUBTYPE_LLADDR	lldp-const.h	43;"	d
LLDP_PORTID_SUBTYPE_LOCAL	lldp-const.h	47;"	d
LLDP_PORTID_SUBTYPE_MAX	lldp-const.h	48;"	d
LLDP_PORTID_SUBTYPE_PORT	lldp-const.h	42;"	d
LLDP_PORTID_SUBTYPE_UNKNOWN	lldp-const.h	40;"	d
LLDP_PPVID_CAP_ENABLED	lldp-const.h	148;"	d
LLDP_PPVID_CAP_SUPPORTED	lldp-const.h	147;"	d
LLDP_SNMP_ADDR_IFID	daemon/agent.c	553;"	d	file:
LLDP_SNMP_ADDR_IFSUBTYPE	daemon/agent.c	552;"	d	file:
LLDP_SNMP_ADDR_LEN	daemon/agent.c	551;"	d	file:
LLDP_SNMP_ADDR_OID	daemon/agent.c	554;"	d	file:
LLDP_SNMP_CID	daemon/agent.c	507;"	d	file:
LLDP_SNMP_CIDSUBTYPE	daemon/agent.c	506;"	d	file:
LLDP_SNMP_DOT1_PI	daemon/agent.c	549;"	d	file:
LLDP_SNMP_DOT1_PPVLAN_ENABLED	daemon/agent.c	547;"	d	file:
LLDP_SNMP_DOT1_PPVLAN_SUPPORTED	daemon/agent.c	546;"	d	file:
LLDP_SNMP_DOT1_PVID	daemon/agent.c	542;"	d	file:
LLDP_SNMP_DOT1_VLANNAME	daemon/agent.c	544;"	d	file:
LLDP_SNMP_DOT3_AGG_ID	daemon/agent.c	529;"	d	file:
LLDP_SNMP_DOT3_AGG_STATUS	daemon/agent.c	528;"	d	file:
LLDP_SNMP_DOT3_AUTONEG_ADVERTISED	daemon/agent.c	526;"	d	file:
LLDP_SNMP_DOT3_AUTONEG_ENABLED	daemon/agent.c	525;"	d	file:
LLDP_SNMP_DOT3_AUTONEG_MAU	daemon/agent.c	527;"	d	file:
LLDP_SNMP_DOT3_AUTONEG_SUPPORT	daemon/agent.c	524;"	d	file:
LLDP_SNMP_DOT3_MFS	daemon/agent.c	530;"	d	file:
LLDP_SNMP_DOT3_POWER_ALLOCATED	daemon/agent.c	541;"	d	file:
LLDP_SNMP_DOT3_POWER_CLASS	daemon/agent.c	536;"	d	file:
LLDP_SNMP_DOT3_POWER_DEVICETYPE	daemon/agent.c	531;"	d	file:
LLDP_SNMP_DOT3_POWER_ENABLED	daemon/agent.c	533;"	d	file:
LLDP_SNMP_DOT3_POWER_PAIRCONTROL	daemon/agent.c	534;"	d	file:
LLDP_SNMP_DOT3_POWER_PAIRS	daemon/agent.c	535;"	d	file:
LLDP_SNMP_DOT3_POWER_PRIORITY	daemon/agent.c	539;"	d	file:
LLDP_SNMP_DOT3_POWER_REQUESTED	daemon/agent.c	540;"	d	file:
LLDP_SNMP_DOT3_POWER_SOURCE	daemon/agent.c	538;"	d	file:
LLDP_SNMP_DOT3_POWER_SUPPORT	daemon/agent.c	532;"	d	file:
LLDP_SNMP_DOT3_POWER_TYPE	daemon/agent.c	537;"	d	file:
LLDP_SNMP_LASTUPDATE	daemon/agent.c	500;"	d	file:
LLDP_SNMP_MED_ASSET	daemon/agent.c	565;"	d	file:
LLDP_SNMP_MED_CAP_AVAILABLE	daemon/agent.c	556;"	d	file:
LLDP_SNMP_MED_CAP_ENABLED	daemon/agent.c	557;"	d	file:
LLDP_SNMP_MED_CLASS	daemon/agent.c	558;"	d	file:
LLDP_SNMP_MED_FW	daemon/agent.c	560;"	d	file:
LLDP_SNMP_MED_HW	daemon/agent.c	559;"	d	file:
LLDP_SNMP_MED_LOCATION	daemon/agent.c	571;"	d	file:
LLDP_SNMP_MED_MANUF	daemon/agent.c	563;"	d	file:
LLDP_SNMP_MED_MODEL	daemon/agent.c	564;"	d	file:
LLDP_SNMP_MED_POE_DEVICETYPE	daemon/agent.c	572;"	d	file:
LLDP_SNMP_MED_POE_PD_POWERPRIORITY	daemon/agent.c	578;"	d	file:
LLDP_SNMP_MED_POE_PD_POWERSOURCE	daemon/agent.c	577;"	d	file:
LLDP_SNMP_MED_POE_PD_POWERVAL	daemon/agent.c	576;"	d	file:
LLDP_SNMP_MED_POE_PSE_POWERPRIORITY	daemon/agent.c	575;"	d	file:
LLDP_SNMP_MED_POE_PSE_POWERSOURCE	daemon/agent.c	574;"	d	file:
LLDP_SNMP_MED_POE_PSE_POWERVAL	daemon/agent.c	573;"	d	file:
LLDP_SNMP_MED_POLICY_DSCP	daemon/agent.c	568;"	d	file:
LLDP_SNMP_MED_POLICY_PRIO	daemon/agent.c	567;"	d	file:
LLDP_SNMP_MED_POLICY_TAGGED	daemon/agent.c	570;"	d	file:
LLDP_SNMP_MED_POLICY_UNKNOWN	daemon/agent.c	569;"	d	file:
LLDP_SNMP_MED_POLICY_VID	daemon/agent.c	566;"	d	file:
LLDP_SNMP_MED_SN	daemon/agent.c	562;"	d	file:
LLDP_SNMP_MED_SW	daemon/agent.c	561;"	d	file:
LLDP_SNMP_NOTIFICATION	daemon/agent.c	499;"	d	file:
LLDP_SNMP_PID	daemon/agent.c	522;"	d	file:
LLDP_SNMP_PIDSUBTYPE	daemon/agent.c	521;"	d	file:
LLDP_SNMP_PORTDESC	daemon/agent.c	523;"	d	file:
LLDP_SNMP_REINITDELAY	daemon/agent.c	497;"	d	file:
LLDP_SNMP_STATS_AGEOUTS	daemon/agent.c	504;"	d	file:
LLDP_SNMP_STATS_DELETES	daemon/agent.c	502;"	d	file:
LLDP_SNMP_STATS_DROPS	daemon/agent.c	503;"	d	file:
LLDP_SNMP_STATS_INSERTS	daemon/agent.c	501;"	d	file:
LLDP_SNMP_STATS_RX	daemon/agent.c	516;"	d	file:
LLDP_SNMP_STATS_RX_AGEOUTS	daemon/agent.c	519;"	d	file:
LLDP_SNMP_STATS_RX_DISCARDED	daemon/agent.c	514;"	d	file:
LLDP_SNMP_STATS_RX_ERRORS	daemon/agent.c	515;"	d	file:
LLDP_SNMP_STATS_RX_TLVDISCARDED	daemon/agent.c	517;"	d	file:
LLDP_SNMP_STATS_RX_TLVUNRECOGNIZED	daemon/agent.c	518;"	d	file:
LLDP_SNMP_STATS_TX	daemon/agent.c	513;"	d	file:
LLDP_SNMP_SYSCAP_ENA	daemon/agent.c	511;"	d	file:
LLDP_SNMP_SYSCAP_SUP	daemon/agent.c	510;"	d	file:
LLDP_SNMP_SYSDESCR	daemon/agent.c	509;"	d	file:
LLDP_SNMP_SYSNAME	daemon/agent.c	508;"	d	file:
LLDP_SNMP_TXDELAY	daemon/agent.c	498;"	d	file:
LLDP_SNMP_TXINTERVAL	daemon/agent.c	495;"	d	file:
LLDP_SNMP_TXMULTIPLIER	daemon/agent.c	496;"	d	file:
LLDP_TLV_CHASSIS_ID	daemon/lldp-tlv.h	26;"	d
LLDP_TLV_DOT1_PI	daemon/lldp-tlv.h	43;"	d
LLDP_TLV_DOT1_PPVID	daemon/lldp-tlv.h	41;"	d
LLDP_TLV_DOT1_PVID	daemon/lldp-tlv.h	40;"	d
LLDP_TLV_DOT1_VLANNAME	daemon/lldp-tlv.h	42;"	d
LLDP_TLV_DOT3_LA	daemon/lldp-tlv.h	47;"	d
LLDP_TLV_DOT3_MAC	daemon/lldp-tlv.h	45;"	d
LLDP_TLV_DOT3_MFS	daemon/lldp-tlv.h	48;"	d
LLDP_TLV_DOT3_POWER	daemon/lldp-tlv.h	46;"	d
LLDP_TLV_END	daemon/lldp-tlv.h	25;"	d
LLDP_TLV_MED_CAP	daemon/lldp-tlv.h	50;"	d
LLDP_TLV_MED_IV_ASSET	daemon/lldp-tlv.h	60;"	d
LLDP_TLV_MED_IV_FW	daemon/lldp-tlv.h	55;"	d
LLDP_TLV_MED_IV_HW	daemon/lldp-tlv.h	54;"	d
LLDP_TLV_MED_IV_MANUF	daemon/lldp-tlv.h	58;"	d
LLDP_TLV_MED_IV_MODEL	daemon/lldp-tlv.h	59;"	d
LLDP_TLV_MED_IV_SN	daemon/lldp-tlv.h	57;"	d
LLDP_TLV_MED_IV_SW	daemon/lldp-tlv.h	56;"	d
LLDP_TLV_MED_LOCATION	daemon/lldp-tlv.h	52;"	d
LLDP_TLV_MED_MDI	daemon/lldp-tlv.h	53;"	d
LLDP_TLV_MED_POLICY	daemon/lldp-tlv.h	51;"	d
LLDP_TLV_MGMT_ADDR	daemon/lldp-tlv.h	33;"	d
LLDP_TLV_ORG	lldp-const.h	26;"	d
LLDP_TLV_ORG_DCBX	daemon/lldp-tlv.h	38;"	d
LLDP_TLV_ORG_DOT1	daemon/lldp-tlv.h	35;"	d
LLDP_TLV_ORG_DOT3	daemon/lldp-tlv.h	36;"	d
LLDP_TLV_ORG_MED	daemon/lldp-tlv.h	37;"	d
LLDP_TLV_ORG_OUI_INFO_MAXLEN	lldp-const.h	28;"	d
LLDP_TLV_ORG_OUI_LEN	lldp-const.h	27;"	d
LLDP_TLV_PORT_DESCR	daemon/lldp-tlv.h	29;"	d
LLDP_TLV_PORT_ID	daemon/lldp-tlv.h	27;"	d
LLDP_TLV_SYSTEM_CAP	daemon/lldp-tlv.h	32;"	d
LLDP_TLV_SYSTEM_DESCR	daemon/lldp-tlv.h	31;"	d
LLDP_TLV_SYSTEM_NAME	daemon/lldp-tlv.h	30;"	d
LLDP_TLV_TTL	daemon/lldp-tlv.h	28;"	d
LOCALTIME	daemon/priv.c	522;"	d	file:
LOCAL_CHASSIS	daemon/lldpd.h	430;"	d
MAC_UL_ADMINISTERED_BIT_MASK	daemon/interfaces.c	685;"	d	file:
MARSHAL	marshal.h	121;"	d
MARSHAL_ADD	marshal.h	82;"	d
MARSHAL_ADD	marshal.h	99;"	d
MARSHAL_BEGIN	marshal.h	77;"	d
MARSHAL_BEGIN	marshal.h	98;"	d
MARSHAL_END	marshal.h	101;"	d
MARSHAL_END	marshal.h	92;"	d
MARSHAL_EXPORT	marshal.c	18;"	d	file:
MARSHAL_FSTR	marshal.h	100;"	d
MARSHAL_FSTR	marshal.h	87;"	d
MARSHAL_HELPER_FUNCTIONS	marshal.h	60;"	d
MARSHAL_HELPER_FUNCTIONS	marshal.h	95;"	d
MARSHAL_IGNORE	marshal.h	107;"	d
MARSHAL_INFO	marshal.h	58;"	d
MARSHAL_INFO_POINTER	marshal.h	30;"	d
MARSHAL_INFO_SUB	marshal.h	31;"	d
MARSHAL_POINTER	marshal.h	104;"	d
MARSHAL_STR	marshal.h	106;"	d
MARSHAL_SUBINFO_NULL	marshal.h	38;"	d
MARSHAL_SUBSTRUCT	marshal.h	105;"	d
MARSHAL_SUBTQ	marshal.h	118;"	d
MARSHAL_TQ	marshal.h	124;"	d
MARSHAL_TQE	marshal.h	108;"	d
MARSHAL_TQH	marshal.h	115;"	d
MAX_BRIDGES	daemon/interfaces-linux.c	41;"	d	file:
MAX_DBG_TOKENS	log.c	41;"	d	file:
MAX_PORTS	daemon/interfaces-linux.c	40;"	d	file:
MINBUF	compat/getline.c	39;"	d	file:
N	client/display.c	/^N(const char *str) {$/;"	f	file:	signature:(const char *str)
NEIGHBOR_CHANGE_ADDED	lldpd-structs.h	523;"	d
NEIGHBOR_CHANGE_DELETED	lldpd-structs.h	522;"	d
NEIGHBOR_CHANGE_UPDATED	lldpd-structs.h	524;"	d
NETLINK_BUFFER	daemon/netlink.c	29;"	d	file:
NETSNMP_LARGE_FD_CLR	daemon/event.c	75;"	d	file:
NETSNMP_LARGE_FD_ISSET	daemon/event.c	77;"	d	file:
NETSNMP_LARGE_FD_SET	daemon/event.c	74;"	d	file:
NETSNMP_LARGE_FD_ZERO	daemon/event.c	76;"	d	file:
NEWLINE	client/client.h	63;"	d
NEWLINE	client/client.h	66;"	d
NONE	ctl.h	/^	NONE,$/;"	e	enum:hmsg_type
NOTIFICATION	ctl.h	/^	NOTIFICATION,		\/* Notification message (sent by lldpd!) *\/$/;"	e	enum:hmsg_type
PEEK	daemon/frame.h	70;"	d
PEEK_BYTES	daemon/frame.h	80;"	d
PEEK_CMP	daemon/frame.h	94;"	d
PEEK_DISCARD	daemon/frame.h	86;"	d
PEEK_DISCARD_UINT16	daemon/frame.h	92;"	d
PEEK_DISCARD_UINT32	daemon/frame.h	93;"	d
PEEK_DISCARD_UINT8	daemon/frame.h	91;"	d
PEEK_RESTORE	daemon/frame.h	99;"	d
PEEK_SAVE	daemon/frame.h	98;"	d
PEEK_UINT16	daemon/frame.h	78;"	d
PEEK_UINT32	daemon/frame.h	79;"	d
PEEK_UINT8	daemon/frame.h	77;"	d
POKE	daemon/frame.h	36;"	d
POKE_BYTES	daemon/frame.h	48;"	d
POKE_END_CDP_TLV	daemon/frame.h	122;"	d
POKE_END_EDP_TLV	daemon/frame.h	137;"	d
POKE_END_LLDP_TLV	daemon/frame.h	107;"	d
POKE_RESTORE	daemon/frame.h	58;"	d
POKE_SAVE	daemon/frame.h	56;"	d
POKE_START_CDP_TLV	daemon/frame.h	116;"	d
POKE_START_EDP_TLV	daemon/frame.h	130;"	d
POKE_START_LLDP_TLV	daemon/frame.h	102;"	d
POKE_UINT16	daemon/frame.h	46;"	d
POKE_UINT32	daemon/frame.h	47;"	d
POKE_UINT8	daemon/frame.h	45;"	d
PRIV_DELETE_CTL_SOCKET	daemon/lldpd.h	/^	PRIV_DELETE_CTL_SOCKET,$/;"	e	enum:priv_cmd
PRIV_ETHTOOL	daemon/lldpd.h	/^	PRIV_ETHTOOL,$/;"	e	enum:priv_cmd
PRIV_GET_HOSTNAME	daemon/lldpd.h	/^	PRIV_GET_HOSTNAME,$/;"	e	enum:priv_cmd
PRIV_IFACE_DESCRIPTION	daemon/lldpd.h	/^	PRIV_IFACE_DESCRIPTION,$/;"	e	enum:priv_cmd
PRIV_IFACE_INIT	daemon/lldpd.h	/^	PRIV_IFACE_INIT,$/;"	e	enum:priv_cmd
PRIV_IFACE_MAC	daemon/lldpd.h	/^	PRIV_IFACE_MAC,$/;"	e	enum:priv_cmd
PRIV_IFACE_MULTICAST	daemon/lldpd.h	/^	PRIV_IFACE_MULTICAST,$/;"	e	enum:priv_cmd
PRIV_IFACE_PROMISC	daemon/lldpd.h	/^	PRIV_IFACE_PROMISC,$/;"	e	enum:priv_cmd
PRIV_OPEN	daemon/lldpd.h	/^	PRIV_OPEN,$/;"	e	enum:priv_cmd
PRIV_PING	daemon/lldpd.h	/^	PRIV_PING,$/;"	e	enum:priv_cmd
PRIV_PRIVILEGED	daemon/lldpd.h	/^	PRIV_PRIVILEGED,$/;"	e	enum:priv_context
PRIV_SNMP_SOCKET	daemon/lldpd.h	/^	PRIV_SNMP_SOCKET,$/;"	e	enum:priv_cmd
PRIV_UNPRIVILEGED	daemon/lldpd.h	/^	PRIV_UNPRIVILEGED$/;"	e	enum:priv_context
PROTO_DECODE_SIG	daemon/lldpd.h	82;"	d
PROTO_GUESS_SIG	daemon/lldpd.h	83;"	d
PROTO_SEND_SIG	daemon/lldpd.h	81;"	d
REG_SYSCALL	daemon/priv-seccomp.c	32;"	d	file:
REG_SYSCALL	daemon/priv-seccomp.c	35;"	d	file:
REG_SYSCALL	daemon/priv-seccomp.c	39;"	d	file:
RESET_ERROR	lib/atom.h	87;"	d
RONLY	daemon/agent.h	27;"	d
RUNNING_ON_VALGRIND	daemon/lldpd.h	28;"	d
SEP	client/kv_writer.c	26;"	d	file:
SET_CONFIG	ctl.h	/^	SET_CONFIG,		\/* Change global configuration *\/$/;"	e	enum:hmsg_type
SET_ERROR	lib/atom.h	86;"	d
SET_PORT	ctl.h	/^	SET_PORT,		\/* Set port-related information (location, power, policy) *\/$/;"	e	enum:hmsg_type
SET_STR	lib/atoms/config.c	180;"	d	file:
SIOCGLAGG	daemon/interfaces-bsd.c	137;"	d	file:
SMART_HIDDEN	daemon/lldpd.h	98;"	d
SMART_INCOMING	lldpd-structs.h	369;"	d
SMART_INCOMING_FILTER	lldpd-structs.h	363;"	d
SMART_INCOMING_ONE_NEIGH	lldpd-structs.h	365;"	d
SMART_INCOMING_ONE_PROTO	lldpd-structs.h	364;"	d
SMART_OUTGOING	lldpd-structs.h	372;"	d
SMART_OUTGOING_FILTER	lldpd-structs.h	366;"	d
SMART_OUTGOING_ONE_NEIGH	lldpd-structs.h	368;"	d
SMART_OUTGOING_ONE_PROTO	lldpd-structs.h	367;"	d
SNMPTRAP_OID	daemon/agent.h	31;"	d
SONMP_MULTICAST_ADDR	daemon/protocols/sonmp.h	21;"	d
SONMP_SIZE	daemon/protocols/sonmp.h	27;"	d
SONMP_TOPOLOGY_CHANGED	daemon/protocols/sonmp.h	34;"	d
SONMP_TOPOLOGY_NEW	daemon/protocols/sonmp.h	36;"	d
SONMP_TOPOLOGY_UNCHANGED	daemon/protocols/sonmp.h	35;"	d
SUBSCRIBE	ctl.h	/^	SUBSCRIBE,		\/* Subscribe to neighbor changes *\/$/;"	e	enum:hmsg_type
SUPPRESS_LEAK	client/client.h	34;"	d
SUPPRESS_LEAK	client/client.h	36;"	d
SYSFS_CLASS_DMI	daemon/lldpd.h	70;"	d
SYSFS_CLASS_NET	daemon/lldpd.h	69;"	d
SYSFS_PATH_MAX	daemon/interfaces-linux.c	39;"	d	file:
SYS_SECCOMP	daemon/priv-seccomp.c	28;"	d	file:
TAILQ_ENTRY	client/commands.c	/^	TAILQ_ENTRY(candidate_word) next;$/;"	p	struct:candidate_word	file:	access:public
TAILQ_ENTRY	client/commands.c	/^	TAILQ_ENTRY(cmd_env_el) next; \/**< Next environment element *\/$/;"	p	struct:cmd_env_el	file:	access:public
TAILQ_ENTRY	client/commands.c	/^	TAILQ_ENTRY(cmd_env_stack) next; \/**< Next element, down the stack *\/$/;"	p	struct:cmd_env_stack	file:	access:public
TAILQ_ENTRY	client/commands.c	/^	TAILQ_ENTRY(cmd_node) next; \/**< Next sibling *\/$/;"	p	struct:cmd_node	file:	access:public
TAILQ_ENTRY	client/jansson_writer.c	/^	TAILQ_ENTRY(json_element) next;$/;"	p	struct:json_element	file:	access:public
TAILQ_ENTRY	client/jsonc_writer.c	/^	TAILQ_ENTRY(json_element) next;$/;"	p	struct:json_element	file:	access:public
TAILQ_ENTRY	client/lldpcli.c	/^	TAILQ_ENTRY(input) next;$/;"	p	struct:input	file:	access:public
TAILQ_ENTRY	daemon/event.c	/^	TAILQ_ENTRY(lldpd_events) next;$/;"	p	struct:lldpd_events	file:	access:public
TAILQ_ENTRY	daemon/event.c	/^	TAILQ_ENTRY(lldpd_one_client) next;$/;"	p	struct:lldpd_one_client	file:	access:public
TAILQ_ENTRY	marshal.c	/^	TAILQ_ENTRY(gc) next;$/;"	p	struct:gc	file:	access:public
TAILQ_ENTRY	marshal.c	/^	TAILQ_ENTRY(ref) next;$/;"	p	struct:ref	file:	access:public
TAILQ_HEAD	client/commands.c	/^	TAILQ_HEAD(, cmd_env_el) elements; \/**< List of environment variables *\/$/;"	p	struct:cmd_env	file:	access:public
TAILQ_HEAD	client/commands.c	/^	TAILQ_HEAD(, cmd_env_stack) stack; \/**< Stack *\/$/;"	p	struct:cmd_env	file:	access:public
TAILQ_HEAD	client/commands.c	/^	TAILQ_HEAD(, cmd_node) subentries; \/* List of subnodes *\/$/;"	p	struct:cmd_node	file:	access:public
TOOLARGE	compat/strtonum.c	28;"	d	file:
TOOSMALL	compat/strtonum.c	27;"	d	file:
TPR_VARIANT_MED_LOCATION	daemon/agent.c	300;"	d	file:
TPR_VARIANT_MED_POLICY	daemon/agent.c	299;"	d	file:
TRACE	daemon/trace.h	3;"	d
TRACE	daemon/trace.h	6;"	d
TRACE_ENABLED	daemon/trace.h	4;"	d
TRACE_ENABLED	daemon/trace.h	7;"	d
TRYNEXT	daemon/agent.c	584;"	d	file:
USING_AGENTX_SUBAGENT_MODULE	daemon/lldpd.h	79;"	d
_AGENT_H	daemon/agent.h	19;"	d
_CDP_H	daemon/protocols/cdp.h	19;"	d
_CLIENT_H	client/client.h	19;"	d
_COMPAT_H	compat/compat.h	34;"	d
_CTL_H	ctl.h	19;"	d
_EDP_H	daemon/protocols/edp.h	19;"	d
_FRAME_H	daemon/frame.h	20;"	d
_LLDPD_H	daemon/lldpd.h	19;"	d
_LLDPD_STRUCTS_H	lldpd-structs.h	19;"	d
_LLDP_H	lldp-const.h	19;"	d
_LLDP_TLV_H	daemon/lldp-tlv.h	19;"	d
_LOG_H	log.h	19;"	d
_MARSHAL_H	marshal.h	19;"	d
_SONMP_H	daemon/protocols/sonmp.h	19;"	d
_WRITER_H	client/writer.h	19;"	d
___getdelim	compat/getline.c	/^___getdelim(char **buf, size_t *buflen,$/;"	f	file:	signature:(char **buf, size_t *buflen, int sep, FILE *fp)
__anon1::f_uint16	daemon/frame.h	/^	uint16_t f_uint16;$/;"	m	union:__anon1	access:public
__anon1::f_uint32	daemon/frame.h	/^	uint32_t f_uint32;$/;"	m	union:__anon1	access:public
__anon1::f_uint8	daemon/frame.h	/^	uint8_t f_uint8;$/;"	m	union:__anon1	access:public
__anon6::string	lib/lldpctl.h	/^	char *string;$/;"	m	struct:__anon6	access:public
__anon6::value	lib/lldpctl.h	/^	int   value;$/;"	m	struct:__anon6	access:public
__lldpctl_atom_set_str_config	lib/atoms/config.c	/^__lldpctl_atom_set_str_config(struct _lldpctl_atom_config_t *c,$/;"	f	file:	signature:(struct _lldpctl_atom_config_t *c, char **local, char **global, const char *value)
__progname	client/lldpcli.c	40;"	d	file:
__progname	daemon/lldpd.c	75;"	d	file:
__tiny_variable	compat/empty.c	/^static int __tiny_variable __attribute__((__unused__)) = 0;$/;"	v	file:
_client_handle_set_port	daemon/client.c	/^_client_handle_set_port(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_port *port, struct lldpd_port_set *set)
_cmd_complete	client/lldpcli.c	/^_cmd_complete(int all)$/;"	f	file:	signature:(int all)
_cmd_medlocation	client/conf-med.c	/^_cmd_medlocation(struct lldpctl_conn_t *conn,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct cmd_env *env, int format)
_commands_execute	client/commands.c	/^static int _commands_execute(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_node *root, int argc, const char **argv, char **word, int all, int priv)
_lldp_send	daemon/protocols/lldp.c	/^static int _lldp_send(struct lldpd *global,$/;"	f	file:	signature:(struct lldpd *global, struct lldpd_hardware *hardware, u_int8_t c_id_subtype, char *c_id, int c_id_len, u_int8_t p_id_subtype, char *p_id, int p_id_len, int shutdown)
_lldpctl_alloc_in_atom	lib/atom.c	/^_lldpctl_alloc_in_atom(lldpctl_atom_t *atom, size_t size)$/;"	f	signature:(lldpctl_atom_t *atom, size_t size)
_lldpctl_alloc_in_atom	lib/atom.h	/^void *_lldpctl_alloc_in_atom(lldpctl_atom_t *, size_t);$/;"	p	signature:(lldpctl_atom_t *, size_t)
_lldpctl_atom_any_list_t	lib/atom.h	/^struct _lldpctl_atom_any_list_t {$/;"	s
_lldpctl_atom_any_list_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_any_list_t	access:public
_lldpctl_atom_any_list_t::parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_any_list_t	typeref:struct:_lldpctl_atom_any_list_t::_lldpctl_atom_port_t	access:public
_lldpctl_atom_chassis_t	lib/atom.h	/^struct _lldpctl_atom_chassis_t {$/;"	s
_lldpctl_atom_chassis_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_chassis_t	access:public
_lldpctl_atom_chassis_t::chassis	lib/atom.h	/^	struct lldpd_chassis *chassis;$/;"	m	struct:_lldpctl_atom_chassis_t	typeref:struct:_lldpctl_atom_chassis_t::lldpd_chassis	access:public
_lldpctl_atom_chassis_t::embedded	lib/atom.h	/^	int embedded;			     \/* This atom is "embedded" (not refcounted) *\/$/;"	m	struct:_lldpctl_atom_chassis_t	access:public
_lldpctl_atom_chassis_t::parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent; \/* Optional: parent of this atom (owning our reference) *\/$/;"	m	struct:_lldpctl_atom_chassis_t	typeref:struct:_lldpctl_atom_chassis_t::_lldpctl_atom_port_t	access:public
_lldpctl_atom_config_t	lib/atom.h	/^struct _lldpctl_atom_config_t {$/;"	s
_lldpctl_atom_config_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_config_t	access:public
_lldpctl_atom_config_t::config	lib/atom.h	/^	struct lldpd_config *config;$/;"	m	struct:_lldpctl_atom_config_t	typeref:struct:_lldpctl_atom_config_t::lldpd_config	access:public
_lldpctl_atom_create_custom_list	lib/atoms/custom.c	/^_lldpctl_atom_create_custom_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_create_med_caelements_list	lib/atoms/med.c	/^_lldpctl_atom_create_med_caelements_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_custom_list_t	lib/atom.h	/^struct _lldpctl_atom_custom_list_t {$/;"	s
_lldpctl_atom_custom_list_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_custom_list_t	access:public
_lldpctl_atom_custom_list_t::list	lib/atom.h	/^	struct lldpd_custom_list *list;$/;"	m	struct:_lldpctl_atom_custom_list_t	typeref:struct:_lldpctl_atom_custom_list_t::lldpd_custom_list	access:public
_lldpctl_atom_custom_list_t::parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_custom_list_t	typeref:struct:_lldpctl_atom_custom_list_t::_lldpctl_atom_port_t	access:public
_lldpctl_atom_custom_t	lib/atom.h	/^struct _lldpctl_atom_custom_t {$/;"	s
_lldpctl_atom_custom_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_custom_t	access:public
_lldpctl_atom_custom_t::op	lib/atom.h	/^	int op;$/;"	m	struct:_lldpctl_atom_custom_t	access:public
_lldpctl_atom_custom_t::parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_custom_t	typeref:struct:_lldpctl_atom_custom_t::_lldpctl_atom_port_t	access:public
_lldpctl_atom_custom_t::tlv	lib/atom.h	/^	struct lldpd_custom *tlv;$/;"	m	struct:_lldpctl_atom_custom_t	typeref:struct:_lldpctl_atom_custom_t::lldpd_custom	access:public
_lldpctl_atom_dot3_power_t	lib/atom.h	/^struct _lldpctl_atom_dot3_power_t {$/;"	s
_lldpctl_atom_dot3_power_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_dot3_power_t	access:public
_lldpctl_atom_dot3_power_t::parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_dot3_power_t	typeref:struct:_lldpctl_atom_dot3_power_t::_lldpctl_atom_port_t	access:public
_lldpctl_atom_free_any_list	lib/helpers.c	/^_lldpctl_atom_free_any_list(lldpctl_atom_t *atom)$/;"	f	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_any_list	lib/helpers.h	/^void _lldpctl_atom_free_any_list(lldpctl_atom_t *atom);$/;"	p	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_chassis	lib/atoms/chassis.c	/^_lldpctl_atom_free_chassis(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_config	lib/atoms/config.c	/^_lldpctl_atom_free_config(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_custom	lib/atoms/custom.c	/^_lldpctl_atom_free_custom(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_dot3_power	lib/atoms/dot3.c	/^_lldpctl_atom_free_dot3_power(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_interface	lib/atoms/interface.c	/^_lldpctl_atom_free_interface(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_interfaces_list	lib/atoms/interface.c	/^_lldpctl_atom_free_interfaces_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_med_caelement	lib/atoms/med.c	/^_lldpctl_atom_free_med_caelement(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_med_location	lib/atoms/med.c	/^_lldpctl_atom_free_med_location(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_med_policy	lib/atoms/med.c	/^_lldpctl_atom_free_med_policy(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_med_power	lib/atoms/med.c	/^_lldpctl_atom_free_med_power(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_mgmt	lib/atoms/mgmt.c	/^_lldpctl_atom_free_mgmt(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_mgmts_list	lib/atoms/mgmt.c	/^_lldpctl_atom_free_mgmts_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_pi	lib/atoms/dot1.c	/^_lldpctl_atom_free_pi(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_port	lib/atoms/port.c	/^_lldpctl_atom_free_port(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_ppvid	lib/atoms/dot1.c	/^_lldpctl_atom_free_ppvid(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_free_vlan	lib/atoms/dot1.c	/^_lldpctl_atom_free_vlan(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_get_atom_chassis	lib/atoms/chassis.c	/^_lldpctl_atom_get_atom_chassis(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_atom_med_location	lib/atoms/med.c	/^_lldpctl_atom_get_atom_med_location(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_atom_port	lib/atoms/port.c	/^_lldpctl_atom_get_atom_port(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_buf_chassis	lib/atoms/chassis.c	/^_lldpctl_atom_get_buf_chassis(lldpctl_atom_t *atom, lldpctl_key_t key, size_t *n)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, size_t *n)
_lldpctl_atom_get_buf_pi	lib/atoms/dot1.c	/^_lldpctl_atom_get_buf_pi(lldpctl_atom_t *atom, lldpctl_key_t key, size_t *n)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, size_t *n)
_lldpctl_atom_get_buf_port	lib/atoms/port.c	/^_lldpctl_atom_get_buf_port(lldpctl_atom_t *atom, lldpctl_key_t key, size_t *n)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, size_t *n)
_lldpctl_atom_get_buffer_custom	lib/atoms/custom.c	/^_lldpctl_atom_get_buffer_custom(lldpctl_atom_t *atom, lldpctl_key_t key, size_t *n)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, size_t *n)
_lldpctl_atom_get_int_chassis	lib/atoms/chassis.c	/^_lldpctl_atom_get_int_chassis(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_int_config	lib/atoms/config.c	/^_lldpctl_atom_get_int_config(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_int_custom	lib/atoms/custom.c	/^_lldpctl_atom_get_int_custom(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_int_dot3_power	lib/atoms/dot3.c	/^_lldpctl_atom_get_int_dot3_power(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_int_med_caelement	lib/atoms/med.c	/^_lldpctl_atom_get_int_med_caelement(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_int_med_location	lib/atoms/med.c	/^_lldpctl_atom_get_int_med_location(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_int_med_policy	lib/atoms/med.c	/^_lldpctl_atom_get_int_med_policy(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_int_med_power	lib/atoms/med.c	/^_lldpctl_atom_get_int_med_power(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_int_port	lib/atoms/port.c	/^_lldpctl_atom_get_int_port(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_int_ppvid	lib/atoms/dot1.c	/^_lldpctl_atom_get_int_ppvid(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_int_vlan	lib/atoms/dot1.c	/^_lldpctl_atom_get_int_vlan(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_str_chassis	lib/atoms/chassis.c	/^_lldpctl_atom_get_str_chassis(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_str_config	lib/atoms/config.c	/^_lldpctl_atom_get_str_config(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_str_dot3_power	lib/atoms/dot3.c	/^_lldpctl_atom_get_str_dot3_power(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_str_interface	lib/atoms/interface.c	/^_lldpctl_atom_get_str_interface(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_str_med_caelement	lib/atoms/med.c	/^_lldpctl_atom_get_str_med_caelement(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_str_med_location	lib/atoms/med.c	/^_lldpctl_atom_get_str_med_location(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_str_med_policy	lib/atoms/med.c	/^_lldpctl_atom_get_str_med_policy(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_str_med_power	lib/atoms/med.c	/^_lldpctl_atom_get_str_med_power(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_str_mgmt	lib/atoms/mgmt.c	/^_lldpctl_atom_get_str_mgmt(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_str_port	lib/atoms/port.c	/^_lldpctl_atom_get_str_port(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_get_str_vlan	lib/atoms/dot1.c	/^_lldpctl_atom_get_str_vlan(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
_lldpctl_atom_interface_t	lib/atom.h	/^struct _lldpctl_atom_interface_t {$/;"	s
_lldpctl_atom_interface_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_interface_t	access:public
_lldpctl_atom_interface_t::name	lib/atom.h	/^	char *name;$/;"	m	struct:_lldpctl_atom_interface_t	access:public
_lldpctl_atom_interfaces_list_t	lib/atom.h	/^struct _lldpctl_atom_interfaces_list_t {$/;"	s
_lldpctl_atom_interfaces_list_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_interfaces_list_t	access:public
_lldpctl_atom_interfaces_list_t::ifs	lib/atom.h	/^	struct lldpd_interface_list *ifs;$/;"	m	struct:_lldpctl_atom_interfaces_list_t	typeref:struct:_lldpctl_atom_interfaces_list_t::lldpd_interface_list	access:public
_lldpctl_atom_iter_custom_list	lib/atoms/custom.c	/^_lldpctl_atom_iter_custom_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_iter_interfaces_list	lib/atoms/interface.c	/^_lldpctl_atom_iter_interfaces_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_iter_med_caelements_list	lib/atoms/med.c	/^_lldpctl_atom_iter_med_caelements_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_iter_med_locations_list	lib/atoms/med.c	/^_lldpctl_atom_iter_med_locations_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_iter_med_policies_list	lib/atoms/med.c	/^_lldpctl_atom_iter_med_policies_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_iter_mgmts_list	lib/atoms/mgmt.c	/^_lldpctl_atom_iter_mgmts_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_iter_pis_list	lib/atoms/dot1.c	/^_lldpctl_atom_iter_pis_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_iter_ports_list	lib/atoms/port.c	/^_lldpctl_atom_iter_ports_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_iter_ppvids_list	lib/atoms/dot1.c	/^_lldpctl_atom_iter_ppvids_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_iter_vlans_list	lib/atoms/dot1.c	/^_lldpctl_atom_iter_vlans_list(lldpctl_atom_t *atom)$/;"	f	file:	signature:(lldpctl_atom_t *atom)
_lldpctl_atom_med_caelement_t	lib/atom.h	/^struct _lldpctl_atom_med_caelement_t {$/;"	s
_lldpctl_atom_med_caelement_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_med_caelement_t	access:public
_lldpctl_atom_med_caelement_t::len	lib/atom.h	/^	size_t   len;$/;"	m	struct:_lldpctl_atom_med_caelement_t	access:public
_lldpctl_atom_med_caelement_t::parent	lib/atom.h	/^	struct _lldpctl_atom_med_location_t *parent;$/;"	m	struct:_lldpctl_atom_med_caelement_t	typeref:struct:_lldpctl_atom_med_caelement_t::_lldpctl_atom_med_location_t	access:public
_lldpctl_atom_med_caelement_t::type	lib/atom.h	/^	int type;$/;"	m	struct:_lldpctl_atom_med_caelement_t	access:public
_lldpctl_atom_med_caelement_t::value	lib/atom.h	/^	uint8_t *value;$/;"	m	struct:_lldpctl_atom_med_caelement_t	access:public
_lldpctl_atom_med_caelements_list_t	lib/atom.h	/^struct _lldpctl_atom_med_caelements_list_t {$/;"	s
_lldpctl_atom_med_caelements_list_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_med_caelements_list_t	access:public
_lldpctl_atom_med_caelements_list_t::parent	lib/atom.h	/^	struct _lldpctl_atom_med_location_t *parent;$/;"	m	struct:_lldpctl_atom_med_caelements_list_t	typeref:struct:_lldpctl_atom_med_caelements_list_t::_lldpctl_atom_med_location_t	access:public
_lldpctl_atom_med_location_t	lib/atom.h	/^struct _lldpctl_atom_med_location_t {$/;"	s
_lldpctl_atom_med_location_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_med_location_t	access:public
_lldpctl_atom_med_location_t::location	lib/atom.h	/^	struct lldpd_med_loc *location;$/;"	m	struct:_lldpctl_atom_med_location_t	typeref:struct:_lldpctl_atom_med_location_t::lldpd_med_loc	access:public
_lldpctl_atom_med_location_t::parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_med_location_t	typeref:struct:_lldpctl_atom_med_location_t::_lldpctl_atom_port_t	access:public
_lldpctl_atom_med_policy_t	lib/atom.h	/^struct _lldpctl_atom_med_policy_t {$/;"	s
_lldpctl_atom_med_policy_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_med_policy_t	access:public
_lldpctl_atom_med_policy_t::parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_med_policy_t	typeref:struct:_lldpctl_atom_med_policy_t::_lldpctl_atom_port_t	access:public
_lldpctl_atom_med_policy_t::policy	lib/atom.h	/^	struct lldpd_med_policy *policy;$/;"	m	struct:_lldpctl_atom_med_policy_t	typeref:struct:_lldpctl_atom_med_policy_t::lldpd_med_policy	access:public
_lldpctl_atom_med_power_t	lib/atom.h	/^struct _lldpctl_atom_med_power_t {$/;"	s
_lldpctl_atom_med_power_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_med_power_t	access:public
_lldpctl_atom_med_power_t::parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_med_power_t	typeref:struct:_lldpctl_atom_med_power_t::_lldpctl_atom_port_t	access:public
_lldpctl_atom_mgmt_t	lib/atom.h	/^struct _lldpctl_atom_mgmt_t {$/;"	s
_lldpctl_atom_mgmt_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_mgmt_t	access:public
_lldpctl_atom_mgmt_t::mgmt	lib/atom.h	/^	struct lldpd_mgmt *mgmt;$/;"	m	struct:_lldpctl_atom_mgmt_t	typeref:struct:_lldpctl_atom_mgmt_t::lldpd_mgmt	access:public
_lldpctl_atom_mgmt_t::parent	lib/atom.h	/^	lldpctl_atom_t *parent;$/;"	m	struct:_lldpctl_atom_mgmt_t	access:public
_lldpctl_atom_mgmts_list_t	lib/atom.h	/^struct _lldpctl_atom_mgmts_list_t {$/;"	s
_lldpctl_atom_mgmts_list_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_mgmts_list_t	access:public
_lldpctl_atom_mgmts_list_t::chassis	lib/atom.h	/^	struct lldpd_chassis *chassis; \/* Chassis containing the list of IP addresses *\/$/;"	m	struct:_lldpctl_atom_mgmts_list_t	typeref:struct:_lldpctl_atom_mgmts_list_t::lldpd_chassis	access:public
_lldpctl_atom_mgmts_list_t::parent	lib/atom.h	/^	lldpctl_atom_t *parent;$/;"	m	struct:_lldpctl_atom_mgmts_list_t	access:public
_lldpctl_atom_new_any_list	lib/helpers.c	/^_lldpctl_atom_new_any_list(lldpctl_atom_t *atom, va_list ap)$/;"	f	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_any_list	lib/helpers.h	/^int _lldpctl_atom_new_any_list(lldpctl_atom_t *atom, va_list ap);$/;"	p	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_chassis	lib/atoms/chassis.c	/^_lldpctl_atom_new_chassis(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_config	lib/atoms/config.c	/^_lldpctl_atom_new_config(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_custom	lib/atoms/custom.c	/^_lldpctl_atom_new_custom(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_dot3_power	lib/atoms/dot3.c	/^_lldpctl_atom_new_dot3_power(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_interface	lib/atoms/interface.c	/^_lldpctl_atom_new_interface(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_interfaces_list	lib/atoms/interface.c	/^_lldpctl_atom_new_interfaces_list(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_med_caelement	lib/atoms/med.c	/^_lldpctl_atom_new_med_caelement(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_med_location	lib/atoms/med.c	/^_lldpctl_atom_new_med_location(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_med_policy	lib/atoms/med.c	/^_lldpctl_atom_new_med_policy(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_med_power	lib/atoms/med.c	/^_lldpctl_atom_new_med_power(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_mgmt	lib/atoms/mgmt.c	/^_lldpctl_atom_new_mgmt(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_mgmts_list	lib/atoms/mgmt.c	/^_lldpctl_atom_new_mgmts_list(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_pi	lib/atoms/dot1.c	/^_lldpctl_atom_new_pi(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_port	lib/atoms/port.c	/^_lldpctl_atom_new_port(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_ppvid	lib/atoms/dot1.c	/^_lldpctl_atom_new_ppvid(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_new_vlan	lib/atoms/dot1.c	/^_lldpctl_atom_new_vlan(lldpctl_atom_t *atom, va_list ap)$/;"	f	file:	signature:(lldpctl_atom_t *atom, va_list ap)
_lldpctl_atom_next_custom_list	lib/atoms/custom.c	/^_lldpctl_atom_next_custom_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_next_interfaces_list	lib/atoms/interface.c	/^_lldpctl_atom_next_interfaces_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_next_med_caelements_list	lib/atoms/med.c	/^_lldpctl_atom_next_med_caelements_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_next_med_locations_list	lib/atoms/med.c	/^_lldpctl_atom_next_med_locations_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_next_med_policies_list	lib/atoms/med.c	/^_lldpctl_atom_next_med_policies_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_next_mgmts_list	lib/atoms/mgmt.c	/^_lldpctl_atom_next_mgmts_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_next_pis_list	lib/atoms/dot1.c	/^_lldpctl_atom_next_pis_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_next_ports_list	lib/atoms/port.c	/^_lldpctl_atom_next_ports_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_next_ppvids_list	lib/atoms/dot1.c	/^_lldpctl_atom_next_ppvids_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_next_vlans_list	lib/atoms/dot1.c	/^_lldpctl_atom_next_vlans_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_pi_t	lib/atom.h	/^struct _lldpctl_atom_pi_t {$/;"	s
_lldpctl_atom_pi_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_pi_t	access:public
_lldpctl_atom_pi_t::parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_pi_t	typeref:struct:_lldpctl_atom_pi_t::_lldpctl_atom_port_t	access:public
_lldpctl_atom_pi_t::pi	lib/atom.h	/^	struct lldpd_pi *pi;$/;"	m	struct:_lldpctl_atom_pi_t	typeref:struct:_lldpctl_atom_pi_t::lldpd_pi	access:public
_lldpctl_atom_port_t	lib/atom.h	/^struct _lldpctl_atom_port_t {$/;"	s
_lldpctl_atom_port_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_port_t	access:public
_lldpctl_atom_port_t::chassis	lib/atom.h	/^	lldpctl_atom_t *chassis; \/* Internal atom for chassis *\/$/;"	m	struct:_lldpctl_atom_port_t	access:public
_lldpctl_atom_port_t::hardware	lib/atom.h	/^	struct lldpd_hardware *hardware; \/* Local port only (but optional) *\/$/;"	m	struct:_lldpctl_atom_port_t	typeref:struct:_lldpctl_atom_port_t::lldpd_hardware	access:public
_lldpctl_atom_port_t::local	lib/atom.h	/^	int local;			 \/* Local or remote port? *\/$/;"	m	struct:_lldpctl_atom_port_t	access:public
_lldpctl_atom_port_t::parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent; \/* Local port if we are a remote port *\/$/;"	m	struct:_lldpctl_atom_port_t	typeref:struct:_lldpctl_atom_port_t::_lldpctl_atom_port_t	access:public
_lldpctl_atom_port_t::port	lib/atom.h	/^	struct lldpd_port     *port;	 \/* Local and remote *\/$/;"	m	struct:_lldpctl_atom_port_t	typeref:struct:_lldpctl_atom_port_t::lldpd_port	access:public
_lldpctl_atom_ppvid_t	lib/atom.h	/^struct _lldpctl_atom_ppvid_t {$/;"	s
_lldpctl_atom_ppvid_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_ppvid_t	access:public
_lldpctl_atom_ppvid_t::parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_ppvid_t	typeref:struct:_lldpctl_atom_ppvid_t::_lldpctl_atom_port_t	access:public
_lldpctl_atom_ppvid_t::ppvid	lib/atom.h	/^	struct lldpd_ppvid *ppvid;$/;"	m	struct:_lldpctl_atom_ppvid_t	typeref:struct:_lldpctl_atom_ppvid_t::lldpd_ppvid	access:public
_lldpctl_atom_set_atom_med_location	lib/atoms/med.c	/^_lldpctl_atom_set_atom_med_location(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, lldpctl_atom_t *value)
_lldpctl_atom_set_atom_port	lib/atoms/port.c	/^_lldpctl_atom_set_atom_port(lldpctl_atom_t *atom, lldpctl_key_t key, lldpctl_atom_t *value)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, lldpctl_atom_t *value)
_lldpctl_atom_set_buffer_custom	lib/atoms/custom.c	/^_lldpctl_atom_set_buffer_custom(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const u_int8_t *buf, size_t n)
_lldpctl_atom_set_int_config	lib/atoms/config.c	/^_lldpctl_atom_set_int_config(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, long int value)
_lldpctl_atom_set_int_custom	lib/atoms/custom.c	/^_lldpctl_atom_set_int_custom(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, long int value)
_lldpctl_atom_set_int_dot3_power	lib/atoms/dot3.c	/^_lldpctl_atom_set_int_dot3_power(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, long int value)
_lldpctl_atom_set_int_med_caelement	lib/atoms/med.c	/^_lldpctl_atom_set_int_med_caelement(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, long int value)
_lldpctl_atom_set_int_med_location	lib/atoms/med.c	/^_lldpctl_atom_set_int_med_location(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, long int value)
_lldpctl_atom_set_int_med_policy	lib/atoms/med.c	/^_lldpctl_atom_set_int_med_policy(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, long int value)
_lldpctl_atom_set_int_med_power	lib/atoms/med.c	/^_lldpctl_atom_set_int_med_power(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, long int value)
_lldpctl_atom_set_int_port	lib/atoms/port.c	/^_lldpctl_atom_set_int_port(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, long int value)
_lldpctl_atom_set_str_config	lib/atoms/config.c	/^_lldpctl_atom_set_str_config(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const char *value)
_lldpctl_atom_set_str_custom	lib/atoms/custom.c	/^_lldpctl_atom_set_str_custom(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const char *value)
_lldpctl_atom_set_str_dot3_power	lib/atoms/dot3.c	/^_lldpctl_atom_set_str_dot3_power(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const char *value)
_lldpctl_atom_set_str_med_caelement	lib/atoms/med.c	/^_lldpctl_atom_set_str_med_caelement(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const char *value)
_lldpctl_atom_set_str_med_location	lib/atoms/med.c	/^_lldpctl_atom_set_str_med_location(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const char *value)
_lldpctl_atom_set_str_med_policy	lib/atoms/med.c	/^_lldpctl_atom_set_str_med_policy(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const char *value)
_lldpctl_atom_set_str_med_power	lib/atoms/med.c	/^_lldpctl_atom_set_str_med_power(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const char *value)
_lldpctl_atom_set_str_port	lib/atoms/port.c	/^_lldpctl_atom_set_str_port(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const char *value)
_lldpctl_atom_value_custom_list	lib/atoms/custom.c	/^_lldpctl_atom_value_custom_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_value_interfaces_list	lib/atoms/interface.c	/^_lldpctl_atom_value_interfaces_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_value_med_caelements_list	lib/atoms/med.c	/^_lldpctl_atom_value_med_caelements_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_value_med_locations_list	lib/atoms/med.c	/^_lldpctl_atom_value_med_locations_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_value_med_policies_list	lib/atoms/med.c	/^_lldpctl_atom_value_med_policies_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_value_mgmts_list	lib/atoms/mgmt.c	/^_lldpctl_atom_value_mgmts_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_value_pis_list	lib/atoms/dot1.c	/^_lldpctl_atom_value_pis_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_value_ports_list	lib/atoms/port.c	/^_lldpctl_atom_value_ports_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_value_ppvids_list	lib/atoms/dot1.c	/^_lldpctl_atom_value_ppvids_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_value_vlans_list	lib/atoms/dot1.c	/^_lldpctl_atom_value_vlans_list(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	file:	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
_lldpctl_atom_vlan_t	lib/atom.h	/^struct _lldpctl_atom_vlan_t {$/;"	s
_lldpctl_atom_vlan_t::base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_vlan_t	access:public
_lldpctl_atom_vlan_t::parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_vlan_t	typeref:struct:_lldpctl_atom_vlan_t::_lldpctl_atom_port_t	access:public
_lldpctl_atom_vlan_t::vlan	lib/atom.h	/^	struct lldpd_vlan *vlan;$/;"	m	struct:_lldpctl_atom_vlan_t	typeref:struct:_lldpctl_atom_vlan_t::lldpd_vlan	access:public
_lldpctl_do_something	lib/atom.c	/^_lldpctl_do_something(lldpctl_conn_t *conn,$/;"	f	signature:(lldpctl_conn_t *conn, int state_send, int state_recv, const char *state_data, enum hmsg_type type, void *to_send, struct marshal_info *mi_send, void **to_recv, struct marshal_info *mi_recv)
_lldpctl_do_something	lib/atom.h	/^int _lldpctl_do_something(lldpctl_conn_t *conn,$/;"	p	signature:(lldpctl_conn_t *conn, int state_send, int state_recv, const char *state_data, enum hmsg_type type, void *to_send, struct marshal_info *mi_send, void **to_recv, struct marshal_info *mi_recv)
_lldpctl_dump_in_atom	lib/atom.c	/^_lldpctl_dump_in_atom(lldpctl_atom_t *atom,$/;"	f	signature:(lldpctl_atom_t *atom, const uint8_t *input, size_t size, char sep, size_t max)
_lldpctl_dump_in_atom	lib/atom.h	/^const char *_lldpctl_dump_in_atom(lldpctl_atom_t *, const uint8_t *, size_t, char, size_t);$/;"	p	signature:(lldpctl_atom_t *, const uint8_t *, size_t, char, size_t)
_lldpctl_needs	lib/atom.h	/^ssize_t _lldpctl_needs(lldpctl_conn_t *lldpctl, size_t length);$/;"	p	signature:(lldpctl_conn_t *lldpctl, size_t length)
_lldpctl_needs	lib/connection.c	/^_lldpctl_needs(lldpctl_conn_t *conn, size_t length)$/;"	f	signature:(lldpctl_conn_t *conn, size_t length)
_lldpctl_new_atom	lib/atom.c	/^_lldpctl_new_atom(lldpctl_conn_t *conn, atom_t type, ...)$/;"	f	signature:(lldpctl_conn_t *conn, atom_t type, ...)
_lldpctl_new_atom	lib/atom.h	/^struct lldpctl_atom_t *_lldpctl_new_atom(lldpctl_conn_t *conn, atom_t type, ...);$/;"	p	signature:(lldpctl_conn_t *conn, atom_t type, ...)
_p_hardware_flags	lldpd-structs.h	/^	int			 _p_hardware_flags; \/* This is a copy of hardware flags. Do not use it! *\/$/;"	m	struct:lldpd_port	access:public
a	daemon/lldpd.c	/^struct intint { int a; int b; };$/;"	m	struct:intint	file:	access:public
actions	daemon/priv.c	/^static struct dispatch_actions actions[] = {$/;"	v	typeref:struct:dispatch_actions	file:
add_chassis	lib/atoms/port.c	/^add_chassis(struct chassis_list *chassis_list,$/;"	f	file:	signature:(struct chassis_list *chassis_list, struct lldpd_chassis *chassis)
add_history	client/client.h	/^extern void add_history ();$/;"	p	signature:()
address	daemon/lldpd.h	/^	char *address;		\/* MAC address *\/$/;"	m	struct:interfaces_device	access:public
address	daemon/lldpd.h	/^	struct sockaddr_storage address; \/* Address *\/$/;"	m	struct:interfaces_address	typeref:struct:interfaces_address::sockaddr_storage	access:public
addresses	daemon/netlink.c	/^	struct interfaces_address_list *addresses;$/;"	m	struct:lldpd_netlink	typeref:struct:lldpd_netlink::interfaces_address_list	file:	access:public
agent_h_local_chassis	daemon/agent.c	/^agent_h_local_chassis(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_local_management	daemon/agent.c	/^agent_h_local_management(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_local_med	daemon/agent.c	/^agent_h_local_med(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_local_med_location	daemon/agent.c	/^agent_h_local_med_location(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_local_med_policy	daemon/agent.c	/^agent_h_local_med_policy(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_local_med_power	daemon/agent.c	/^agent_h_local_med_power(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_local_pi	daemon/agent.c	/^agent_h_local_pi(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_local_port	daemon/agent.c	/^agent_h_local_port(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_local_ppvid	daemon/agent.c	/^agent_h_local_ppvid(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_local_vlan	daemon/agent.c	/^agent_h_local_vlan(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_remote_chassis	daemon/agent.c	/^agent_h_remote_chassis(struct variable *vp, oid*name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid*name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_remote_management	daemon/agent.c	/^agent_h_remote_management(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_remote_med	daemon/agent.c	/^agent_h_remote_med(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_remote_med_location	daemon/agent.c	/^agent_h_remote_med_location(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_remote_med_policy	daemon/agent.c	/^agent_h_remote_med_policy(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_remote_med_power	daemon/agent.c	/^agent_h_remote_med_power(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_remote_pi	daemon/agent.c	/^agent_h_remote_pi(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_remote_port	daemon/agent.c	/^agent_h_remote_port(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_remote_ppvid	daemon/agent.c	/^agent_h_remote_ppvid(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_remote_vlan	daemon/agent.c	/^agent_h_remote_vlan(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_scalars	daemon/agent.c	/^agent_h_scalars(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_h_stats	daemon/agent.c	/^agent_h_stats(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
agent_init	daemon/agent.c	/^void agent_init(struct lldpd *cfg, const char *agentx)$/;"	f	signature:(struct lldpd *cfg, const char *agentx)
agent_init	daemon/lldpd.h	/^void		 agent_init(struct lldpd *, const char *);$/;"	p	signature:(struct lldpd *, const char *)
agent_lldp_vars	daemon/agent.c	/^struct variable8 agent_lldp_vars[] = {$/;"	v	typeref:struct:variable8
agent_lldp_vars_size	daemon/agent.c	/^size_t agent_lldp_vars_size(void) {$/;"	f	signature:(void)
agent_lldp_vars_size	daemon/agent.h	/^size_t agent_lldp_vars_size(void);$/;"	p	signature:(void)
agent_log_callback	daemon/agent.c	/^agent_log_callback(int major, int minor,$/;"	f	file:	signature:(int major, int minor, void *serverarg, void *clientarg)
agent_notify	daemon/agent.c	/^agent_notify(struct lldpd_hardware *hardware, int type,$/;"	f	signature:(struct lldpd_hardware *hardware, int type, struct lldpd_port *rport)
agent_notify	daemon/lldpd.h	/^void		 agent_notify(struct lldpd_hardware *, int, struct lldpd_port *);$/;"	p	signature:(struct lldpd_hardware *, int, struct lldpd_port *)
agent_priv_register_domain	daemon/agent_priv.c	/^agent_priv_register_domain()$/;"	f
agent_priv_register_domain	daemon/lldpd.h	/^void		 agent_priv_register_domain(void);$/;"	p	signature:(void)
agent_priv_unix_accept	daemon/agent_priv.c	/^agent_priv_unix_accept(netsnmp_transport *t)$/;"	f	file:	signature:(netsnmp_transport *t)
agent_priv_unix_close	daemon/agent_priv.c	/^agent_priv_unix_close(netsnmp_transport *t)$/;"	f	file:	signature:(netsnmp_transport *t)
agent_priv_unix_create_ostring	daemon/agent_priv.c	/^agent_priv_unix_create_ostring(const u_char * o, size_t o_len, int local)$/;"	f	file:	signature:(const u_char * o, size_t o_len, int local)
agent_priv_unix_create_tstring	daemon/agent_priv.c	/^agent_priv_unix_create_tstring(const char *string, int local)$/;"	f	signature:(const char *string, int local)
agent_priv_unix_fmtaddr	daemon/agent_priv.c	/^agent_priv_unix_fmtaddr(netsnmp_transport *t, void *data, int len)$/;"	f	file:	signature:(netsnmp_transport *t, void *data, int len)
agent_priv_unix_recv	daemon/agent_priv.c	/^agent_priv_unix_recv(netsnmp_transport *t, void *buf, int size,$/;"	f	file:	signature:(netsnmp_transport *t, void *buf, int size, void **opaque, int *olength)
agent_priv_unix_send	daemon/agent_priv.c	/^agent_priv_unix_send(netsnmp_transport *t, void *buf, int size,$/;"	f	file:	signature:(netsnmp_transport *t, void *buf, int size, void **opaque, int *olength)
agent_priv_unix_transport	daemon/agent_priv.c	/^agent_priv_unix_transport(const char *string, int len, int local)$/;"	f	file:	signature:(const char *string, int len, int local)
agent_scfg	daemon/agent.c	/^struct lldpd *agent_scfg;$/;"	v	typeref:struct:lldpd
agent_shutdown	daemon/agent.c	/^agent_shutdown()$/;"	f
agent_shutdown	daemon/lldpd.h	/^void		 agent_shutdown(void);$/;"	p	signature:(void)
agent_v_chassis	daemon/agent.c	/^agent_v_chassis(struct variable *vp, size_t *var_len,$/;"	f	file:	signature:(struct variable *vp, size_t *var_len, struct lldpd_chassis *chassis)
agent_v_management	daemon/agent.c	/^agent_v_management(struct variable *vp, size_t *var_len, struct lldpd_mgmt *mgmt)$/;"	f	file:	signature:(struct variable *vp, size_t *var_len, struct lldpd_mgmt *mgmt)
agent_v_med	daemon/agent.c	/^agent_v_med(struct variable *vp, size_t *var_len,$/;"	f	file:	signature:(struct variable *vp, size_t *var_len, struct lldpd_chassis *chassis, struct lldpd_port *port)
agent_v_med_location	daemon/agent.c	/^agent_v_med_location(struct variable *vp, size_t *var_len,$/;"	f	file:	signature:(struct variable *vp, size_t *var_len, struct lldpd_med_loc *location)
agent_v_med_policy	daemon/agent.c	/^agent_v_med_policy(struct variable *vp, size_t *var_len,$/;"	f	file:	signature:(struct variable *vp, size_t *var_len, struct lldpd_med_policy *policy)
agent_v_med_power	daemon/agent.c	/^agent_v_med_power(struct variable *vp, size_t *var_len, struct lldpd_med_power *power)$/;"	f	file:	signature:(struct variable *vp, size_t *var_len, struct lldpd_med_power *power)
agent_v_pi	daemon/agent.c	/^agent_v_pi(struct variable *vp, size_t *var_len, struct lldpd_pi *pi)$/;"	f	file:	signature:(struct variable *vp, size_t *var_len, struct lldpd_pi *pi)
agent_v_port	daemon/agent.c	/^agent_v_port(struct variable *vp, size_t *var_len, struct lldpd_port *port)$/;"	f	file:	signature:(struct variable *vp, size_t *var_len, struct lldpd_port *port)
agent_v_ppvid	daemon/agent.c	/^agent_v_ppvid(struct variable *vp, size_t *var_len, struct lldpd_ppvid *ppvid)$/;"	f	file:	signature:(struct variable *vp, size_t *var_len, struct lldpd_ppvid *ppvid)
agent_v_vlan	daemon/agent.c	/^agent_v_vlan(struct variable *vp, size_t *var_len, struct lldpd_vlan *vlan)$/;"	f	file:	signature:(struct variable *vp, size_t *var_len, struct lldpd_vlan *vlan)
alias	daemon/lldpd.h	/^	char *alias;		\/* Alias *\/$/;"	m	struct:interfaces_device	access:public
allocated	lldpd-structs.h	/^	u_int16_t		allocated;$/;"	m	struct:lldpd_dot3_power	access:public
arg	client/commands.c	/^	void *arg;		\/**< Magic argument for the previous two functions *\/$/;"	m	struct:cmd_node	file:	access:public
arg	daemon/lldpd.h	/^	char		 arg;		\/* Argument to enable this protocol *\/$/;"	m	struct:protocol	access:public
argc	client/commands.c	/^	int argc;		\/**< Number of argument in the command *\/$/;"	m	struct:cmd_env	file:	access:public
argp	client/commands.c	/^	int argp;		\/**< Current argument *\/$/;"	m	struct:cmd_env	file:	access:public
argv	client/commands.c	/^	const char **argv;	\/**< Arguments *\/$/;"	m	struct:cmd_env	file:	access:public
asprintf	compat/asprintf.c	/^int asprintf(char **str, const char *fmt, ...)$/;"	f	signature:(char **str, const char *fmt, ...)
asprintf	compat/compat.h	/^int asprintf (char **, const char *, ...) __attribute__ ((format (printf, 2, 3)));$/;"	p	signature:(char **, const char *, ...)
asroot_ctl_cleanup	daemon/priv.c	/^asroot_ctl_cleanup()$/;"	f	file:
asroot_ethtool	daemon/lldpd.h	/^void	 asroot_ethtool(void);$/;"	p	signature:(void)
asroot_ethtool	daemon/priv-linux.c	/^asroot_ethtool()$/;"	f
asroot_gethostname	daemon/priv.c	/^asroot_gethostname()$/;"	f	file:
asroot_iface_description	daemon/priv.c	/^asroot_iface_description()$/;"	f	file:
asroot_iface_description_os	daemon/lldpd.h	/^int	 asroot_iface_description_os(const char *, const char *);$/;"	p	signature:(const char *, const char *)
asroot_iface_description_os	daemon/priv-bsd.c	/^asroot_iface_description_os(const char *name, const char *description)$/;"	f	signature:(const char *name, const char *description)
asroot_iface_description_os	daemon/priv-linux.c	/^asroot_iface_description_os(const char *name, const char *description)$/;"	f	signature:(const char *name, const char *description)
asroot_iface_init	daemon/priv.c	/^asroot_iface_init()$/;"	f	file:
asroot_iface_init_os	daemon/lldpd.h	/^int	 asroot_iface_init_os(int, char *, int *);$/;"	p	signature:(int, char *, int *)
asroot_iface_init_os	daemon/priv-bsd.c	/^asroot_iface_init_os(int ifindex, char *name, int *fd)$/;"	f	signature:(int ifindex, char *name, int *fd)
asroot_iface_init_os	daemon/priv-linux.c	/^asroot_iface_init_os(int ifindex, char *name, int *fd)$/;"	f	signature:(int ifindex, char *name, int *fd)
asroot_iface_mac	daemon/lldpd.h	/^void	 asroot_iface_mac(void);$/;"	p	signature:(void)
asroot_iface_mac	daemon/priv-linux.c	/^asroot_iface_mac()$/;"	f
asroot_iface_multicast	daemon/priv.c	/^asroot_iface_multicast()$/;"	f	file:
asroot_iface_promisc	daemon/priv.c	/^asroot_iface_promisc()$/;"	f	file:
asroot_iface_promisc_os	daemon/lldpd.h	/^int	 asroot_iface_promisc_os(const char *);$/;"	p	signature:(const char *)
asroot_iface_promisc_os	daemon/priv-bsd.c	/^asroot_iface_promisc_os(const char *name)$/;"	f	signature:(const char *name)
asroot_iface_promisc_os	daemon/priv-linux.c	/^asroot_iface_promisc_os(const char *name)$/;"	f	signature:(const char *name)
asroot_open	daemon/lldpd.h	/^void	 asroot_open(void);$/;"	p	signature:(void)
asroot_open	daemon/priv-linux.c	/^asroot_open()$/;"	f
asroot_ping	daemon/priv.c	/^static void asroot_ping()$/;"	f	file:
asroot_snmp_socket	daemon/priv.c	/^static void asroot_snmp_socket()$/;"	f	file:
atom_buffer	lib/atom.h	/^struct atom_buffer {$/;"	s
atom_buffer::data	lib/atom.h	/^	u_int8_t data[0];$/;"	m	struct:atom_buffer	access:public
atom_buffer::next	lib/atom.h	/^	TAILQ_ENTRY(atom_buffer) next;$/;"	m	struct:atom_buffer	access:public
atom_builder	lib/atom.h	/^struct atom_builder {$/;"	s
atom_builder::create	lib/atom.h	/^	lldpctl_atom_t*      (*create)(lldpctl_atom_t *);$/;"	m	struct:atom_builder	access:public
atom_builder::free	lib/atom.h	/^	void (*free)(lldpctl_atom_t *); \/* Optional deallocation steps *\/$/;"	m	struct:atom_builder	access:public
atom_builder::get	lib/atom.h	/^	lldpctl_atom_t*      (*get)(lldpctl_atom_t *,        lldpctl_key_t);$/;"	m	struct:atom_builder	access:public
atom_builder::get_buffer	lib/atom.h	/^	const u_int8_t*      (*get_buffer)(lldpctl_atom_t *, lldpctl_key_t, size_t *);$/;"	m	struct:atom_builder	access:public
atom_builder::get_int	lib/atom.h	/^	long int             (*get_int)(lldpctl_atom_t *,    lldpctl_key_t);$/;"	m	struct:atom_builder	access:public
atom_builder::get_str	lib/atom.h	/^	const char*          (*get_str)(lldpctl_atom_t *,    lldpctl_key_t);$/;"	m	struct:atom_builder	access:public
atom_builder::init	lib/atom.h	/^	int  (*init)(lldpctl_atom_t *, va_list); \/* Optional additional init steps *\/$/;"	m	struct:atom_builder	access:public
atom_builder::iter	lib/atom.h	/^	lldpctl_atom_iter_t* (*iter)(lldpctl_atom_t *); \/* Optional, return an iterator for this object *\/$/;"	m	struct:atom_builder	access:public
atom_builder::next	lib/atom.h	/^	lldpctl_atom_iter_t* (*next)(lldpctl_atom_t *,  lldpctl_atom_iter_t *); \/* Return the next object for the provided iterator *\/$/;"	m	struct:atom_builder	access:public
atom_builder::nextb	lib/atom.h	/^	struct atom_builder  *nextb;$/;"	m	struct:atom_builder	typeref:struct:atom_builder::atom_builder	access:public
atom_builder::set	lib/atom.h	/^	lldpctl_atom_t*      (*set)(lldpctl_atom_t *, lldpctl_key_t, lldpctl_atom_t *);$/;"	m	struct:atom_builder	access:public
atom_builder::set_buffer	lib/atom.h	/^	lldpctl_atom_t*      (*set_buffer)(lldpctl_atom_t *, lldpctl_key_t, const u_int8_t *, size_t);$/;"	m	struct:atom_builder	access:public
atom_builder::set_int	lib/atom.h	/^	lldpctl_atom_t*      (*set_int)(lldpctl_atom_t *, lldpctl_key_t, long int);$/;"	m	struct:atom_builder	access:public
atom_builder::set_str	lib/atom.h	/^	lldpctl_atom_t*      (*set_str)(lldpctl_atom_t *, lldpctl_key_t, const char *);$/;"	m	struct:atom_builder	access:public
atom_builder::size	lib/atom.h	/^	size_t size;	\/* Size of structure to allocate *\/$/;"	m	struct:atom_builder	access:public
atom_builder::type	lib/atom.h	/^	atom_t type;	\/* Atom type *\/$/;"	m	struct:atom_builder	access:public
atom_builder::value	lib/atom.h	/^	lldpctl_atom_t*      (*value)(lldpctl_atom_t *, lldpctl_atom_iter_t *); \/* Return the current object for the provided iterator *\/$/;"	m	struct:atom_builder	access:public
atom_builder_list	lib/atom.c	/^static struct atom_builder atom_builder_list = {$/;"	v	typeref:struct:atom_builder	file:
atom_builder_register	lib/atom.c	/^void atom_builder_register(struct atom_builder *builder, int prio)$/;"	f	signature:(struct atom_builder *builder, int prio)
atom_builder_register	lib/atom.h	/^void atom_builder_register(struct atom_builder *builder, int);$/;"	p	signature:(struct atom_builder *builder, int)
atom_chassis	lib/atom.h	/^	atom_chassis,$/;"	e	enum:__anon11
atom_config	lib/atom.h	/^	atom_config,$/;"	e	enum:__anon11
atom_custom	lib/atom.h	/^	atom_custom,$/;"	e	enum:__anon11
atom_custom_list	lib/atom.h	/^	atom_custom_list,$/;"	e	enum:__anon11
atom_dot3_power	lib/atom.h	/^	atom_dot3_power,$/;"	e	enum:__anon11
atom_interface	lib/atom.h	/^	atom_interface,$/;"	e	enum:__anon11
atom_interfaces_list	lib/atom.h	/^	atom_interfaces_list,$/;"	e	enum:__anon11
atom_map	lib/atom.h	/^struct atom_map {$/;"	s
atom_map::key	lib/atom.h	/^	int key;$/;"	m	struct:atom_map	access:public
atom_map::map	lib/atom.h	/^	lldpctl_map_t   map[];$/;"	m	struct:atom_map	access:public
atom_map::next	lib/atom.h	/^	struct atom_map *next;$/;"	m	struct:atom_map	typeref:struct:atom_map::atom_map	access:public
atom_map_list	lib/atom.c	/^static struct atom_map atom_map_list = {$/;"	v	typeref:struct:atom_map	file:
atom_map_register	lib/atom.c	/^void atom_map_register(struct atom_map *map, int prio)$/;"	f	signature:(struct atom_map *map, int prio)
atom_map_register	lib/atom.h	/^void atom_map_register(struct atom_map *map, int);$/;"	p	signature:(struct atom_map *map, int)
atom_med_caelement	lib/atom.h	/^	atom_med_caelement,$/;"	e	enum:__anon11
atom_med_caelements_list	lib/atom.h	/^	atom_med_caelements_list,$/;"	e	enum:__anon11
atom_med_location	lib/atom.h	/^	atom_med_location,$/;"	e	enum:__anon11
atom_med_locations_list	lib/atom.h	/^	atom_med_locations_list,$/;"	e	enum:__anon11
atom_med_policies_list	lib/atom.h	/^	atom_med_policies_list,$/;"	e	enum:__anon11
atom_med_policy	lib/atom.h	/^	atom_med_policy,$/;"	e	enum:__anon11
atom_med_power	lib/atom.h	/^	atom_med_power,$/;"	e	enum:__anon11
atom_mgmt	lib/atom.h	/^	atom_mgmt,$/;"	e	enum:__anon11
atom_mgmts_list	lib/atom.h	/^	atom_mgmts_list,$/;"	e	enum:__anon11
atom_pi	lib/atom.h	/^	atom_pi,$/;"	e	enum:__anon11
atom_pis_list	lib/atom.h	/^	atom_pis_list,$/;"	e	enum:__anon11
atom_port	lib/atom.h	/^	atom_port,$/;"	e	enum:__anon11
atom_ports_list	lib/atom.h	/^	atom_ports_list,$/;"	e	enum:__anon11
atom_ppvid	lib/atom.h	/^	atom_ppvid,$/;"	e	enum:__anon11
atom_ppvids_list	lib/atom.h	/^	atom_ppvids_list,$/;"	e	enum:__anon11
atom_t	lib/atom.h	/^} atom_t;$/;"	t	typeref:enum:__anon11
atom_vlan	lib/atom.h	/^	atom_vlan,$/;"	e	enum:__anon11
atom_vlans_list	lib/atom.h	/^	atom_vlans_list,$/;"	e	enum:__anon11
attr	client/writer.h	/^	void	(*attr)(struct writer *, const char * tag, const char * descr, const char * value);$/;"	m	struct:writer	access:public
attrs	client/text_writer.c	/^	int	attrs;$/;"	m	struct:txt_writer_private	file:	access:public
autoneg_advertised	lldpd-structs.h	/^	u_int16_t		 autoneg_advertised;$/;"	m	struct:lldpd_dot3_macphy	access:public
autoneg_enabled	lldpd-structs.h	/^	u_int8_t		 autoneg_enabled;$/;"	m	struct:lldpd_dot3_macphy	access:public
autoneg_support	lldpd-structs.h	/^	u_int8_t		 autoneg_support;$/;"	m	struct:lldpd_dot3_macphy	access:public
b	daemon/lldpd.c	/^struct intint { int a; int b; };$/;"	m	struct:intint	file:	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_any_list_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_chassis_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_config_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_custom_list_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_custom_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_dot3_power_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_interface_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_interfaces_list_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_med_caelement_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_med_caelements_list_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_med_location_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_med_policy_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_med_power_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_mgmt_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_mgmts_list_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_pi_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_port_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_ppvid_t	access:public
base	lib/atom.h	/^	lldpctl_atom_t base;$/;"	m	struct:_lldpctl_atom_vlan_t	access:public
best	daemon/agent.c	/^	oid              best[MAX_OID_LEN]; \/* Best OID *\/$/;"	m	struct:header_index	file:	access:public
best_len	daemon/agent.c	/^	size_t           best_len;	    \/* Best OID length *\/$/;"	m	struct:header_index	file:	access:public
bev	daemon/event.c	/^	struct bufferevent *bev;$/;"	m	struct:lldpd_one_client	typeref:struct:lldpd_one_client::bufferevent	file:	access:public
bits	lib/fixedpoint.h	/^		unsigned bits;$/;"	m	struct:fp_number::__anon10	access:public
bits	lib/fixedpoint.h	/^		unsigned bits;$/;"	m	struct:fp_number::__anon9	access:public
bond_master	daemon/interfaces-linux.c	/^struct bond_master {$/;"	s	file:
bond_master::index	daemon/interfaces-linux.c	/^	int  index;$/;"	m	struct:bond_master	file:	access:public
bond_master::name	daemon/interfaces-linux.c	/^	char name[IFNAMSIZ];$/;"	m	struct:bond_master	file:	access:public
bond_ops	daemon/interfaces-linux.c	/^struct lldpd_ops bond_ops = {$/;"	v	typeref:struct:lldpd_ops
bond_slave_src_mac_map	lib/atoms/config.c	/^static struct atom_map bond_slave_src_mac_map = {$/;"	v	typeref:struct:atom_map	file:
bpf_buffer	daemon/interfaces-bpf.c	/^struct bpf_buffer {$/;"	s	file:
bpf_buffer::data	daemon/interfaces-bpf.c	/^	struct bpf_hdr data[0];$/;"	m	struct:bpf_buffer	typeref:struct:bpf_buffer::bpf_hdr	file:	access:public
bpf_buffer::len	daemon/interfaces-bpf.c	/^	size_t len;		\/* Total length of the buffer *\/$/;"	m	struct:bpf_buffer	file:	access:public
bpf_ops	daemon/interfaces-bpf.c	/^struct lldpd_ops bpf_ops = {$/;"	v	typeref:struct:lldpd_ops
buffers	lib/atom.h	/^	TAILQ_HEAD(, atom_buffer) buffers; \/* List of buffers *\/$/;"	m	struct:lldpctl_atom_t	access:public
c_advertise_version	lldpd-structs.h	/^	int c_advertise_version; \/* Should the precise version be advertised? *\/$/;"	m	struct:lldpd_config	access:public
c_bond_slave_src_mac_type	lldpd-structs.h	/^	int c_bond_slave_src_mac_type; \/* Src mac type in lldp frames over bond$/;"	m	struct:lldpd_config	access:public
c_cap_advertise	lldpd-structs.h	/^	int c_cap_advertise;	 \/* Chassis capabilities advertisement *\/$/;"	m	struct:lldpd_config	access:public
c_cap_available	lldpd-structs.h	/^	u_int16_t		 c_cap_available;$/;"	m	struct:lldpd_chassis	access:public
c_cap_enabled	lldpd-structs.h	/^	u_int16_t		 c_cap_enabled;$/;"	m	struct:lldpd_chassis	access:public
c_cid_pattern	lldpd-structs.h	/^	char *c_cid_pattern;	\/* Pattern to match interfaces to use for chassis ID *\/$/;"	m	struct:lldpd_config	access:public
c_descr	lldpd-structs.h	/^	char			*c_descr;$/;"	m	struct:lldpd_chassis	access:public
c_description	lldpd-structs.h	/^	char *c_description;	\/* Override chassis description *\/$/;"	m	struct:lldpd_config	access:public
c_enable_fast_start	lldpd-structs.h	/^	int c_enable_fast_start; \/* enable fast start *\/$/;"	m	struct:lldpd_config	access:public
c_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_chassis) c_entries;$/;"	m	struct:lldpd_chassis	access:public
c_hostname	lldpd-structs.h	/^	char *c_hostname;	\/* Override system name *\/$/;"	m	struct:lldpd_config	access:public
c_id	lldpd-structs.h	/^	char			*c_id;$/;"	m	struct:lldpd_chassis	access:public
c_id_len	lldpd-structs.h	/^	int			 c_id_len;$/;"	m	struct:lldpd_chassis	access:public
c_id_subtype	lldpd-structs.h	/^	u_int8_t	 	 c_id_subtype;$/;"	m	struct:lldpd_chassis	access:public
c_iface_pattern	lldpd-structs.h	/^	char *c_iface_pattern;	\/* Pattern to match interfaces to use 包含所有接口名的字符串 *\/$/;"	m	struct:lldpd_config	access:public
c_index	lldpd-structs.h	/^	u_int16_t		 c_index;    \/* Monotonic index *\/$/;"	m	struct:lldpd_chassis	access:public
c_lldp_portid_type	lldpd-structs.h	/^	int c_lldp_portid_type; \/* The PortID type *\/$/;"	m	struct:lldpd_config	access:public
c_max_neighbors	lldpd-structs.h	/^	int c_max_neighbors;	\/* Maximum number of neighbors (per protocol) *\/$/;"	m	struct:lldpd_config	access:public
c_med_asset	lldpd-structs.h	/^	char			*c_med_asset;$/;"	m	struct:lldpd_chassis	access:public
c_med_cap_available	lldpd-structs.h	/^	u_int16_t		 c_med_cap_available;$/;"	m	struct:lldpd_chassis	access:public
c_med_fw	lldpd-structs.h	/^	char			*c_med_fw;$/;"	m	struct:lldpd_chassis	access:public
c_med_hw	lldpd-structs.h	/^	char			*c_med_hw;$/;"	m	struct:lldpd_chassis	access:public
c_med_manuf	lldpd-structs.h	/^	char			*c_med_manuf;$/;"	m	struct:lldpd_chassis	access:public
c_med_model	lldpd-structs.h	/^	char			*c_med_model;$/;"	m	struct:lldpd_chassis	access:public
c_med_sn	lldpd-structs.h	/^	char			*c_med_sn;$/;"	m	struct:lldpd_chassis	access:public
c_med_sw	lldpd-structs.h	/^	char			*c_med_sw;$/;"	m	struct:lldpd_chassis	access:public
c_med_type	lldpd-structs.h	/^	u_int8_t		 c_med_type;$/;"	m	struct:lldpd_chassis	access:public
c_mgmt	lldpd-structs.h	/^	TAILQ_HEAD(, lldpd_mgmt) c_mgmt;$/;"	m	struct:lldpd_chassis	access:public
c_mgmt_advertise	lldpd-structs.h	/^	int c_mgmt_advertise;	 \/* Management addresses advertisement *\/$/;"	m	struct:lldpd_config	access:public
c_mgmt_pattern	lldpd-structs.h	/^	char *c_mgmt_pattern;	\/* Pattern to match a management address *\/$/;"	m	struct:lldpd_config	access:public
c_name	lldpd-structs.h	/^	char			*c_name;$/;"	m	struct:lldpd_chassis	access:public
c_noinventory	lldpd-structs.h	/^	int c_noinventory;	\/* Don't send inventory with LLDP-MED *\/$/;"	m	struct:lldpd_config	access:public
c_paused	lldpd-structs.h	/^	int c_paused;	        \/* lldpd is paused *\/$/;"	m	struct:lldpd_config	access:public
c_platform	lldpd-structs.h	/^	char *c_platform;	\/* Override platform description (for CDP) *\/$/;"	m	struct:lldpd_config	access:public
c_promisc	lldpd-structs.h	/^	int c_promisc;		 \/* Interfaces should be in promiscuous mode *\/$/;"	m	struct:lldpd_config	access:public
c_protocol	lldpd-structs.h	/^	u_int8_t		 c_protocol; \/* Protocol used to get this chassis *\/$/;"	m	struct:lldpd_chassis	access:public
c_receiveonly	lldpd-structs.h	/^	int c_receiveonly;	\/* Receive only mode *\/$/;"	m	struct:lldpd_config	access:public
c_refcount	lldpd-structs.h	/^	u_int16_t		 c_refcount; \/* Reference count by ports *\/$/;"	m	struct:lldpd_chassis	access:public
c_set_ifdescr	lldpd-structs.h	/^	int c_set_ifdescr;	 \/* Set interface description *\/$/;"	m	struct:lldpd_config	access:public
c_smart	lldpd-structs.h	/^	int c_smart;		\/* Bitmask for smart configuration (see SMART_*) *\/$/;"	m	struct:lldpd_config	access:public
c_ttl	lldpd-structs.h	/^	u_int16_t		 c_ttl;$/;"	m	struct:lldpd_chassis	access:public
c_tx_fast_init	lldpd-structs.h	/^	int c_tx_fast_init;	\/* Num of lldpd lldppdu's for fast start *\/$/;"	m	struct:lldpd_config	access:public
c_tx_fast_interval	lldpd-structs.h	/^	int c_tx_fast_interval;	\/* Time intr between sends during fast start *\/$/;"	m	struct:lldpd_config	access:public
c_tx_hold	lldpd-structs.h	/^	int c_tx_hold;		\/* Transmit hold *\/$/;"	m	struct:lldpd_config	access:public
c_tx_interval	lldpd-structs.h	/^	int c_tx_interval;	\/* Transmit interval *\/$/;"	m	struct:lldpd_config	access:public
ca_iter	lib/atoms/med.c	/^struct ca_iter {$/;"	s	file:
ca_iter::data	lib/atoms/med.c	/^	uint8_t *data;$/;"	m	struct:ca_iter	file:	access:public
ca_iter::data_len	lib/atoms/med.c	/^	size_t data_len;$/;"	m	struct:ca_iter	file:	access:public
candidate_word	client/commands.c	/^struct candidate_word {$/;"	s	file:
candidate_word::TAILQ_ENTRY	client/commands.c	/^	TAILQ_ENTRY(candidate_word) next;$/;"	p	struct:candidate_word	file:	access:public
candidate_word::doc	client/commands.c	/^	const char *doc;$/;"	m	struct:candidate_word	file:	access:public
candidate_word::hidden	client/commands.c	/^	int hidden;$/;"	m	struct:candidate_word	file:	access:public
candidate_word::word	client/commands.c	/^	const char *word;$/;"	m	struct:candidate_word	file:	access:public
cdp_decode	daemon/lldpd.h	/^int	 cdp_decode(PROTO_DECODE_SIG);$/;"	p	signature:(PROTO_DECODE_SIG)
cdp_decode	daemon/protocols/cdp.c	/^cdp_decode(struct lldpd *cfg, char *frame, int s,$/;"	f	signature:(struct lldpd *cfg, char *frame, int s, struct lldpd_hardware *hardware, struct lldpd_chassis **newchassis, struct lldpd_port **newport)
cdp_guess	daemon/protocols/cdp.c	/^cdp_guess(char *pos, int length, int version)$/;"	f	file:	signature:(char *pos, int length, int version)
cdp_send	daemon/protocols/cdp.c	/^cdp_send(struct lldpd *global,$/;"	f	file:	signature:(struct lldpd *global, struct lldpd_hardware *hardware, int version)
cdpv1_guess	daemon/lldpd.h	/^int	 cdpv1_guess(PROTO_GUESS_SIG);$/;"	p	signature:(PROTO_GUESS_SIG)
cdpv1_guess	daemon/protocols/cdp.c	/^cdpv1_guess(char *frame, int len)$/;"	f	signature:(char *frame, int len)
cdpv1_send	daemon/lldpd.h	/^int	 cdpv1_send(PROTO_SEND_SIG);$/;"	p	signature:(PROTO_SEND_SIG)
cdpv1_send	daemon/protocols/cdp.c	/^cdpv1_send(struct lldpd *global,$/;"	f	signature:(struct lldpd *global, struct lldpd_hardware *hardware)
cdpv2_guess	daemon/lldpd.h	/^int	 cdpv2_guess(PROTO_GUESS_SIG);$/;"	p	signature:(PROTO_GUESS_SIG)
cdpv2_guess	daemon/protocols/cdp.c	/^cdpv2_guess(char *frame, int len)$/;"	f	signature:(char *frame, int len)
cdpv2_send	daemon/lldpd.h	/^int	 cdpv2_send(PROTO_SEND_SIG);$/;"	p	signature:(PROTO_SEND_SIG)
cdpv2_send	daemon/protocols/cdp.c	/^cdpv2_send(struct lldpd *global,$/;"	f	signature:(struct lldpd *global, struct lldpd_hardware *hardware)
cfg	daemon/event.c	/^	struct lldpd *cfg;$/;"	m	struct:lldpd_one_client	typeref:struct:lldpd_one_client::lldpd	file:	access:public
chassis	lib/atom.h	/^	lldpctl_atom_t *chassis; \/* Internal atom for chassis *\/$/;"	m	struct:_lldpctl_atom_port_t	access:public
chassis	lib/atom.h	/^	struct lldpd_chassis *chassis; \/* Chassis containing the list of IP addresses *\/$/;"	m	struct:_lldpctl_atom_mgmts_list_t	typeref:struct:_lldpctl_atom_mgmts_list_t::lldpd_chassis	access:public
chassis	lib/atom.h	/^	struct lldpd_chassis *chassis;$/;"	m	struct:_lldpctl_atom_chassis_t	typeref:struct:_lldpctl_atom_chassis_t::lldpd_chassis	access:public
chassis	lib/atoms/chassis.c	/^static struct atom_builder chassis =$/;"	v	typeref:struct:atom_builder	file:
chassis_id_subtype_map	lib/atoms/chassis.c	/^static lldpctl_map_t chassis_id_subtype_map[] = {$/;"	v	file:
chassis_med_type_map	lib/atoms/chassis.c	/^static lldpctl_map_t chassis_med_type_map[] = {$/;"	v	file:
check_for_notification	lib/connection.c	/^check_for_notification(lldpctl_conn_t *conn)$/;"	f	file:	signature:(lldpctl_conn_t *conn)
civic_address_type_map	lib/atoms/med.c	/^static struct atom_map civic_address_type_map = {$/;"	v	typeref:struct:atom_map	file:
cleanup	lldpd-structs.h	/^	int(*cleanup)(struct lldpd *, struct lldpd_hardware *); \/* Cleanup function. *\/$/;"	m	struct:lldpd_ops	access:public
client_handle	daemon/client.c	/^struct client_handle {$/;"	s	file:
client_handle::handle	daemon/client.c	/^	ssize_t (*handle)(struct lldpd*, enum hmsg_type *,$/;"	m	struct:client_handle	file:	access:public
client_handle::name	daemon/client.c	/^	const char *name;$/;"	m	struct:client_handle	file:	access:public
client_handle::type	daemon/client.c	/^	enum hmsg_type type;$/;"	m	struct:client_handle	typeref:enum:client_handle::hmsg_type	file:	access:public
client_handle_client	daemon/client.c	/^client_handle_client(struct lldpd *cfg,$/;"	f	signature:(struct lldpd *cfg, ssize_t(*send)(void *, int, void *, size_t), void *out, enum hmsg_type type, void *buffer, size_t n, int *subscribed)
client_handle_client	daemon/lldpd.h	/^client_handle_client(struct lldpd *cfg,$/;"	p	signature:(struct lldpd *cfg, ssize_t(*send)(void *, int, void *, size_t), void *, enum hmsg_type type, void *buffer, size_t n, int*)
client_handle_get_configuration	daemon/client.c	/^client_handle_get_configuration(struct lldpd *cfg, enum hmsg_type *type,$/;"	f	file:	signature:(struct lldpd *cfg, enum hmsg_type *type, void *input, int input_len, void **output, int *subscribed)
client_handle_get_default_port	daemon/client.c	/^client_handle_get_default_port(struct lldpd *cfg, enum hmsg_type *type,$/;"	f	file:	signature:(struct lldpd *cfg, enum hmsg_type *type, void *input, int input_len, void **output, int *subscribed)
client_handle_get_interface	daemon/client.c	/^client_handle_get_interface(struct lldpd *cfg, enum hmsg_type *type,$/;"	f	file:	signature:(struct lldpd *cfg, enum hmsg_type *type, void *input, int input_len, void **output, int *subscribed)
client_handle_get_interfaces	daemon/client.c	/^client_handle_get_interfaces(struct lldpd *cfg, enum hmsg_type *type,$/;"	f	file:	signature:(struct lldpd *cfg, enum hmsg_type *type, void *input, int input_len, void **output, int *subscribed)
client_handle_get_local_chassis	daemon/client.c	/^client_handle_get_local_chassis(struct lldpd *cfg, enum hmsg_type *type,$/;"	f	file:	signature:(struct lldpd *cfg, enum hmsg_type *type, void *input, int input_len, void **output, int *subscribed)
client_handle_none	daemon/client.c	/^client_handle_none(struct lldpd *cfg, enum hmsg_type *type,$/;"	f	file:	signature:(struct lldpd *cfg, enum hmsg_type *type, void *input, int input_len, void **output, int *subscribed)
client_handle_set_configuration	daemon/client.c	/^client_handle_set_configuration(struct lldpd *cfg, enum hmsg_type *type,$/;"	f	file:	signature:(struct lldpd *cfg, enum hmsg_type *type, void *input, int input_len, void **output, int *subscribed)
client_handle_set_port	daemon/client.c	/^client_handle_set_port(struct lldpd *cfg, enum hmsg_type *type,$/;"	f	file:	signature:(struct lldpd *cfg, enum hmsg_type *type, void *input, int input_len, void **output, int *subscribed)
client_handle_subscribe	daemon/client.c	/^client_handle_subscribe(struct lldpd *cfg, enum hmsg_type *type,$/;"	f	file:	signature:(struct lldpd *cfg, enum hmsg_type *type, void *input, int input_len, void **output, int *subscribed)
client_handles	daemon/client.c	/^static struct client_handle client_handles[] = {$/;"	v	typeref:struct:client_handle	file:
cmd_bondslave_srcmac_type	client/conf-system.c	/^cmd_bondslave_srcmac_type(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_chassis_cap_advertise	client/conf-lldp.c	/^cmd_chassis_cap_advertise(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_chassis_mgmt_advertise	client/conf-lldp.c	/^cmd_chassis_mgmt_advertise(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_check_application_but_no	client/conf-med.c	/^cmd_check_application_but_no(struct cmd_env *env, void *arg)$/;"	f	file:	signature:(struct cmd_env *env, void *arg)
cmd_check_env	client/client.h	/^int cmd_check_env(struct cmd_env *, void *);$/;"	p	signature:(struct cmd_env *, void *)
cmd_check_env	client/commands.c	/^cmd_check_env(struct cmd_env *env, void *key)$/;"	f	signature:(struct cmd_env *env, void *key)
cmd_check_env_power	client/conf-power.c	/^cmd_check_env_power(struct cmd_env *env, void *nothing)$/;"	f	file:	signature:(struct cmd_env *env, void *nothing)
cmd_check_no_add_env	client/conf-lldp.c	/^cmd_check_no_add_env(struct cmd_env *env, void *arg)$/;"	f	file:	signature:(struct cmd_env *env, void *arg)
cmd_check_no_detailed_nor_summary	client/show.c	/^cmd_check_no_detailed_nor_summary(struct cmd_env *env, void *arg)$/;"	f	file:	signature:(struct cmd_env *env, void *arg)
cmd_check_no_env	client/client.h	/^int cmd_check_no_env(struct cmd_env *, void *);$/;"	p	signature:(struct cmd_env *, void *)
cmd_check_no_env	client/commands.c	/^cmd_check_no_env(struct cmd_env *env, void *key)$/;"	f	signature:(struct cmd_env *env, void *key)
cmd_check_no_replace_env	client/conf-lldp.c	/^cmd_check_no_replace_env(struct cmd_env *env, void *arg)$/;"	f	file:	signature:(struct cmd_env *env, void *arg)
cmd_check_pd	client/conf-power.c	/^cmd_check_pd(struct cmd_env *env, void *arg)$/;"	f	file:	signature:(struct cmd_env *env, void *arg)
cmd_check_pse	client/conf-power.c	/^cmd_check_pse(struct cmd_env *env, void *arg)$/;"	f	file:	signature:(struct cmd_env *env, void *arg)
cmd_check_type	client/conf-power.c	/^cmd_check_type(struct cmd_env *env, const char *type)$/;"	f	file:	signature:(struct cmd_env *env, const char *type)
cmd_check_type_but_no	client/conf-power.c	/^cmd_check_type_but_no(struct cmd_env *env, void *arg)$/;"	f	file:	signature:(struct cmd_env *env, void *arg)
cmd_check_typeat_but_no	client/conf-power.c	/^cmd_check_typeat_but_no(struct cmd_env *env, void *arg)$/;"	f	file:	signature:(struct cmd_env *env, void *arg)
cmd_complete	client/lldpcli.c	/^cmd_complete(int count, int ch)$/;"	f	file:	signature:(int count, int ch)
cmd_custom_tlv_set	client/conf-lldp.c	/^cmd_custom_tlv_set(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_dot3power	client/conf-power.c	/^cmd_dot3power(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_env	client/commands.c	/^struct cmd_env {$/;"	s	file:
cmd_env::TAILQ_HEAD	client/commands.c	/^	TAILQ_HEAD(, cmd_env_el) elements; \/**< List of environment variables *\/$/;"	p	struct:cmd_env	file:	access:public
cmd_env::TAILQ_HEAD	client/commands.c	/^	TAILQ_HEAD(, cmd_env_stack) stack; \/**< Stack *\/$/;"	p	struct:cmd_env	file:	access:public
cmd_env::argc	client/commands.c	/^	int argc;		\/**< Number of argument in the command *\/$/;"	m	struct:cmd_env	file:	access:public
cmd_env::argp	client/commands.c	/^	int argp;		\/**< Current argument *\/$/;"	m	struct:cmd_env	file:	access:public
cmd_env::argv	client/commands.c	/^	const char **argv;	\/**< Arguments *\/$/;"	m	struct:cmd_env	file:	access:public
cmd_env_el	client/commands.c	/^struct cmd_env_el {$/;"	s	file:
cmd_env_el::TAILQ_ENTRY	client/commands.c	/^	TAILQ_ENTRY(cmd_env_el) next; \/**< Next environment element *\/$/;"	p	struct:cmd_env_el	file:	access:public
cmd_env_el::key	client/commands.c	/^	const char *key;	      \/**< Key for this element *\/$/;"	m	struct:cmd_env_el	file:	access:public
cmd_env_el::value	client/commands.c	/^	const char *value;	      \/**< Value for this element *\/$/;"	m	struct:cmd_env_el	file:	access:public
cmd_env_stack	client/commands.c	/^struct cmd_env_stack {$/;"	s	file:
cmd_env_stack::TAILQ_ENTRY	client/commands.c	/^	TAILQ_ENTRY(cmd_env_stack) next; \/**< Next element, down the stack *\/$/;"	p	struct:cmd_env_stack	file:	access:public
cmd_env_stack::el	client/commands.c	/^	struct cmd_node *el;		 \/**< Stored element *\/$/;"	m	struct:cmd_env_stack	typeref:struct:cmd_env_stack::cmd_node	file:	access:public
cmd_exec	client/lldpcli.c	/^static int cmd_exec(lldpctl_conn_t *conn, const char *fmt, int argc, const char **argv)$/;"	f	file:	signature:(lldpctl_conn_t *conn, const char *fmt, int argc, const char **argv)
cmd_exit	client/lldpcli.c	/^cmd_exit(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_faststart	client/conf-med.c	/^cmd_faststart(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_help	client/lldpcli.c	/^cmd_help(int count, int ch)$/;"	f	file:	signature:(int count, int ch)
cmd_hostname	client/conf-system.c	/^cmd_hostname(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_iface_pattern	client/conf-system.c	/^cmd_iface_pattern(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_iface_promisc	client/conf-system.c	/^cmd_iface_promisc(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_iterate_on_interfaces	client/client.h	/^lldpctl_atom_t* cmd_iterate_on_interfaces(struct lldpctl_conn_t *,$/;"	p	signature:(struct lldpctl_conn_t *, struct cmd_env *)
cmd_iterate_on_interfaces	client/commands.c	/^lldpctl_atom_t* cmd_iterate_on_interfaces(struct lldpctl_conn_t *conn, struct cmd_env *env)$/;"	f	signature:(struct lldpctl_conn_t *conn, struct cmd_env *env)
cmd_iterate_on_ports	client/client.h	/^lldpctl_atom_t* cmd_iterate_on_ports(struct lldpctl_conn_t *,$/;"	p	signature:(struct lldpctl_conn_t *, struct cmd_env *, const char **)
cmd_iterate_on_ports	client/commands.c	/^cmd_iterate_on_ports(struct lldpctl_conn_t *conn, struct cmd_env *env, const char **name)$/;"	f	signature:(struct lldpctl_conn_t *conn, struct cmd_env *env, const char **name)
cmd_management	client/conf-system.c	/^cmd_management(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_medlocation_address	client/conf-med.c	/^cmd_medlocation_address(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_medlocation_coordinate	client/conf-med.c	/^cmd_medlocation_coordinate(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_medlocation_elin	client/conf-med.c	/^cmd_medlocation_elin(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_medpolicy	client/conf-med.c	/^cmd_medpolicy(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_medpower	client/conf-power.c	/^cmd_medpower(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_node	client/commands.c	/^struct cmd_node {$/;"	s	file:
cmd_node::TAILQ_ENTRY	client/commands.c	/^	TAILQ_ENTRY(cmd_node) next; \/**< Next sibling *\/$/;"	p	struct:cmd_node	file:	access:public
cmd_node::TAILQ_HEAD	client/commands.c	/^	TAILQ_HEAD(, cmd_node) subentries; \/* List of subnodes *\/$/;"	p	struct:cmd_node	file:	access:public
cmd_node::arg	client/commands.c	/^	void *arg;		\/**< Magic argument for the previous two functions *\/$/;"	m	struct:cmd_node	file:	access:public
cmd_node::doc	client/commands.c	/^	const char *doc;	\/**< Documentation string *\/$/;"	m	struct:cmd_node	file:	access:public
cmd_node::execute	client/commands.c	/^	int(*execute)(struct lldpctl_conn_t*, struct writer*,$/;"	m	struct:cmd_node	file:	access:public
cmd_node::hidden	client/commands.c	/^	int hidden;		\/**< Hidden command? *\/$/;"	m	struct:cmd_node	file:	access:public
cmd_node::privileged	client/commands.c	/^	int privileged;		\/**< Privileged command? *\/$/;"	m	struct:cmd_node	file:	access:public
cmd_node::token	client/commands.c	/^	const char *token;	\/**< Token to enter this cnode *\/$/;"	m	struct:cmd_node	file:	access:public
cmd_node::validate	client/commands.c	/^	int(*validate)(struct cmd_env*, void *);$/;"	m	struct:cmd_node	file:	access:public
cmd_pause	client/lldpcli.c	/^cmd_pause(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_pause_resume	client/lldpcli.c	/^cmd_pause_resume(lldpctl_conn_t *conn, int pause)$/;"	f	file:	signature:(lldpctl_conn_t *conn, int pause)
cmd_portid_type	client/conf-lldp.c	/^cmd_portid_type(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_portid_type_local	client/conf-lldp.c	/^cmd_portid_type_local(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_restrict_ports	client/client.h	/^void cmd_restrict_ports(struct cmd_node *);$/;"	p	signature:(struct cmd_node *)
cmd_restrict_ports	client/commands.c	/^cmd_restrict_ports(struct cmd_node *root)$/;"	f	signature:(struct cmd_node *root)
cmd_restrict_protocol	client/client.h	/^void cmd_restrict_protocol(struct cmd_node *);$/;"	p	signature:(struct cmd_node *)
cmd_restrict_protocol	client/commands.c	/^cmd_restrict_protocol(struct cmd_node *root)$/;"	f	signature:(struct cmd_node *root)
cmd_resume	client/lldpcli.c	/^cmd_resume(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_show_chassis	client/show.c	/^static int cmd_show_chassis(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_show_configuration	client/show.c	/^cmd_show_configuration(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_show_interface_stats	client/show.c	/^static int cmd_show_interface_stats(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_show_neighbors	client/show.c	/^static int cmd_show_neighbors(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_status	client/conf-lldp.c	/^cmd_status(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_store_app_env_value_and_pop2	client/conf-med.c	/^cmd_store_app_env_value_and_pop2(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *value)
cmd_store_class_env_value_and_pop2	client/conf-power.c	/^cmd_store_class_env_value_and_pop2(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *value)
cmd_store_env	client/client.h	/^int cmd_store_env(struct lldpctl_conn_t *, struct writer *,$/;"	p	signature:(struct lldpctl_conn_t *, struct writer *, struct cmd_env *, void *)
cmd_store_env	client/commands.c	/^cmd_store_env(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *key)
cmd_store_env_and_pop	client/client.h	/^int cmd_store_env_and_pop(struct lldpctl_conn_t *, struct writer *,$/;"	p	signature:(struct lldpctl_conn_t *, struct writer *, struct cmd_env *, void *)
cmd_store_env_and_pop	client/commands.c	/^cmd_store_env_and_pop(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *key)
cmd_store_env_value	client/client.h	/^int cmd_store_env_value(struct lldpctl_conn_t *, struct writer *,$/;"	p	signature:(struct lldpctl_conn_t *, struct writer *, struct cmd_env *, void *)
cmd_store_env_value	client/commands.c	/^cmd_store_env_value(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *key)
cmd_store_env_value_and_pop	client/client.h	/^int cmd_store_env_value_and_pop(struct lldpctl_conn_t *, struct writer *,$/;"	p	signature:(struct lldpctl_conn_t *, struct writer *, struct cmd_env *, void *)
cmd_store_env_value_and_pop	client/commands.c	/^cmd_store_env_value_and_pop(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *key)
cmd_store_env_value_and_pop2	client/client.h	/^int cmd_store_env_value_and_pop2(struct lldpctl_conn_t *, struct writer *,$/;"	p	signature:(struct lldpctl_conn_t *, struct writer *, struct cmd_env *, void *)
cmd_store_env_value_and_pop2	client/commands.c	/^cmd_store_env_value_and_pop2(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *key)
cmd_store_env_value_and_pop3	client/client.h	/^int cmd_store_env_value_and_pop3(struct lldpctl_conn_t *, struct writer *,$/;"	p	signature:(struct lldpctl_conn_t *, struct writer *, struct cmd_env *, void *)
cmd_store_env_value_and_pop3	client/commands.c	/^cmd_store_env_value_and_pop3(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *key)
cmd_store_powerpairs_env_value_and_pop2	client/conf-power.c	/^cmd_store_powerpairs_env_value_and_pop2(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *value)
cmd_store_prio_env_value_and_pop2	client/conf-med.c	/^cmd_store_prio_env_value_and_pop2(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *value)
cmd_store_prio_env_value_and_pop2	client/conf-power.c	/^cmd_store_prio_env_value_and_pop2(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *value)
cmd_store_something_env_value	client/client.h	/^int cmd_store_something_env_value(const char *, struct cmd_env *,$/;"	p	signature:(const char *, struct cmd_env *, void *)
cmd_store_something_env_value	client/commands.c	/^cmd_store_something_env_value(const char *what,$/;"	f	signature:(const char *what, struct cmd_env *env, void *value)
cmd_store_something_env_value_and_pop2	client/client.h	/^int cmd_store_something_env_value_and_pop2(const char *, struct cmd_env *,$/;"	p	signature:(const char *, struct cmd_env *, void *)
cmd_store_something_env_value_and_pop2	client/commands.c	/^cmd_store_something_env_value_and_pop2(const char *what,$/;"	f	signature:(const char *what, struct cmd_env *env, void *value)
cmd_store_status_env_value	client/conf-lldp.c	/^cmd_store_status_env_value(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *value)
cmd_system_description	client/conf-system.c	/^cmd_system_description(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_txdelay	client/conf-lldp.c	/^cmd_txdelay(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_txhold	client/conf-lldp.c	/^cmd_txhold(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_update	client/lldpcli.c	/^cmd_update(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_update_descriptions	client/conf-system.c	/^cmd_update_descriptions(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmd_watch_neighbors	client/show.c	/^cmd_watch_neighbors(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	file:	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, void *arg)
cmdenv_arg	client/client.h	/^const char *cmdenv_arg(struct cmd_env*);$/;"	p	signature:(struct cmd_env*)
cmdenv_arg	client/commands.c	/^cmdenv_arg(struct cmd_env *env)$/;"	f	signature:(struct cmd_env *env)
cmdenv_free	client/commands.c	/^cmdenv_free(struct cmd_env *env)$/;"	f	file:	signature:(struct cmd_env *env)
cmdenv_get	client/client.h	/^const char *cmdenv_get(struct cmd_env*, const char*);$/;"	p	signature:(struct cmd_env*, const char*)
cmdenv_get	client/commands.c	/^const char* cmdenv_get(struct cmd_env *env, const char *key)$/;"	f	signature:(struct cmd_env *env, const char *key)
cmdenv_pop	client/client.h	/^int cmdenv_pop(struct cmd_env*, int);$/;"	p	signature:(struct cmd_env*, int)
cmdenv_pop	client/commands.c	/^cmdenv_pop(struct cmd_env *env, int n)$/;"	f	signature:(struct cmd_env *env, int n)
cmdenv_push	client/commands.c	/^static int cmdenv_push(struct cmd_env *env, struct cmd_node *node)$/;"	f	file:	signature:(struct cmd_env *env, struct cmd_node *node)
cmdenv_put	client/client.h	/^int cmdenv_put(struct cmd_env*, const char*, const char*);$/;"	p	signature:(struct cmd_env*, const char*, const char*)
cmdenv_put	client/commands.c	/^cmdenv_put(struct cmd_env *env,$/;"	f	signature:(struct cmd_env *env, const char *key, const char *value)
cmdenv_top	client/commands.c	/^static struct cmd_node* cmdenv_top(struct cmd_env *env)$/;"	f	file:	signature:(struct cmd_env *env)
commands_complete	client/client.h	/^char *commands_complete(struct cmd_node *, int, const char **,$/;"	p	signature:(struct cmd_node *, int, const char **, int, int)
commands_complete	client/commands.c	/^commands_complete(struct cmd_node *root, int argc, const char **argv,$/;"	f	signature:(struct cmd_node *root, int argc, const char **argv, int all, int privileged)
commands_execute	client/client.h	/^int commands_execute(struct lldpctl_conn_t *, struct writer *,$/;"	p	signature:(struct lldpctl_conn_t *, struct writer *, struct cmd_node *, int, const char **, int)
commands_execute	client/commands.c	/^int commands_execute(struct lldpctl_conn_t *conn, struct writer *w,$/;"	f	signature:(struct lldpctl_conn_t *conn, struct writer *w, struct cmd_node *root, int argc, const char **argv, int privileged)
commands_free	client/client.h	/^void commands_free(struct cmd_node *);$/;"	p	signature:(struct cmd_node *)
commands_free	client/commands.c	/^commands_free(struct cmd_node *root)$/;"	f	signature:(struct cmd_node *root)
commands_hidden	client/client.h	/^struct cmd_node* commands_hidden(struct cmd_node *);$/;"	p	signature:(struct cmd_node *)
commands_hidden	client/commands.c	/^commands_hidden(struct cmd_node *node)$/;"	f	signature:(struct cmd_node *node)
commands_new	client/client.h	/^struct cmd_node *commands_new($/;"	p	signature:( struct cmd_node *, const char *, const char *, int(*validate)(struct cmd_env*, void *), int(*execute)(struct lldpctl_conn_t*, struct writer*, struct cmd_env*, void *), void *)
commands_new	client/commands.c	/^struct cmd_node* commands_new(struct cmd_node *root,$/;"	f	signature:(struct cmd_node *root, const char *token, const char *doc, int(*validate)(struct cmd_env*, void *), int(*execute)(struct lldpctl_conn_t*, struct writer*, struct cmd_env*, void *), void *arg)
commands_privileged	client/client.h	/^struct cmd_node* commands_privileged(struct cmd_node *);$/;"	p	signature:(struct cmd_node *)
commands_privileged	client/commands.c	/^struct cmd_node* commands_privileged(struct cmd_node *node)$/;"	f	signature:(struct cmd_node *node)
commands_root	client/client.h	/^struct cmd_node *commands_root(void);$/;"	p	signature:(void)
commands_root	client/commands.c	/^struct cmd_node* commands_root(void)$/;"	f	signature:(void)
config	lib/atom.h	/^	struct lldpd_config *config;$/;"	m	struct:_lldpctl_atom_config_t	typeref:struct:_lldpctl_atom_config_t::lldpd_config	access:public
config	lib/atoms/config.c	/^static struct atom_builder config =$/;"	v	typeref:struct:atom_builder	file:
conn	lib/atom.h	/^	lldpctl_conn_t *conn;$/;"	m	struct:lldpctl_atom_t	access:public
contains	client/client.h	/^int contains(const char *, const char *);$/;"	p	signature:(const char *, const char *)
contains	client/misc.c	/^contains(const char *list, const char *element)$/;"	f	signature:(const char *list, const char *element)
count	lib/atom.h	/^	int count;$/;"	m	struct:lldpctl_atom_t	access:public
create	lib/atom.h	/^	lldpctl_atom_t *(*create)(lldpctl_atom_t *);$/;"	m	struct:lldpctl_atom_t	access:public
create	lib/atom.h	/^	lldpctl_atom_t*      (*create)(lldpctl_atom_t *);$/;"	m	struct:atom_builder	access:public
ctl_cleanup	ctl.c	/^ctl_cleanup(const char *name)$/;"	f	signature:(const char *name)
ctl_cleanup	ctl.h	/^void	 ctl_cleanup(const char *);$/;"	p	signature:(const char *)
ctl_connect	ctl.c	/^ctl_connect(const char *name)$/;"	f	signature:(const char *name)
ctl_connect	ctl.h	/^int	 ctl_connect(const char *);$/;"	p	signature:(const char *)
ctl_create	ctl.c	/^int ctl_create(const char *name)$/;"	f	signature:(const char *name)
ctl_create	ctl.h	/^int	 ctl_create(const char *);$/;"	p	signature:(const char *)
ctl_msg_recv_unserialized	ctl.c	/^ctl_msg_recv_unserialized(uint8_t **input_buffer, size_t *input_len,$/;"	f	signature:(uint8_t **input_buffer, size_t *input_len, enum hmsg_type expected_type, void **t, struct marshal_info *mi)
ctl_msg_recv_unserialized	ctl.h	/^size_t	 ctl_msg_recv_unserialized(uint8_t **, size_t *,$/;"	p	signature:(uint8_t **, size_t *, enum hmsg_type, void **, struct marshal_info *)
ctl_msg_send_unserialized	ctl.c	/^ctl_msg_send_unserialized(uint8_t **output_buffer, size_t *output_len,$/;"	f	signature:(uint8_t **output_buffer, size_t *output_len, enum hmsg_type type, void *t, struct marshal_info *mi)
ctl_msg_send_unserialized	ctl.h	/^int	 ctl_msg_send_unserialized(uint8_t **, size_t *,$/;"	p	signature:(uint8_t **, size_t *, enum hmsg_type, void *, struct marshal_info *)
ctlname	client/lldpcli.c	/^const char *ctlname = NULL;$/;"	v
ctlname	lib/atom.h	/^	char *ctlname;  \/\/ socket 地址$/;"	m	struct:lldpctl_conn_t	access:public
custom	lib/atoms/custom.c	/^static struct atom_builder custom =$/;"	v	typeref:struct:atom_builder	file:
custom	lldpd-structs.h	/^	struct lldpd_custom     *custom;$/;"	m	struct:lldpd_port_set	typeref:struct:lldpd_port_set::lldpd_custom	access:public
custom_list	lib/atoms/custom.c	/^static struct atom_builder custom_list =$/;"	v	typeref:struct:atom_builder	file:
custom_list_clear	lldpd-structs.h	/^	int custom_list_clear;$/;"	m	struct:lldpd_port_set	access:public
custom_tlv_op	lldpd-structs.h	/^	int custom_tlv_op;$/;"	m	struct:lldpd_port_set	access:public
daemon	compat/compat.h	/^int daemon(int, int);$/;"	p	signature:(int, int)
daemon	compat/daemon.c	/^daemon(int nochdir, int noclose)$/;"	f	signature:(int nochdir, int noclose)
data	client/writer.h	/^	void	(*data)(struct writer *, const char * data);$/;"	m	struct:writer	access:public
data	daemon/interfaces-bpf.c	/^	struct bpf_hdr data[0];$/;"	m	struct:bpf_buffer	typeref:struct:bpf_buffer::bpf_hdr	file:	access:public
data	lib/atom.h	/^	u_int8_t data[0];$/;"	m	struct:atom_buffer	access:public
data	lib/atoms/med.c	/^	uint8_t *data;$/;"	m	struct:ca_iter	file:	access:public
data	lldpd-structs.h	/^	char			*data;$/;"	m	struct:lldpd_med_loc	access:public
data_len	lib/atoms/med.c	/^	size_t data_len;$/;"	m	struct:ca_iter	file:	access:public
data_len	lldpd-structs.h	/^	int			 data_len;$/;"	m	struct:lldpd_med_loc	access:public
date	log.c	/^date()$/;"	f	file:
debug	log.c	/^static int	 debug = 0;$/;"	v	file:
decode	daemon/lldpd.h	/^	int(*decode)(PROTO_DECODE_SIG); \/* How to decode a frame *\/$/;"	m	struct:protocol	access:public
depth	client/xml_writer.c	/^	ssize_t depth;$/;"	m	struct:xml_writer_private	file:	access:public
description	daemon/protocols/sonmp.h	/^	char *description;$/;"	m	struct:sonmp_chassis	access:public
devices	daemon/netlink.c	/^	struct interfaces_device_list *devices;$/;"	m	struct:lldpd_netlink	typeref:struct:lldpd_netlink::interfaces_device_list	file:	access:public
devicetype	lldpd-structs.h	/^	u_int8_t		 devicetype; \/* PD or PSE *\/$/;"	m	struct:lldpd_med_power	access:public
devicetype	lldpd-structs.h	/^	u_int8_t		devicetype;$/;"	m	struct:lldpd_dot3_power	access:public
dispatch_actions	daemon/priv.c	/^struct dispatch_actions {$/;"	s	file:
dispatch_actions::function	daemon/priv.c	/^	void(*function)(void);$/;"	m	struct:dispatch_actions	file:	access:public
dispatch_actions::msg	daemon/priv.c	/^	enum priv_cmd msg;$/;"	m	struct:dispatch_actions	typeref:enum:dispatch_actions::priv_cmd	file:	access:public
display_age	client/display.c	/^display_age(time_t lastchange)$/;"	f	file:	signature:(time_t lastchange)
display_autoneg	client/display.c	/^display_autoneg(struct writer * w, int advertised, int bithd, int bitfd, char *desc)$/;"	f	file:	signature:(struct writer * w, int advertised, int bithd, int bitfd, char *desc)
display_cap	client/display.c	/^display_cap(struct writer * w, lldpctl_atom_t *chassis, u_int8_t bit, char *symbol)$/;"	f	file:	signature:(struct writer * w, lldpctl_atom_t *chassis, u_int8_t bit, char *symbol)
display_chassis	client/display.c	/^display_chassis(struct writer* w, lldpctl_atom_t* chassis, int details)$/;"	f	file:	signature:(struct writer* w, lldpctl_atom_t* chassis, int details)
display_configuration	client/client.h	/^void display_configuration(lldpctl_conn_t *, struct writer *);$/;"	p	signature:(lldpctl_conn_t *, struct writer *)
display_configuration	client/display.c	/^display_configuration(lldpctl_conn_t *conn, struct writer *w)$/;"	f	signature:(lldpctl_conn_t *conn, struct writer *w)
display_custom_tlvs	client/display.c	/^display_custom_tlvs(struct writer* w, lldpctl_atom_t* neighbor, int details)$/;"	f	file:	signature:(struct writer* w, lldpctl_atom_t* neighbor, int details)
display_interface	client/client.h	/^void display_interface(lldpctl_conn_t *, struct writer *, int,$/;"	p	signature:(lldpctl_conn_t *, struct writer *, int, lldpctl_atom_t *, lldpctl_atom_t *, int, int)
display_interface	client/display.c	/^display_interface(lldpctl_conn_t *conn, struct writer *w, int hidden,$/;"	f	signature:(lldpctl_conn_t *conn, struct writer *w, int hidden, lldpctl_atom_t *iface, lldpctl_atom_t *neighbor, int details, int protocol)
display_interface_stats	client/client.h	/^void display_interface_stats(lldpctl_conn_t *, struct writer *,$/;"	p	signature:(lldpctl_conn_t *, struct writer *, lldpctl_atom_t *)
display_interface_stats	client/display.c	/^display_interface_stats(lldpctl_conn_t *conn, struct writer *w,$/;"	f	signature:(lldpctl_conn_t *conn, struct writer *w, lldpctl_atom_t *port)
display_interfaces	client/client.h	/^void display_interfaces(lldpctl_conn_t *, struct writer *,$/;"	p	signature:(lldpctl_conn_t *, struct writer *, struct cmd_env *, int, int)
display_interfaces	client/display.c	/^display_interfaces(lldpctl_conn_t *conn, struct writer *w,$/;"	f	signature:(lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, int hidden, int details)
display_interfaces_stats	client/client.h	/^void display_interfaces_stats(lldpctl_conn_t *, struct writer *,$/;"	p	signature:(lldpctl_conn_t *, struct writer *, struct cmd_env *)
display_interfaces_stats	client/display.c	/^display_interfaces_stats(lldpctl_conn_t *conn, struct writer *w,$/;"	f	signature:(lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env)
display_local_chassis	client/client.h	/^void display_local_chassis(lldpctl_conn_t *, struct writer *,$/;"	p	signature:(lldpctl_conn_t *, struct writer *, struct cmd_env *, int)
display_local_chassis	client/display.c	/^display_local_chassis(lldpctl_conn_t *conn, struct writer *w,$/;"	f	signature:(lldpctl_conn_t *conn, struct writer *w, struct cmd_env *env, int details)
display_med	client/display.c	/^display_med(struct writer *w, lldpctl_atom_t *port, lldpctl_atom_t *chassis)$/;"	f	file:	signature:(struct writer *w, lldpctl_atom_t *port, lldpctl_atom_t *chassis)
display_med_capability	client/display.c	/^display_med_capability(struct writer *w, long int available, int cap,$/;"	f	file:	signature:(struct writer *w, long int available, int cap, const char *symbol)
display_pids	client/display.c	/^display_pids(struct writer *w, lldpctl_atom_t *port)$/;"	f	file:	signature:(struct writer *w, lldpctl_atom_t *port)
display_port	client/display.c	/^display_port(struct writer *w, lldpctl_atom_t *port, int details)$/;"	f	file:	signature:(struct writer *w, lldpctl_atom_t *port, int details)
display_ppvids	client/display.c	/^display_ppvids(struct writer *w, lldpctl_atom_t *port)$/;"	f	file:	signature:(struct writer *w, lldpctl_atom_t *port)
display_stat	client/display.c	/^display_stat(struct writer *w, const char *tag, const char *descr,$/;"	f	signature:(struct writer *w, const char *tag, const char *descr, long unsigned int cnt)
display_vlans	client/display.c	/^display_vlans(struct writer *w, lldpctl_atom_t *port)$/;"	f	file:	signature:(struct writer *w, lldpctl_atom_t *port)
dmi_asset	daemon/dmi-dummy.c	/^dmi_asset()$/;"	f
dmi_asset	daemon/dmi-freebsd.c	/^dmi_asset()$/;"	f
dmi_asset	daemon/dmi-linux.c	/^dmi_asset()$/;"	f
dmi_asset	daemon/dmi-openbsd.c	/^dmi_asset()$/;"	f
dmi_asset	daemon/dmi-osx.c	/^dmi_asset()$/;"	f
dmi_asset	daemon/lldpd.h	/^char	*dmi_asset(void);$/;"	p	signature:(void)
dmi_fw	daemon/dmi-dummy.c	/^dmi_fw()$/;"	f
dmi_fw	daemon/dmi-freebsd.c	/^dmi_fw()$/;"	f
dmi_fw	daemon/dmi-linux.c	/^dmi_fw()$/;"	f
dmi_fw	daemon/dmi-openbsd.c	/^dmi_fw()$/;"	f
dmi_fw	daemon/dmi-osx.c	/^dmi_fw()$/;"	f
dmi_fw	daemon/lldpd.h	/^char	*dmi_fw(void);$/;"	p	signature:(void)
dmi_get	daemon/dmi-freebsd.c	/^dmi_get(char *file)$/;"	f	file:	signature:(char *file)
dmi_get	daemon/dmi-linux.c	/^dmi_get(char *file)$/;"	f	file:	signature:(char *file)
dmi_get	daemon/dmi-openbsd.c	/^dmi_get(int what, const char *descr)$/;"	f	signature:(int what, const char *descr)
dmi_get	daemon/dmi-osx.c	/^dmi_get(const char *classname, CFStringRef property)$/;"	f	file:	signature:(const char *classname, CFStringRef property)
dmi_hw	daemon/dmi-dummy.c	/^dmi_hw()$/;"	f
dmi_hw	daemon/dmi-freebsd.c	/^dmi_hw()$/;"	f
dmi_hw	daemon/dmi-linux.c	/^dmi_hw()$/;"	f
dmi_hw	daemon/dmi-openbsd.c	/^dmi_hw()$/;"	f
dmi_hw	daemon/dmi-osx.c	/^dmi_hw()$/;"	f
dmi_hw	daemon/lldpd.h	/^char	*dmi_hw(void);$/;"	p	signature:(void)
dmi_manuf	daemon/dmi-dummy.c	/^dmi_manuf()$/;"	f
dmi_manuf	daemon/dmi-freebsd.c	/^dmi_manuf()$/;"	f
dmi_manuf	daemon/dmi-linux.c	/^dmi_manuf()$/;"	f
dmi_manuf	daemon/dmi-openbsd.c	/^dmi_manuf()$/;"	f
dmi_manuf	daemon/dmi-osx.c	/^dmi_manuf()$/;"	f
dmi_manuf	daemon/lldpd.h	/^char	*dmi_manuf(void);$/;"	p	signature:(void)
dmi_model	daemon/dmi-dummy.c	/^dmi_model()$/;"	f
dmi_model	daemon/dmi-freebsd.c	/^dmi_model()$/;"	f
dmi_model	daemon/dmi-linux.c	/^dmi_model()$/;"	f
dmi_model	daemon/dmi-openbsd.c	/^dmi_model()$/;"	f
dmi_model	daemon/dmi-osx.c	/^dmi_model()$/;"	f
dmi_model	daemon/lldpd.h	/^char	*dmi_model(void);$/;"	p	signature:(void)
dmi_sn	daemon/dmi-dummy.c	/^dmi_sn()$/;"	f
dmi_sn	daemon/dmi-freebsd.c	/^dmi_sn()$/;"	f
dmi_sn	daemon/dmi-linux.c	/^dmi_sn()$/;"	f
dmi_sn	daemon/dmi-openbsd.c	/^dmi_sn()$/;"	f
dmi_sn	daemon/dmi-osx.c	/^dmi_sn()$/;"	f
dmi_sn	daemon/lldpd.h	/^char	*dmi_sn(void);$/;"	p	signature:(void)
doc	client/commands.c	/^	const char *doc;	\/**< Documentation string *\/$/;"	m	struct:cmd_node	file:	access:public
doc	client/commands.c	/^	const char *doc;$/;"	m	struct:candidate_word	file:	access:public
doc	client/xml_writer.c	/^	xmlDocPtr doc;$/;"	m	struct:xml_writer_private	file:	access:public
dot3_power	lib/atoms/dot3.c	/^static struct atom_builder dot3_power =$/;"	v	typeref:struct:atom_builder	file:
dot3_power	lldpd-structs.h	/^	struct lldpd_dot3_power *dot3_power;$/;"	m	struct:lldpd_port_set	typeref:struct:lldpd_port_set::lldpd_dot3_power	access:public
driver	daemon/lldpd.h	/^	char *driver;		\/* Driver (for whitelisting purpose) *\/$/;"	m	struct:interfaces_device	access:public
dscp	lldpd-structs.h	/^	u_int8_t		 dscp;$/;"	m	struct:lldpd_med_policy	access:public
dummy	marshal.c	/^	int dummy;		\/* To renumerate pointers *\/$/;"	m	struct:ref	file:	access:public
edp_decode	daemon/lldpd.h	/^int	 edp_decode(PROTO_DECODE_SIG);$/;"	p	signature:(PROTO_DECODE_SIG)
edp_decode	daemon/protocols/edp.c	/^edp_decode(struct lldpd *cfg, char *frame, int s,$/;"	f	signature:(struct lldpd *cfg, char *frame, int s, struct lldpd_hardware *hardware, struct lldpd_chassis **newchassis, struct lldpd_port **newport)
edp_send	daemon/lldpd.h	/^int	 edp_send(PROTO_SEND_SIG);$/;"	p	signature:(PROTO_SEND_SIG)
edp_send	daemon/protocols/edp.c	/^edp_send(struct lldpd *global,$/;"	f	signature:(struct lldpd *global, struct lldpd_hardware *hardware)
el	client/commands.c	/^	struct cmd_node *el;		 \/**< Stored element *\/$/;"	m	struct:cmd_env_stack	typeref:struct:cmd_env_stack::cmd_node	file:	access:public
el	client/jansson_writer.c	/^	json_t *el;$/;"	m	struct:json_element	file:	access:public
el	client/jsonc_writer.c	/^	json_object *el;$/;"	m	struct:json_element	file:	access:public
els	client/jansson_writer.c	/^	struct json_element_list els;$/;"	m	struct:json_writer_private	typeref:struct:json_writer_private::json_element_list	file:	access:public
els	client/jsonc_writer.c	/^	struct json_element_list els;$/;"	m	struct:json_writer_private	typeref:struct:json_writer_private::json_element_list	file:	access:public
embedded	lib/atom.h	/^	int embedded;			     \/* This atom is "embedded" (not refcounted) *\/$/;"	m	struct:_lldpctl_atom_chassis_t	access:public
empty_map	lib/atom.c	/^static lldpctl_map_t empty_map[] = {{ 0, NULL }};$/;"	v	file:
enabled	daemon/lldpd.h	/^	int		 enabled;	\/* Is this protocol enabled? *\/$/;"	m	struct:protocol	access:public
enabled	lldpd-structs.h	/^	u_int8_t		enabled;$/;"	m	struct:lldpd_dot3_power	access:public
end	client/writer.h	/^	void	(*end)(struct writer *);$/;"	m	struct:writer	access:public
entity	daemon/agent.c	/^	void            *entity;	    \/* Best entity *\/$/;"	m	struct:header_index	file:	access:public
env	client/show.c	/^	struct cmd_env *env;$/;"	m	struct:watcharg	typeref:struct:watcharg::cmd_env	file:	access:public
error	lib/atom.h	/^	lldpctl_error_t error;	\/* 报错回调函数*\/$/;"	m	struct:lldpctl_conn_t	access:public
eth_ops	daemon/interfaces-linux.c	/^static struct lldpd_ops eth_ops = {$/;"	v	typeref:struct:lldpd_ops	file:
ev	daemon/event.c	/^	struct event *ev;$/;"	m	struct:lldpd_events	typeref:struct:lldpd_events::event	file:	access:public
exact	daemon/agent.c	/^	int              exact;$/;"	m	struct:header_index	file:	access:public
execute	client/commands.c	/^	int(*execute)(struct lldpctl_conn_t*, struct writer*,$/;"	m	struct:cmd_node	file:	access:public
f_uint16	daemon/frame.h	/^	uint16_t f_uint16;$/;"	m	union:__anon1	access:public
f_uint32	daemon/frame.h	/^	uint32_t f_uint32;$/;"	m	union:__anon1	access:public
f_uint8	daemon/frame.h	/^	uint8_t f_uint8;$/;"	m	union:__anon1	access:public
fatal	log.c	/^fatal(const char *token, const char *emsg)$/;"	f	signature:(const char *token, const char *emsg)
fatal	log.h	/^void             fatal(const char*, const char *) __attribute__((__noreturn__));$/;"	p	signature:(const char*, const char *)
fatalx	log.c	/^fatalx(const char *token, const char *emsg)$/;"	f	signature:(const char *token, const char *emsg)
fatalx	log.h	/^void             fatalx(const char *, const char *) __attribute__((__noreturn__));$/;"	p	signature:(const char *, const char *)
fd	lib/atom.h	/^	int fd;			\/* File descriptor to the socket. *\/$/;"	m	struct:lldpctl_conn_sync_t	access:public
fdp_send	daemon/lldpd.h	/^int	 fdp_send(PROTO_SEND_SIG);$/;"	p	signature:(PROTO_SEND_SIG)
fdp_send	daemon/protocols/cdp.c	/^fdp_send(struct lldpd *global,$/;"	f	signature:(struct lldpd *global, struct lldpd_hardware *hardware)
fh	client/jansson_writer.c	/^	FILE *fh;$/;"	m	struct:json_writer_private	file:	access:public
fh	client/jsonc_writer.c	/^	FILE *fh;$/;"	m	struct:json_writer_private	file:	access:public
fh	client/kv_writer.c	/^	FILE *	fh;$/;"	m	struct:kv_writer_private	file:	access:public
fh	client/text_writer.c	/^	FILE *	fh;$/;"	m	struct:txt_writer_private	file:	access:public
fh	client/xml_writer.c	/^	FILE *fh;$/;"	m	struct:xml_writer_private	file:	access:public
filter	client/lldpcli.c	/^filter(const struct dirent *dir)$/;"	f	file:	signature:(const struct dirent *dir)
filters	daemon/lldpd.c	/^static const struct intint filters[] = {$/;"	v	typeref:struct:intint	file:
finish	client/writer.h	/^	void	(*finish)(struct writer *);$/;"	m	struct:writer	access:public
flags	daemon/lldpd.h	/^	int   flags;		\/* Flags (IFF_*) *\/$/;"	m	struct:interfaces_device	access:public
flags	daemon/lldpd.h	/^	int flags;			 \/* Flags *\/$/;"	m	struct:interfaces_address	access:public
format	lldpd-structs.h	/^	u_int8_t		 format;$/;"	m	struct:lldpd_med_loc	access:public
fp_buftofp	lib/fixedpoint.c	/^fp_buftofp(const unsigned char *buf,$/;"	f	signature:(const unsigned char *buf, unsigned intbits, unsigned fltbits, unsigned shift)
fp_buftofp	lib/fixedpoint.h	/^struct fp_number fp_buftofp(const unsigned char *, unsigned, unsigned, unsigned);$/;"	p	signature:(const unsigned char *, unsigned, unsigned, unsigned)
fp_fptobuf	lib/fixedpoint.c	/^fp_fptobuf(struct fp_number fp, unsigned char *buf, unsigned shift)$/;"	f	signature:(struct fp_number fp, unsigned char *buf, unsigned shift)
fp_fptobuf	lib/fixedpoint.h	/^void  fp_fptobuf(struct fp_number, unsigned char *, unsigned);$/;"	p	signature:(struct fp_number, unsigned char *, unsigned)
fp_fptostr	lib/fixedpoint.c	/^fp_fptostr(struct fp_number fp, const char *suffix)$/;"	f	signature:(struct fp_number fp, const char *suffix)
fp_fptostr	lib/fixedpoint.h	/^char *fp_fptostr(struct fp_number, const char *);$/;"	p	signature:(struct fp_number, const char *)
fp_negate	lib/fixedpoint.c	/^fp_negate(struct fp_number fp)$/;"	f	signature:(struct fp_number fp)
fp_negate	lib/fixedpoint.h	/^struct fp_number fp_negate(struct fp_number);$/;"	p	signature:(struct fp_number)
fp_number	lib/fixedpoint.h	/^struct fp_number {$/;"	s
fp_number::__anon10::bits	lib/fixedpoint.h	/^		unsigned bits;$/;"	m	struct:fp_number::__anon10	access:public
fp_number::__anon10::precision	lib/fixedpoint.h	/^		unsigned precision;$/;"	m	struct:fp_number::__anon10	access:public
fp_number::__anon10::value	lib/fixedpoint.h	/^		long long value;$/;"	m	struct:fp_number::__anon10	access:public
fp_number::__anon9::bits	lib/fixedpoint.h	/^		unsigned bits;$/;"	m	struct:fp_number::__anon9	access:public
fp_number::__anon9::value	lib/fixedpoint.h	/^		long long value;$/;"	m	struct:fp_number::__anon9	access:public
fp_number::fraction	lib/fixedpoint.h	/^	} fraction;$/;"	m	struct:fp_number	typeref:struct:fp_number::__anon10	access:public
fp_number::integer	lib/fixedpoint.h	/^	} integer;$/;"	m	struct:fp_number	typeref:struct:fp_number::__anon9	access:public
fp_strtofp	lib/fixedpoint.c	/^fp_strtofp(const char *repr, char **end,$/;"	f	signature:(const char *repr, char **end, unsigned intbits, unsigned fltbits)
fp_strtofp	lib/fixedpoint.h	/^struct fp_number fp_strtofp(const char *, char **, unsigned, unsigned);$/;"	p	signature:(const char *, char **, unsigned, unsigned)
fraction	lib/fixedpoint.h	/^	} fraction;$/;"	m	struct:fp_number	typeref:struct:fp_number::__anon10	access:public
frame	lldpd-structs.h	/^	unsigned char frame[1];$/;"	m	struct:lldpd_frame	access:public
frame_checksum	daemon/frame.c	/^frame_checksum(const u_char *cp, int len, int cisco)$/;"	f	signature:(const u_char *cp, int len, int cisco)
frame_checksum	daemon/lldpd.h	/^u_int16_t frame_checksum(const u_int8_t *, int, int);$/;"	p	signature:(const u_int8_t *, int, int)
free	lib/atom.h	/^	void                 (*free)(lldpctl_atom_t *);$/;"	m	struct:lldpctl_atom_t	access:public
free	lib/atom.h	/^	void (*free)(lldpctl_atom_t *); \/* Optional deallocation steps *\/$/;"	m	struct:atom_builder	access:public
function	daemon/priv.c	/^	void(*function)(void);$/;"	m	struct:dispatch_actions	file:	access:public
g_base	daemon/lldpd.h	/^	struct event_base	*g_base;        \/\/ 指向一个默认的event_base$/;"	m	struct:lldpd	typeref:struct:lldpd::event_base	access:public
g_chassis	daemon/lldpd.h	/^	TAILQ_HEAD(, lldpd_chassis) g_chassis;      \/\/ 保存系统功能的尾队列头$/;"	m	struct:lldpd	access:public
g_cleanup_timer	daemon/lldpd.h	/^	struct event		*g_cleanup_timer;$/;"	m	struct:lldpd	typeref:struct:lldpd::event	access:public
g_config	daemon/lldpd.h	/^	struct lldpd_config	 g_config;      \/\/ lldp参数配置控制块$/;"	m	struct:lldpd	typeref:struct:lldpd::lldpd_config	access:public
g_ctl	daemon/lldpd.h	/^	int			 g_ctl;                 \/\/ 记录lldpd cli unix-dimain fd$/;"	m	struct:lldpd	access:public
g_ctlname	daemon/lldpd.h	/^	const char		*g_ctlname;         \/\/ lldpd cli 本地服务器地址 \/var\/run\/lldpd.socket$/;"	m	struct:lldpd	access:public
g_default_local_port	daemon/lldpd.h	/^	struct lldpd_port	*g_default_local_port;  \/\/ 指向一个缺省的端口控制块尾队列元素$/;"	m	struct:lldpd	typeref:struct:lldpd::lldpd_port	access:public
g_hardware	daemon/lldpd.h	/^	TAILQ_HEAD(, lldpd_hardware) g_hardware;$/;"	m	struct:lldpd	access:public
g_iface_cb	daemon/lldpd.h	/^	void(*g_iface_cb)(struct lldpd *);	      \/* Called when there is an interface change 接口变化后的回调函数 *\/$/;"	m	struct:lldpd	access:public
g_iface_event	daemon/lldpd.h	/^	struct event		*g_iface_event; \/* Triggered when there is an interface change *\/$/;"	m	struct:lldpd	typeref:struct:lldpd::event	access:public
g_iface_timer_event	daemon/lldpd.h	/^	struct event		*g_iface_timer_event; \/* Triggered one second after last interface change *\/$/;"	m	struct:lldpd	typeref:struct:lldpd::event	access:public
g_lastrid	daemon/lldpd.h	/^	int			 g_lastrid;$/;"	m	struct:lldpd	access:public
g_lsb_release	daemon/lldpd.h	/^	char			*g_lsb_release;$/;"	m	struct:lldpd	access:public
g_main_loop	daemon/lldpd.h	/^	struct event		*g_main_loop;   \/\/ 纯手动触发事件句柄$/;"	m	struct:lldpd	typeref:struct:lldpd::event	access:public
g_netlink	daemon/lldpd.h	/^	struct lldpd_netlink	*g_netlink; \/\/ netlink控制块$/;"	m	struct:lldpd	typeref:struct:lldpd::lldpd_netlink	access:public
g_protocols	daemon/lldpd.h	/^	struct protocol		*g_protocols;   \/\/ 指向lldp细分协议列表$/;"	m	struct:lldpd	typeref:struct:lldpd::protocol	access:public
g_snmp	daemon/lldpd.h	/^	int			 g_snmp;                \/\/ snmp使能标志$/;"	m	struct:lldpd	access:public
g_snmp_agentx	daemon/lldpd.h	/^	const char		*g_snmp_agentx;     \/\/ snmp本地服务器地址 \/var\/agentX\/master$/;"	m	struct:lldpd	access:public
g_snmp_fds	daemon/lldpd.h	/^	void			*g_snmp_fds;        \/\/ 指向snmp-fds尾队列头$/;"	m	struct:lldpd	access:public
g_snmp_timeout	daemon/lldpd.h	/^	struct event		*g_snmp_timeout;\/\/ snmp超时事件句柄$/;"	m	struct:lldpd	typeref:struct:lldpd::event	access:public
g_sock	daemon/lldpd.h	/^	int			 g_sock;                \/\/ 记录ioctl fd$/;"	m	struct:lldpd	access:public
gc	marshal.c	/^struct gc {$/;"	s	file:
gc::TAILQ_ENTRY	marshal.c	/^	TAILQ_ENTRY(gc) next;$/;"	p	struct:gc	file:	access:public
gc::orig	marshal.c	/^	void *orig;		\/* Original reference (not valid anymore !) *\/$/;"	m	struct:gc	file:	access:public
gc::pointer	marshal.c	/^	void *pointer;$/;"	m	struct:gc	file:	access:public
gen	daemon/netlink.c	/^	struct rtgenmsg gen;$/;"	m	struct:netlink_req	typeref:struct:netlink_req::rtgenmsg	file:	access:public
get	lib/atom.h	/^	lldpctl_atom_t *(*get)(lldpctl_atom_t *, lldpctl_key_t);$/;"	m	struct:lldpctl_atom_t	access:public
get	lib/atom.h	/^	lldpctl_atom_t*      (*get)(lldpctl_atom_t *,        lldpctl_key_t);$/;"	m	struct:atom_builder	access:public
get_buffer	lib/atom.h	/^	const u_int8_t *(*get_buffer)(lldpctl_atom_t *, lldpctl_key_t, size_t *);$/;"	m	struct:lldpctl_atom_t	access:public
get_buffer	lib/atom.h	/^	const u_int8_t*      (*get_buffer)(lldpctl_atom_t *, lldpctl_key_t, size_t *);$/;"	m	struct:atom_builder	access:public
get_int	lib/atom.h	/^	long int             (*get_int)(lldpctl_atom_t *,    lldpctl_key_t);$/;"	m	struct:atom_builder	access:public
get_int	lib/atom.h	/^	long int        (*get_int)(lldpctl_atom_t *, lldpctl_key_t);$/;"	m	struct:lldpctl_atom_t	access:public
get_str	lib/atom.h	/^	const char     *(*get_str)(lldpctl_atom_t *, lldpctl_key_t);$/;"	m	struct:lldpctl_atom_t	access:public
get_str	lib/atom.h	/^	const char*          (*get_str)(lldpctl_atom_t *,    lldpctl_key_t);$/;"	m	struct:atom_builder	access:public
getline	compat/compat.h	/^ssize_t getline(char **, size_t *, FILE *);$/;"	p	signature:(char **, size_t *, FILE *)
getline	compat/getline.c	/^getline(char **buf, size_t *buflen, FILE *fp)$/;"	f	signature:(char **buf, size_t *buflen, FILE *fp)
getopt	compat/compat.h	46;"	d
guess	daemon/lldpd.h	/^	int(*guess)(PROTO_GUESS_SIG);   \/* Can be NULL, use MAC address in this case *\/$/;"	m	struct:protocol	access:public
h_ageout_cnt	lldpd-structs.h	/^	u_int64_t		 h_ageout_cnt;$/;"	m	struct:lldpd_hardware	access:public
h_cfg	lldpd-structs.h	/^	struct lldpd		*h_cfg;	    \/* Pointer to main configuration *\/$/;"	m	struct:lldpd_hardware	typeref:struct:lldpd_hardware::lldpd	access:public
h_data	lldpd-structs.h	/^	void			*h_data;    \/* Hardware-dependent data *\/$/;"	m	struct:lldpd_hardware	access:public
h_delete_cnt	lldpd-structs.h	/^	u_int64_t		 h_delete_cnt;$/;"	m	struct:lldpd_hardware	access:public
h_drop_cnt	lldpd-structs.h	/^	u_int64_t		 h_drop_cnt;$/;"	m	struct:lldpd_hardware	access:public
h_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_hardware)	 h_entries;$/;"	m	struct:lldpd_hardware	access:public
h_flags	lldpd-structs.h	/^	int			 h_flags; \/* Packets will be sent only$/;"	m	struct:lldpd_hardware	access:public
h_ifindex	lldpd-structs.h	/^	int			 h_ifindex; \/* Interface index, used by SNMP *\/$/;"	m	struct:lldpd_hardware	access:public
h_ifname	lldpd-structs.h	/^	char			 h_ifname[IFNAMSIZ]; \/* Should be unique *\/$/;"	m	struct:lldpd_hardware	access:public
h_insert_cnt	lldpd-structs.h	/^	u_int64_t		 h_insert_cnt;$/;"	m	struct:lldpd_hardware	access:public
h_lchassis_previous_id	lldpd-structs.h	/^	char			*h_lchassis_previous_id;$/;"	m	struct:lldpd_hardware	access:public
h_lchassis_previous_id_len	lldpd-structs.h	/^	int			 h_lchassis_previous_id_len;$/;"	m	struct:lldpd_hardware	access:public
h_lchassis_previous_id_subtype	lldpd-structs.h	/^	u_int8_t	 	 h_lchassis_previous_id_subtype;$/;"	m	struct:lldpd_hardware	access:public
h_lladdr	lldpd-structs.h	/^	u_int8_t		 h_lladdr[ETHER_ADDR_LEN];$/;"	m	struct:lldpd_hardware	access:public
h_lport	lldpd-structs.h	/^	struct lldpd_port	 h_lport;  \/* Port attached to this hardware port *\/$/;"	m	struct:lldpd_hardware	typeref:struct:lldpd_hardware::lldpd_port	access:public
h_lport_previous	lldpd-structs.h	/^	void			*h_lport_previous;$/;"	m	struct:lldpd_hardware	access:public
h_lport_previous_id	lldpd-structs.h	/^	char			*h_lport_previous_id;$/;"	m	struct:lldpd_hardware	access:public
h_lport_previous_id_len	lldpd-structs.h	/^	int			 h_lport_previous_id_len;$/;"	m	struct:lldpd_hardware	access:public
h_lport_previous_id_subtype	lldpd-structs.h	/^	u_int8_t		 h_lport_previous_id_subtype;$/;"	m	struct:lldpd_hardware	access:public
h_lport_previous_len	lldpd-structs.h	/^	ssize_t			 h_lport_previous_len;$/;"	m	struct:lldpd_hardware	access:public
h_mangle	lldpd-structs.h	/^	int			 h_mangle;  \/* 1 if we have to mangle the MAC address *\/$/;"	m	struct:lldpd_hardware	access:public
h_mtu	lldpd-structs.h	/^	int			 h_mtu;$/;"	m	struct:lldpd_hardware	access:public
h_ops	lldpd-structs.h	/^	struct lldpd_ops	*h_ops;	    \/* Hardware-dependent functions *\/$/;"	m	struct:lldpd_hardware	typeref:struct:lldpd_hardware::lldpd_ops	access:public
h_recv	lldpd-structs.h	/^	void			*h_recv;    \/* FD for reception *\/$/;"	m	struct:lldpd_hardware	access:public
h_rports	lldpd-structs.h	/^	TAILQ_HEAD(, lldpd_port) h_rports; \/* Remote ports *\/$/;"	m	struct:lldpd_hardware	access:public
h_rx_cnt	lldpd-structs.h	/^	u_int64_t		 h_rx_cnt;$/;"	m	struct:lldpd_hardware	access:public
h_rx_discarded_cnt	lldpd-structs.h	/^	u_int64_t		 h_rx_discarded_cnt;$/;"	m	struct:lldpd_hardware	access:public
h_rx_unrecognized_cnt	lldpd-structs.h	/^	u_int64_t		 h_rx_unrecognized_cnt;$/;"	m	struct:lldpd_hardware	access:public
h_sendfd	lldpd-structs.h	/^	int			 h_sendfd;  \/* FD for sending, only used by h_ops *\/$/;"	m	struct:lldpd_hardware	access:public
h_timer	lldpd-structs.h	/^	void			*h_timer;   \/* Timer for this port *\/$/;"	m	struct:lldpd_hardware	access:public
h_tx_cnt	lldpd-structs.h	/^	u_int64_t		 h_tx_cnt;$/;"	m	struct:lldpd_hardware	access:public
h_tx_fast	lldpd-structs.h	/^	int			h_tx_fast; \/* current tx fast start count *\/$/;"	m	struct:lldpd_hardware	access:public
handle	daemon/client.c	/^	ssize_t (*handle)(struct lldpd*, enum hmsg_type *,$/;"	m	struct:client_handle	file:	access:public
hardware	lib/atom.h	/^	struct lldpd_hardware *hardware; \/* Local port only (but optional) *\/$/;"	m	struct:_lldpctl_atom_port_t	typeref:struct:_lldpctl_atom_port_t::lldpd_hardware	access:public
hdr	daemon/netlink.c	/^	struct nlmsghdr hdr;$/;"	m	struct:netlink_req	typeref:struct:netlink_req::nlmsghdr	file:	access:public
header_generic	daemon/agent.c	/^int header_generic(struct variable *, oid *, size_t *, int,$/;"	p	file:	signature:(struct variable *, oid *, size_t *, int, size_t *, WriteMethod **)
header_idx	daemon/agent.c	/^static struct header_index header_idx;$/;"	v	typeref:struct:header_index	file:
header_index	daemon/agent.c	/^struct header_index {$/;"	s	file:
header_index::best	daemon/agent.c	/^	oid              best[MAX_OID_LEN]; \/* Best OID *\/$/;"	m	struct:header_index	file:	access:public
header_index::best_len	daemon/agent.c	/^	size_t           best_len;	    \/* Best OID length *\/$/;"	m	struct:header_index	file:	access:public
header_index::entity	daemon/agent.c	/^	void            *entity;	    \/* Best entity *\/$/;"	m	struct:header_index	file:	access:public
header_index::exact	daemon/agent.c	/^	int              exact;$/;"	m	struct:header_index	file:	access:public
header_index::length	daemon/agent.c	/^	size_t          *length; \/* Length of above OID *\/$/;"	m	struct:header_index	file:	access:public
header_index::name	daemon/agent.c	/^	oid             *name;	 \/* Requested\/returned OID *\/$/;"	m	struct:header_index	file:	access:public
header_index::vp	daemon/agent.c	/^	struct variable *vp;$/;"	m	struct:header_index	typeref:struct:header_index::variable	file:	access:public
header_index_add	daemon/agent.c	/^header_index_add(oid *index, size_t len, void *entity)$/;"	f	file:	signature:(oid *index, size_t len, void *entity)
header_index_best	daemon/agent.c	/^header_index_best()$/;"	f
header_index_init	daemon/agent.c	/^header_index_init(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
header_ipindexed_table	daemon/agent.c	/^header_ipindexed_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
header_pmedindexed_location_table	daemon/agent.c	/^header_pmedindexed_location_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
header_pmedindexed_policy_table	daemon/agent.c	/^header_pmedindexed_policy_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
header_portindexed_table	daemon/agent.c	/^header_portindexed_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
header_ppiindexed_table	daemon/agent.c	/^header_ppiindexed_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
header_pppvidindexed_table	daemon/agent.c	/^header_pppvidindexed_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
header_pvindexed_table	daemon/agent.c	/^header_pvindexed_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
header_tprindexed_table	daemon/agent.c	/^header_tprindexed_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method, int withmed)
header_tpripindexed_table	daemon/agent.c	/^header_tpripindexed_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
header_tprmedindexed_table	daemon/agent.c	/^header_tprmedindexed_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method, int variant)
header_tprpiindexed_table	daemon/agent.c	/^header_tprpiindexed_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
header_tprppvidindexed_table	daemon/agent.c	/^header_tprppvidindexed_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
header_tprvindexed_table	daemon/agent.c	/^header_tprvindexed_table(struct variable *vp, oid *name, size_t *length,$/;"	f	file:	signature:(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
hidden	client/commands.c	/^	int hidden;		\/**< Hidden command? *\/$/;"	m	struct:cmd_node	file:	access:public
hidden	client/commands.c	/^	int hidden;$/;"	m	struct:candidate_word	file:	access:public
hmsg_header	ctl.h	/^struct hmsg_header {$/;"	s
hmsg_header::len	ctl.h	/^	size_t         len;$/;"	m	struct:hmsg_header	access:public
hmsg_header::type	ctl.h	/^	enum hmsg_type type;$/;"	m	struct:hmsg_header	typeref:enum:hmsg_header::hmsg_type	access:public
hmsg_type	ctl.h	/^enum hmsg_type {$/;"	g
iface_append_vlan	daemon/interfaces.c	/^iface_append_vlan(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device *vlan, struct interfaces_device *lower)
iface_append_vlan_to_lower	daemon/interfaces.c	/^iface_append_vlan_to_lower(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct interfaces_device *vlan, struct interfaces_device *upper, int depth)
iface_bond_close	daemon/interfaces-linux.c	/^iface_bond_close(struct lldpd *cfg, struct lldpd_hardware *hardware)$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware)
iface_bond_init	daemon/interfaces-linux.c	/^iface_bond_init(struct lldpd *cfg, struct lldpd_hardware *hardware)$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware)
iface_bond_recv	daemon/interfaces-linux.c	/^iface_bond_recv(struct lldpd *cfg, struct lldpd_hardware *hardware,$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware, int fd, char *buffer, size_t size)
ifbpf_eth_close	daemon/interfaces-bpf.c	/^ifbpf_eth_close(struct lldpd *cfg, struct lldpd_hardware *hardware)$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware)
ifbpf_eth_recv	daemon/interfaces-bpf.c	/^ifbpf_eth_recv(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware, int fd, char *buffer, size_t size)
ifbpf_eth_send	daemon/interfaces-bpf.c	/^ifbpf_eth_send(struct lldpd *cfg, struct lldpd_hardware *hardware,$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware, char *buffer, size_t size)
ifbpf_phys_init	daemon/interfaces-bpf.c	/^ifbpf_phys_init(struct lldpd *cfg,$/;"	f	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware)
ifbpf_phys_init	daemon/lldpd.h	/^int ifbpf_phys_init(struct lldpd *, struct lldpd_hardware *);$/;"	p	signature:(struct lldpd *, struct lldpd_hardware *)
ifbsd_blacklist	daemon/interfaces-bsd.c	/^ifbsd_blacklist(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces)
ifbsd_check_bond	daemon/interfaces-bsd.c	/^ifbsd_check_bond(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct interfaces_device *master)
ifbsd_check_bridge	daemon/interfaces-bsd.c	/^ifbsd_check_bridge(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct interfaces_device *master)
ifbsd_check_physical	daemon/interfaces-bsd.c	/^ifbsd_check_physical(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct interfaces_device *iface)
ifbsd_check_vlan	daemon/interfaces-bsd.c	/^ifbsd_check_vlan(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct interfaces_device *vlan)
ifbsd_check_wireless	daemon/interfaces-bsd.c	/^ifbsd_check_wireless(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct ifaddrs *ifaddr, struct interfaces_device *iface)
ifbsd_extract	daemon/interfaces-bsd.c	/^ifbsd_extract(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct interfaces_address_list *addresses, struct ifaddrs *ifaddr)
ifbsd_extract_device	daemon/interfaces-bsd.c	/^ifbsd_extract_device(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct ifaddrs *ifaddr)
ifbsd_macphy	daemon/interfaces-bsd.c	/^ifbsd_macphy(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware)
iflinux_add_bond	daemon/interfaces-linux.c	/^iflinux_add_bond(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces)
iflinux_add_bridge	daemon/interfaces-linux.c	/^iflinux_add_bridge(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces)
iflinux_add_driver	daemon/interfaces-linux.c	/^iflinux_add_driver(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces)
iflinux_add_physical	daemon/interfaces-linux.c	/^iflinux_add_physical(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces)
iflinux_add_vlan	daemon/interfaces-linux.c	/^iflinux_add_vlan(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces)
iflinux_add_wireless	daemon/interfaces-linux.c	/^iflinux_add_wireless(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces)
iflinux_eth_close	daemon/interfaces-linux.c	/^iflinux_eth_close(struct lldpd *cfg, struct lldpd_hardware *hardware)$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware)
iflinux_eth_init	daemon/interfaces-linux.c	/^iflinux_eth_init(struct lldpd *cfg, struct lldpd_hardware *hardware)$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware)
iflinux_eth_recv	daemon/interfaces-linux.c	/^iflinux_eth_recv(struct lldpd *cfg, struct lldpd_hardware *hardware,$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware, int fd, char *buffer, size_t size)
iflinux_eth_send	daemon/interfaces-linux.c	/^iflinux_eth_send(struct lldpd *cfg, struct lldpd_hardware *hardware,$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware, char *buffer, size_t size)
iflinux_get_permanent_mac	daemon/interfaces-linux.c	/^iflinux_get_permanent_mac(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct interfaces_device *iface)
iflinux_get_permanent_mac_ethtool	daemon/interfaces-linux.c	/^iflinux_get_permanent_mac_ethtool(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct interfaces_device *iface)
iflinux_handle_bond	daemon/interfaces-linux.c	/^iflinux_handle_bond(struct lldpd *cfg, struct interfaces_device_list *interfaces)$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces)
iflinux_is_bond	daemon/interfaces-linux.c	/^iflinux_is_bond(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct interfaces_device *master)
iflinux_is_bridge	daemon/interfaces-linux.c	/^iflinux_is_bridge(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct interfaces_device *iface)
iflinux_is_vlan	daemon/interfaces-linux.c	/^iflinux_is_vlan(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct interfaces_device *iface)
iflinux_macphy	daemon/interfaces-linux.c	/^iflinux_macphy(struct lldpd_hardware *hardware)$/;"	f	file:	signature:(struct lldpd_hardware *hardware)
ifname	lldpd-structs.h	/^	char *ifname;$/;"	m	struct:lldpd_neighbor_change	access:public
ifname	lldpd-structs.h	/^	char *ifname;$/;"	m	struct:lldpd_port_set	access:public
ifs	lib/atom.h	/^	struct lldpd_interface_list *ifs;$/;"	m	struct:_lldpctl_atom_interfaces_list_t	typeref:struct:_lldpctl_atom_interfaces_list_t::lldpd_interface_list	access:public
ifsolaris_extract	daemon/interfaces-solaris.c	/^ifsolaris_extract(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct interfaces_address_list *addresses, struct lifreq *lifr)
ignore	daemon/lldpd.h	/^	int   ignore;		\/* Ignore this interface *\/$/;"	m	struct:interfaces_device	access:public
ignore	marshal.h	/^	ignore,$/;"	e	enum:marshal_subinfo_kind
index	daemon/interfaces-linux.c	/^	int  index;$/;"	m	struct:bond_master	file:	access:public
index	daemon/lldpd.h	/^	int   index;		\/* Index *\/$/;"	m	struct:interfaces_device	access:public
index	daemon/lldpd.h	/^	int index;			 \/* Index *\/$/;"	m	struct:interfaces_address	access:public
index	lldpd-structs.h	/^	u_int8_t		 index; \/* Not used. *\/$/;"	m	struct:lldpd_med_loc	access:public
index	lldpd-structs.h	/^	u_int8_t		 index; \/* Not used. *\/$/;"	m	struct:lldpd_med_policy	access:public
inet	lldpd-structs.h	/^	struct in_addr		inet;$/;"	m	union:lldpd_address	typeref:struct:lldpd_address::in_addr	access:public
inet6	lldpd-structs.h	/^	struct in6_addr		inet6;$/;"	m	union:lldpd_address	typeref:struct:lldpd_address::in6_addr	access:public
init	lib/atom.h	/^	int  (*init)(lldpctl_atom_t *, va_list); \/* Optional additional init steps *\/$/;"	m	struct:atom_builder	access:public
init_atom_builder	lib/atom.h	/^void init_atom_builder(void);$/;"	p	signature:(void)
init_atom_map	lib/atom.h	/^void init_atom_map(void);$/;"	p	signature:(void)
input	client/lldpcli.c	/^struct input {$/;"	s	file:
input::TAILQ_ENTRY	client/lldpcli.c	/^	TAILQ_ENTRY(input) next;$/;"	p	struct:input	file:	access:public
input::name	client/lldpcli.c	/^	char *name;$/;"	m	struct:input	file:	access:public
input_append	client/lldpcli.c	/^input_append(const char *arg, struct inputs *inputs, int acceptdir)$/;"	f	file:	signature:(const char *arg, struct inputs *inputs, int acceptdir)
input_buffer	lib/atom.h	/^	uint8_t *input_buffer;	\/* Current input\/output buffer *\/$/;"	m	struct:lldpctl_conn_t	access:public
input_buffer_len	lib/atom.h	/^	size_t input_buffer_len;$/;"	m	struct:lldpctl_conn_t	access:public
integer	lib/fixedpoint.h	/^	} integer;$/;"	m	struct:fp_number	typeref:struct:fp_number::__anon9	access:public
interface	lib/atoms/interface.c	/^static struct atom_builder interface =$/;"	v	typeref:struct:atom_builder	file:
interfaces_address	daemon/lldpd.h	/^struct interfaces_address {$/;"	s
interfaces_address::address	daemon/lldpd.h	/^	struct sockaddr_storage address; \/* Address *\/$/;"	m	struct:interfaces_address	typeref:struct:interfaces_address::sockaddr_storage	access:public
interfaces_address::flags	daemon/lldpd.h	/^	int flags;			 \/* Flags *\/$/;"	m	struct:interfaces_address	access:public
interfaces_address::index	daemon/lldpd.h	/^	int index;			 \/* Index *\/$/;"	m	struct:interfaces_address	access:public
interfaces_address::next	daemon/lldpd.h	/^	TAILQ_ENTRY(interfaces_address) next;$/;"	m	struct:interfaces_address	access:public
interfaces_cleanup	daemon/interfaces-bsd.c	/^interfaces_cleanup(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
interfaces_cleanup	daemon/interfaces-linux.c	/^interfaces_cleanup(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
interfaces_cleanup	daemon/interfaces-solaris.c	/^interfaces_cleanup(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
interfaces_cleanup	daemon/lldpd.h	/^void interfaces_cleanup(struct lldpd *);$/;"	p	signature:(struct lldpd *)
interfaces_device	daemon/lldpd.h	/^struct interfaces_device {$/;"	s
interfaces_device::address	daemon/lldpd.h	/^	char *address;		\/* MAC address *\/$/;"	m	struct:interfaces_device	access:public
interfaces_device::alias	daemon/lldpd.h	/^	char *alias;		\/* Alias *\/$/;"	m	struct:interfaces_device	access:public
interfaces_device::driver	daemon/lldpd.h	/^	char *driver;		\/* Driver (for whitelisting purpose) *\/$/;"	m	struct:interfaces_device	access:public
interfaces_device::flags	daemon/lldpd.h	/^	int   flags;		\/* Flags (IFF_*) *\/$/;"	m	struct:interfaces_device	access:public
interfaces_device::ignore	daemon/lldpd.h	/^	int   ignore;		\/* Ignore this interface *\/$/;"	m	struct:interfaces_device	access:public
interfaces_device::index	daemon/lldpd.h	/^	int   index;		\/* Index *\/$/;"	m	struct:interfaces_device	access:public
interfaces_device::lower	daemon/lldpd.h	/^	struct interfaces_device *lower; \/* Lower interface (for a VLAN for example) *\/$/;"	m	struct:interfaces_device	typeref:struct:interfaces_device::interfaces_device	access:public
interfaces_device::lower_idx	daemon/lldpd.h	/^	int lower_idx;		\/* Index to lower interface *\/$/;"	m	struct:interfaces_device	access:public
interfaces_device::mtu	daemon/lldpd.h	/^	int   mtu;		\/* MTU *\/$/;"	m	struct:interfaces_device	access:public
interfaces_device::name	daemon/lldpd.h	/^	char *name;		\/* Name *\/$/;"	m	struct:interfaces_device	access:public
interfaces_device::next	daemon/lldpd.h	/^	TAILQ_ENTRY(interfaces_device) next;$/;"	m	struct:interfaces_device	access:public
interfaces_device::type	daemon/lldpd.h	/^	int   type;		\/* Type (see IFACE_*_T) *\/$/;"	m	struct:interfaces_device	access:public
interfaces_device::upper	daemon/lldpd.h	/^	struct interfaces_device *upper; \/* Upper interface (for a bridge or a bond) *\/$/;"	m	struct:interfaces_device	typeref:struct:interfaces_device::interfaces_device	access:public
interfaces_device::upper_idx	daemon/lldpd.h	/^	int upper_idx;		\/* Index to upper interface *\/$/;"	m	struct:interfaces_device	access:public
interfaces_device::vlanid	daemon/lldpd.h	/^	int   vlanid;		\/* If a VLAN, what is the VLAN ID? *\/$/;"	m	struct:interfaces_device	access:public
interfaces_free_address	daemon/interfaces.c	/^interfaces_free_address(struct interfaces_address *ifaddr)$/;"	f	signature:(struct interfaces_address *ifaddr)
interfaces_free_address	daemon/lldpd.h	/^void interfaces_free_address(struct interfaces_address *);$/;"	p	signature:(struct interfaces_address *)
interfaces_free_addresses	daemon/interfaces.c	/^interfaces_free_addresses(struct interfaces_address_list *ifaddrs)$/;"	f	signature:(struct interfaces_address_list *ifaddrs)
interfaces_free_addresses	daemon/lldpd.h	/^void interfaces_free_addresses(struct interfaces_address_list *);$/;"	p	signature:(struct interfaces_address_list *)
interfaces_free_device	daemon/interfaces.c	/^interfaces_free_device(struct interfaces_device *iff)$/;"	f	signature:(struct interfaces_device *iff)
interfaces_free_device	daemon/lldpd.h	/^void interfaces_free_device(struct interfaces_device *);$/;"	p	signature:(struct interfaces_device *)
interfaces_free_devices	daemon/interfaces.c	/^interfaces_free_devices(struct interfaces_device_list *ifs)$/;"	f	signature:(struct interfaces_device_list *ifs)
interfaces_free_devices	daemon/lldpd.h	/^void interfaces_free_devices(struct interfaces_device_list *);$/;"	p	signature:(struct interfaces_device_list *)
interfaces_helper_add_hardware	daemon/interfaces.c	/^interfaces_helper_add_hardware(struct lldpd *cfg,$/;"	f	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware)
interfaces_helper_add_hardware	daemon/lldpd.h	/^void interfaces_helper_add_hardware(struct lldpd *,$/;"	p	signature:(struct lldpd *, struct lldpd_hardware *)
interfaces_helper_chassis	daemon/interfaces.c	/^interfaces_helper_chassis(struct lldpd *cfg,$/;"	f	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces)
interfaces_helper_chassis	daemon/lldpd.h	/^void interfaces_helper_chassis(struct lldpd *,$/;"	p	signature:(struct lldpd *, struct interfaces_device_list *)
interfaces_helper_mgmt	daemon/interfaces.c	/^interfaces_helper_mgmt(struct lldpd *cfg,$/;"	f	signature:(struct lldpd *cfg, struct interfaces_address_list *addrs)
interfaces_helper_mgmt	daemon/lldpd.h	/^void interfaces_helper_mgmt(struct lldpd *,$/;"	p	signature:(struct lldpd *, struct interfaces_address_list *)
interfaces_helper_mgmt_for_af	daemon/interfaces.c	/^interfaces_helper_mgmt_for_af(struct lldpd *cfg,$/;"	f	file:	signature:(struct lldpd *cfg, int af, struct interfaces_address_list *addrs, int global, int allnegative)
interfaces_helper_physical	daemon/interfaces.c	/^interfaces_helper_physical(struct lldpd *cfg,$/;"	f	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces, struct lldpd_ops *ops, int(*init)(struct lldpd *, struct lldpd_hardware *))
interfaces_helper_physical	daemon/lldpd.h	/^void interfaces_helper_physical(struct lldpd *,$/;"	p	signature:(struct lldpd *, struct interfaces_device_list *, struct lldpd_ops *, int(*init)(struct lldpd *, struct lldpd_hardware *))
interfaces_helper_port_name_desc	daemon/interfaces.c	/^interfaces_helper_port_name_desc(struct lldpd *cfg,$/;"	f	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware, struct interfaces_device *iface)
interfaces_helper_port_name_desc	daemon/lldpd.h	/^void interfaces_helper_port_name_desc(struct lldpd *,$/;"	p	signature:(struct lldpd *, struct lldpd_hardware *, struct interfaces_device *)
interfaces_helper_promisc	daemon/interfaces.c	/^interfaces_helper_promisc(struct lldpd *cfg,$/;"	f	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware)
interfaces_helper_promisc	daemon/lldpd.h	/^void interfaces_helper_promisc(struct lldpd *,$/;"	p	signature:(struct lldpd *, struct lldpd_hardware *)
interfaces_helper_vlan	daemon/interfaces.c	/^interfaces_helper_vlan(struct lldpd *cfg,$/;"	f	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces)
interfaces_helper_vlan	daemon/lldpd.h	/^void interfaces_helper_vlan(struct lldpd *,$/;"	p	signature:(struct lldpd *, struct interfaces_device_list *)
interfaces_helper_whitelist	daemon/interfaces.c	/^interfaces_helper_whitelist(struct lldpd *cfg,$/;"	f	signature:(struct lldpd *cfg, struct interfaces_device_list *interfaces)
interfaces_helper_whitelist	daemon/lldpd.h	/^void interfaces_helper_whitelist(struct lldpd *,$/;"	p	signature:(struct lldpd *, struct interfaces_device_list *)
interfaces_indextointerface	daemon/interfaces.c	/^interfaces_indextointerface(struct interfaces_device_list *interfaces,$/;"	f	signature:(struct interfaces_device_list *interfaces, int index)
interfaces_indextointerface	daemon/lldpd.h	/^struct interfaces_device* interfaces_indextointerface($/;"	p	signature:( struct interfaces_device_list *, int)
interfaces_list	lib/atoms/interface.c	/^static struct atom_builder interfaces_list =$/;"	v	typeref:struct:atom_builder	file:
interfaces_nametointerface	daemon/interfaces.c	/^interfaces_nametointerface(struct interfaces_device_list *interfaces,$/;"	f	signature:(struct interfaces_device_list *interfaces, const char *device)
interfaces_nametointerface	daemon/lldpd.h	/^struct interfaces_device* interfaces_nametointerface($/;"	p	signature:( struct interfaces_device_list *, const char *)
interfaces_routing_enabled	daemon/forward-bsd.c	/^interfaces_routing_enabled(struct lldpd *cfg) {$/;"	f	signature:(struct lldpd *cfg)
interfaces_routing_enabled	daemon/forward-linux.c	/^interfaces_routing_enabled(struct lldpd *cfg) {$/;"	f	signature:(struct lldpd *cfg)
interfaces_routing_enabled	daemon/forward-solaris.c	/^interfaces_routing_enabled(struct lldpd *cfg) {$/;"	f	signature:(struct lldpd *cfg)
interfaces_routing_enabled	daemon/lldpd.h	/^int interfaces_routing_enabled(struct lldpd *);$/;"	p	signature:(struct lldpd *)
interfaces_send_helper	daemon/interfaces.c	/^interfaces_send_helper(struct lldpd *cfg,$/;"	f	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware, char *buffer, size_t size)
interfaces_send_helper	daemon/lldpd.h	/^int interfaces_send_helper(struct lldpd *,$/;"	p	signature:(struct lldpd *, struct lldpd_hardware *, char *, size_t)
interfaces_setup_multicast	daemon/interfaces.c	/^interfaces_setup_multicast(struct lldpd *cfg, const char *name,$/;"	f	signature:(struct lldpd *cfg, const char *name, int remove)
interfaces_setup_multicast	daemon/lldpd.h	/^void interfaces_setup_multicast(struct lldpd *, const char *, int);$/;"	p	signature:(struct lldpd *, const char *, int)
interfaces_update	daemon/interfaces-bsd.c	/^interfaces_update(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
interfaces_update	daemon/interfaces-linux.c	/^void interfaces_update(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
interfaces_update	daemon/interfaces-solaris.c	/^interfaces_update(struct lldpd *cfg) {$/;"	f	signature:(struct lldpd *cfg)
interfaces_update	daemon/lldpd.h	/^void     interfaces_update(struct lldpd *);$/;"	p	signature:(struct lldpd *)
intint	daemon/lldpd.c	/^struct intint { int a; int b; };$/;"	s	file:
intint::a	daemon/lldpd.c	/^struct intint { int a; int b; };$/;"	m	struct:intint	file:	access:public
intint::b	daemon/lldpd.c	/^struct intint { int a; int b; };$/;"	m	struct:intint	file:	access:public
is_lldpctl	client/lldpcli.c	/^static int is_lldpctl(const char *name)$/;"	f	file:	signature:(const char *name)
is_privileged	client/lldpcli.c	/^static int is_privileged()$/;"	f	file:
iter	lib/atom.h	/^	lldpctl_atom_iter_t *(*iter)(lldpctl_atom_t *);$/;"	m	struct:lldpctl_atom_t	access:public
iter	lib/atom.h	/^	lldpctl_atom_iter_t* (*iter)(lldpctl_atom_t *); \/* Optional, return an iterator for this object *\/$/;"	m	struct:atom_builder	access:public
jansson_attr	client/jansson_writer.c	/^jansson_attr(struct writer *w, const char *tag,$/;"	f	file:	signature:(struct writer *w, const char *tag, const char *descr, const char *value)
jansson_cleanup	client/jansson_writer.c	/^jansson_cleanup(json_t *el)$/;"	f	file:	signature:(json_t *el)
jansson_data	client/jansson_writer.c	/^jansson_data(struct writer *w, const char *data)$/;"	f	file:	signature:(struct writer *w, const char *data)
jansson_end	client/jansson_writer.c	/^jansson_end(struct writer *w)$/;"	f	file:	signature:(struct writer *w)
jansson_finish	client/jansson_writer.c	/^jansson_finish(struct writer *w)$/;"	f	file:	signature:(struct writer *w)
jansson_init	client/jansson_writer.c	/^jansson_init(FILE *fh)$/;"	f	signature:(FILE *fh)
jansson_init	client/writer.h	/^extern struct writer *jansson_init(FILE *);$/;"	p	signature:(FILE *)
jansson_start	client/jansson_writer.c	/^jansson_start(struct writer *w, const char *tag, const char *descr)$/;"	f	file:	signature:(struct writer *w, const char *tag, const char *descr)
json_element	client/jansson_writer.c	/^struct json_element {$/;"	s	file:
json_element	client/jsonc_writer.c	/^struct json_element {$/;"	s	file:
json_element::TAILQ_ENTRY	client/jansson_writer.c	/^	TAILQ_ENTRY(json_element) next;$/;"	p	struct:json_element	file:	access:public
json_element::TAILQ_ENTRY	client/jsonc_writer.c	/^	TAILQ_ENTRY(json_element) next;$/;"	p	struct:json_element	file:	access:public
json_element::el	client/jansson_writer.c	/^	json_t *el;$/;"	m	struct:json_element	file:	access:public
json_element::el	client/jsonc_writer.c	/^	json_object *el;$/;"	m	struct:json_element	file:	access:public
json_writer_private	client/jansson_writer.c	/^struct json_writer_private {$/;"	s	file:
json_writer_private	client/jsonc_writer.c	/^struct json_writer_private {$/;"	s	file:
json_writer_private::els	client/jansson_writer.c	/^	struct json_element_list els;$/;"	m	struct:json_writer_private	typeref:struct:json_writer_private::json_element_list	file:	access:public
json_writer_private::els	client/jsonc_writer.c	/^	struct json_element_list els;$/;"	m	struct:json_writer_private	typeref:struct:json_writer_private::json_element_list	file:	access:public
json_writer_private::fh	client/jansson_writer.c	/^	FILE *fh;$/;"	m	struct:json_writer_private	file:	access:public
json_writer_private::fh	client/jsonc_writer.c	/^	FILE *fh;$/;"	m	struct:json_writer_private	file:	access:public
jsonc_attr	client/jsonc_writer.c	/^jsonc_attr(struct writer *w, const char *tag,$/;"	f	file:	signature:(struct writer *w, const char *tag, const char *descr, const char *value)
jsonc_cleanup	client/jsonc_writer.c	/^jsonc_cleanup(json_object *el)$/;"	f	file:	signature:(json_object *el)
jsonc_data	client/jsonc_writer.c	/^jsonc_data(struct writer *w, const char *data)$/;"	f	file:	signature:(struct writer *w, const char *data)
jsonc_end	client/jsonc_writer.c	/^jsonc_end(struct writer *w)$/;"	f	file:	signature:(struct writer *w)
jsonc_finish	client/jsonc_writer.c	/^jsonc_finish(struct writer *w)$/;"	f	file:	signature:(struct writer *w)
jsonc_init	client/jsonc_writer.c	/^jsonc_init(FILE *fh)$/;"	f	signature:(FILE *fh)
jsonc_init	client/writer.h	/^extern struct writer *jsonc_init(FILE *);$/;"	p	signature:(FILE *)
jsonc_start	client/jsonc_writer.c	/^jsonc_start(struct writer *w, const char *tag, const char *descr)$/;"	f	file:	signature:(struct writer *w, const char *tag, const char *descr)
key	client/commands.c	/^	const char *key;	      \/**< Key for this element *\/$/;"	m	struct:cmd_env_el	file:	access:public
key	lib/atom.h	/^	int key;$/;"	m	struct:atom_map	access:public
kind	marshal.h	/^	enum marshal_subinfo_kind kind; \/* Kind of substructure *\/$/;"	m	struct:marshal_subinfo	typeref:enum:marshal_subinfo::marshal_subinfo_kind	access:public
kv_attr	client/kv_writer.c	/^kv_attr(struct writer *w, const char *tag, const char *descr, const char *value)$/;"	f	signature:(struct writer *w, const char *tag, const char *descr, const char *value)
kv_data	client/kv_writer.c	/^kv_data(struct writer *w, const char *data)$/;"	f	signature:(struct writer *w, const char *data)
kv_end	client/kv_writer.c	/^kv_end(struct writer *w)$/;"	f	signature:(struct writer *w)
kv_finish	client/kv_writer.c	/^kv_finish(struct writer *w)$/;"	f	signature:(struct writer *w)
kv_init	client/kv_writer.c	/^kv_init(FILE *fh)$/;"	f	signature:(FILE *fh)
kv_init	client/writer.h	/^extern struct writer *kv_init(FILE *);$/;"	p	signature:(FILE *)
kv_start	client/kv_writer.c	/^kv_start(struct writer *w , const char *tag, const char *descr)$/;"	f	signature:(struct writer *w , const char *tag, const char *descr)
kv_writer_private	client/kv_writer.c	/^struct kv_writer_private {$/;"	s	file:
kv_writer_private::fh	client/kv_writer.c	/^	FILE *	fh;$/;"	m	struct:kv_writer_private	file:	access:public
kv_writer_private::prefix	client/kv_writer.c	/^	char *  prefix;$/;"	m	struct:kv_writer_private	file:	access:public
lagg_reqall	daemon/interfaces-bsd.c	136;"	d	file:
lagg_reqport	daemon/interfaces-bsd.c	135;"	d	file:
lastchange	daemon/agent.c	/^lastchange(struct lldpd_port *port)$/;"	f	file:	signature:(struct lldpd_port *port)
len	ctl.h	/^	size_t         len;$/;"	m	struct:hmsg_header	access:public
len	daemon/interfaces-bpf.c	/^	size_t len;		\/* Total length of the buffer *\/$/;"	m	struct:bpf_buffer	file:	access:public
len	lib/atom.h	/^	size_t   len;$/;"	m	struct:_lldpctl_atom_med_caelement_t	access:public
length	daemon/agent.c	/^	size_t          *length; \/* Length of above OID *\/$/;"	m	struct:header_index	file:	access:public
level	client/text_writer.c	/^	int	level;$/;"	m	struct:txt_writer_private	file:	access:public
levent_ctl_accept	daemon/event.c	/^static void levent_ctl_accept(evutil_socket_t fd, short what, void *arg)$/;"	f	file:	signature:(evutil_socket_t fd, short what, void *arg)
levent_ctl_event	daemon/event.c	/^levent_ctl_event(struct bufferevent *bev, short events, void *ptr)$/;"	f	file:	signature:(struct bufferevent *bev, short events, void *ptr)
levent_ctl_free_client	daemon/event.c	/^levent_ctl_free_client(struct lldpd_one_client *client)$/;"	f	file:	signature:(struct lldpd_one_client *client)
levent_ctl_notify	daemon/event.c	/^levent_ctl_notify(char *ifname, int state, struct lldpd_port *neighbor)$/;"	f	signature:(char *ifname, int state, struct lldpd_port *neighbor)
levent_ctl_notify	daemon/lldpd.h	/^void	 levent_ctl_notify(char *, int, struct lldpd_port *);$/;"	p	signature:(char *, int, struct lldpd_port *)
levent_ctl_recv	daemon/event.c	/^levent_ctl_recv(struct bufferevent *bev, void *ptr)$/;"	f	file:	signature:(struct bufferevent *bev, void *ptr)
levent_ctl_send	daemon/event.c	/^levent_ctl_send(struct lldpd_one_client *client, int type, void *data, size_t len)$/;"	f	file:	signature:(struct lldpd_one_client *client, int type, void *data, size_t len)
levent_ctl_send_cb	daemon/event.c	/^levent_ctl_send_cb(void *out, int type, void *data, size_t len)$/;"	f	file:	signature:(void *out, int type, void *data, size_t len)
levent_dump	daemon/event.c	/^levent_dump(evutil_socket_t fd, short what, void *arg)$/;"	f	file:	signature:(evutil_socket_t fd, short what, void *arg)
levent_hardware_add_fd	daemon/event.c	/^levent_hardware_add_fd(struct lldpd_hardware *hardware, int fd)$/;"	f	signature:(struct lldpd_hardware *hardware, int fd)
levent_hardware_add_fd	daemon/lldpd.h	/^void	 levent_hardware_add_fd(struct lldpd_hardware *, int);$/;"	p	signature:(struct lldpd_hardware *, int)
levent_hardware_fds	daemon/event.c	59;"	d	file:
levent_hardware_init	daemon/event.c	/^levent_hardware_init(struct lldpd_hardware *hardware)$/;"	f	signature:(struct lldpd_hardware *hardware)
levent_hardware_init	daemon/lldpd.h	/^void	 levent_hardware_init(struct lldpd_hardware *);$/;"	p	signature:(struct lldpd_hardware *)
levent_hardware_recv	daemon/event.c	/^levent_hardware_recv(evutil_socket_t fd, short what, void *arg)$/;"	f	file:	signature:(evutil_socket_t fd, short what, void *arg)
levent_hardware_release	daemon/event.c	/^levent_hardware_release(struct lldpd_hardware *hardware)$/;"	f	signature:(struct lldpd_hardware *hardware)
levent_hardware_release	daemon/lldpd.h	/^void	 levent_hardware_release(struct lldpd_hardware *);$/;"	p	signature:(struct lldpd_hardware *)
levent_iface_recv	daemon/event.c	/^levent_iface_recv(evutil_socket_t fd, short what, void *arg)$/;"	f	file:	signature:(evutil_socket_t fd, short what, void *arg)
levent_iface_subscribe	daemon/event.c	/^int levent_iface_subscribe(struct lldpd *cfg, int socket)$/;"	f	signature:(struct lldpd *cfg, int socket)
levent_iface_subscribe	daemon/lldpd.h	/^int	 levent_iface_subscribe(struct lldpd *, int);$/;"	p	signature:(struct lldpd *, int)
levent_iface_trigger	daemon/event.c	/^levent_iface_trigger(evutil_socket_t fd, short what, void *arg)$/;"	f	file:	signature:(evutil_socket_t fd, short what, void *arg)
levent_init	daemon/event.c	/^static void levent_init(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
levent_log_cb	daemon/event.c	/^static void levent_log_cb(int severity, const char *msg)$/;"	f	file:	signature:(int severity, const char *msg)
levent_loop	daemon/event.c	/^void levent_loop(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
levent_loop	daemon/lldpd.h	/^void	 levent_loop(struct lldpd *);$/;"	p	signature:(struct lldpd *)
levent_make_socket_blocking	daemon/event.c	/^levent_make_socket_blocking(int fd)$/;"	f	signature:(int fd)
levent_make_socket_blocking	daemon/lldpd.h	/^int	 levent_make_socket_blocking(int);$/;"	p	signature:(int)
levent_make_socket_nonblocking	daemon/event.c	/^int levent_make_socket_nonblocking(int fd)$/;"	f	signature:(int fd)
levent_make_socket_nonblocking	daemon/lldpd.h	/^int	 levent_make_socket_nonblocking(int);$/;"	p	signature:(int)
levent_priv	daemon/event.c	/^static void levent_priv(evutil_socket_t fd, short what, void *arg)$/;"	f	file:	signature:(evutil_socket_t fd, short what, void *arg)
levent_schedule_cleanup	daemon/event.c	/^void levent_schedule_cleanup(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
levent_schedule_cleanup	daemon/lldpd.h	/^void	 levent_schedule_cleanup(struct lldpd *);$/;"	p	signature:(struct lldpd *)
levent_schedule_pdu	daemon/event.c	/^levent_schedule_pdu(struct lldpd_hardware *hardware)$/;"	f	signature:(struct lldpd_hardware *hardware)
levent_schedule_pdu	daemon/lldpd.h	/^void	 levent_schedule_pdu(struct lldpd_hardware *);$/;"	p	signature:(struct lldpd_hardware *)
levent_send_now	daemon/event.c	/^levent_send_now(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
levent_send_now	daemon/lldpd.h	/^void	 levent_send_now(struct lldpd *);$/;"	p	signature:(struct lldpd *)
levent_send_pdu	daemon/event.c	/^levent_send_pdu(evutil_socket_t fd, short what, void *arg)$/;"	f	file:	signature:(evutil_socket_t fd, short what, void *arg)
levent_snmp_add_fd	daemon/event.c	/^levent_snmp_add_fd(struct lldpd *cfg, int fd)$/;"	f	file:	signature:(struct lldpd *cfg, int fd)
levent_snmp_fds	daemon/event.c	58;"	d	file:
levent_snmp_read	daemon/event.c	/^levent_snmp_read(evutil_socket_t fd, short what, void *arg)$/;"	f	file:	signature:(evutil_socket_t fd, short what, void *arg)
levent_snmp_timeout	daemon/event.c	/^static void levent_snmp_timeout(evutil_socket_t fd, short what, void *arg)$/;"	f	file:	signature:(evutil_socket_t fd, short what, void *arg)
levent_snmp_update	daemon/event.c	/^levent_snmp_update(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
levent_snmp_update	daemon/event.c	/^static void levent_snmp_update(struct lldpd *);$/;"	p	file:	signature:(struct lldpd *)
levent_stop	daemon/event.c	/^levent_stop(evutil_socket_t fd, short what, void *arg)$/;"	f	file:	signature:(evutil_socket_t fd, short what, void *arg)
levent_trigger_cleanup	daemon/event.c	/^levent_trigger_cleanup(evutil_socket_t fd, short what, void *arg)$/;"	f	file:	signature:(evutil_socket_t fd, short what, void *arg)
levent_update_and_send	daemon/event.c	/^static void levent_update_and_send(evutil_socket_t fd, short what, void *arg)$/;"	f	file:	signature:(evutil_socket_t fd, short what, void *arg)
levent_update_now	daemon/event.c	/^levent_update_now(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
levent_update_now	daemon/lldpd.h	/^void	 levent_update_now(struct lldpd *);$/;"	p	signature:(struct lldpd *)
list	lib/atom.h	/^	struct lldpd_custom_list *list;$/;"	m	struct:_lldpctl_atom_custom_list_t	typeref:struct:_lldpctl_atom_custom_list_t::lldpd_custom_list	access:public
lldp_decode	daemon/lldpd.h	/^int	 lldp_decode(PROTO_DECODE_SIG);$/;"	p	signature:(PROTO_DECODE_SIG)
lldp_decode	daemon/protocols/lldp.c	/^lldp_decode(struct lldpd *cfg, char *frame, int s,$/;"	f	signature:(struct lldpd *cfg, char *frame, int s, struct lldpd_hardware *hardware, struct lldpd_chassis **newchassis, struct lldpd_port **newport)
lldp_oid	daemon/agent.h	/^static oid lldp_oid[] = {LLDP_OID};$/;"	v
lldp_portid_map	lib/atoms/config.c	/^static struct atom_map lldp_portid_map = {$/;"	v	typeref:struct:atom_map	file:
lldp_send	daemon/lldpd.h	/^int	 lldp_send(PROTO_SEND_SIG);$/;"	p	signature:(PROTO_SEND_SIG)
lldp_send	daemon/protocols/lldp.c	/^lldp_send(struct lldpd *global,$/;"	f	signature:(struct lldpd *global, struct lldpd_hardware *hardware)
lldp_send_shutdown	daemon/lldpd.h	/^int	 lldp_send_shutdown(PROTO_SEND_SIG);$/;"	p	signature:(PROTO_SEND_SIG)
lldp_send_shutdown	daemon/protocols/lldp.c	/^lldp_send_shutdown(struct lldpd *global,$/;"	f	signature:(struct lldpd *global, struct lldpd_hardware *hardware)
lldpctl_atom_create	lib/atom.c	/^lldpctl_atom_create(lldpctl_atom_t *atom)$/;"	f	signature:(lldpctl_atom_t *atom)
lldpctl_atom_create	lib/lldpctl.h	/^lldpctl_atom_t *lldpctl_atom_create(lldpctl_atom_t *atom);$/;"	p	signature:(lldpctl_atom_t *atom)
lldpctl_atom_dec_ref	lib/atom.c	/^lldpctl_atom_dec_ref(lldpctl_atom_t *atom)$/;"	f	signature:(lldpctl_atom_t *atom)
lldpctl_atom_dec_ref	lib/lldpctl.h	/^void lldpctl_atom_dec_ref(lldpctl_atom_t *atom);$/;"	p	signature:(lldpctl_atom_t *atom)
lldpctl_atom_foreach	lib/lldpctl.h	1030;"	d
lldpctl_atom_get	lib/atom.c	/^lldpctl_atom_get(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
lldpctl_atom_get	lib/lldpctl.h	/^lldpctl_atom_t *lldpctl_atom_get(lldpctl_atom_t *atom, lldpctl_key_t key);$/;"	p	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
lldpctl_atom_get_buffer	lib/atom.c	/^lldpctl_atom_get_buffer(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, size_t *length)
lldpctl_atom_get_buffer	lib/lldpctl.h	/^const uint8_t *lldpctl_atom_get_buffer(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	p	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, size_t *length)
lldpctl_atom_get_connection	lib/atom.c	/^lldpctl_atom_get_connection(lldpctl_atom_t *atom)$/;"	f	signature:(lldpctl_atom_t *atom)
lldpctl_atom_get_connection	lib/lldpctl.h	/^lldpctl_conn_t *lldpctl_atom_get_connection(lldpctl_atom_t *atom);$/;"	p	signature:(lldpctl_atom_t *atom)
lldpctl_atom_get_int	lib/atom.c	/^lldpctl_atom_get_int(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
lldpctl_atom_get_int	lib/lldpctl.h	/^long int lldpctl_atom_get_int(lldpctl_atom_t *atom, lldpctl_key_t key);$/;"	p	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
lldpctl_atom_get_str	lib/atom.c	/^lldpctl_atom_get_str(lldpctl_atom_t *atom, lldpctl_key_t key)$/;"	f	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
lldpctl_atom_get_str	lib/lldpctl.h	/^const char *lldpctl_atom_get_str(lldpctl_atom_t *atom, lldpctl_key_t key);$/;"	p	signature:(lldpctl_atom_t *atom, lldpctl_key_t key)
lldpctl_atom_inc_ref	lib/atom.c	/^lldpctl_atom_inc_ref(lldpctl_atom_t *atom)$/;"	f	signature:(lldpctl_atom_t *atom)
lldpctl_atom_inc_ref	lib/lldpctl.h	/^void lldpctl_atom_inc_ref(lldpctl_atom_t *atom);$/;"	p	signature:(lldpctl_atom_t *atom)
lldpctl_atom_iter	lib/atom.c	/^lldpctl_atom_iter(lldpctl_atom_t *atom)$/;"	f	signature:(lldpctl_atom_t *atom)
lldpctl_atom_iter	lib/lldpctl.h	/^lldpctl_atom_iter_t *lldpctl_atom_iter(lldpctl_atom_t *atom);$/;"	p	signature:(lldpctl_atom_t *atom)
lldpctl_atom_iter_next	lib/atom.c	/^lldpctl_atom_iter_next(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)$/;"	f	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
lldpctl_atom_iter_next	lib/lldpctl.h	/^lldpctl_atom_iter_t *lldpctl_atom_iter_next(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter);$/;"	p	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
lldpctl_atom_iter_t	lib/lldpctl.h	/^typedef struct lldpctl_atom_iter_t lldpctl_atom_iter_t;$/;"	t	typeref:struct:lldpctl_atom_iter_t
lldpctl_atom_iter_value	lib/atom.c	/^lldpctl_atom_iter_value(lldpctl_atom_t *atom,  lldpctl_atom_iter_t *iter)$/;"	f	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
lldpctl_atom_iter_value	lib/lldpctl.h	/^lldpctl_atom_t *lldpctl_atom_iter_value(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter);$/;"	p	signature:(lldpctl_atom_t *atom, lldpctl_atom_iter_t *iter)
lldpctl_atom_set	lib/atom.c	/^lldpctl_atom_set(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, lldpctl_atom_t *value)
lldpctl_atom_set	lib/lldpctl.h	/^lldpctl_atom_t *lldpctl_atom_set(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	p	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, lldpctl_atom_t *value)
lldpctl_atom_set_buffer	lib/atom.c	/^lldpctl_atom_set_buffer(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const u_int8_t* value, size_t length)
lldpctl_atom_set_buffer	lib/lldpctl.h	/^lldpctl_atom_t *lldpctl_atom_set_buffer(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	p	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const uint8_t *value, size_t length)
lldpctl_atom_set_int	lib/atom.c	/^lldpctl_atom_set_int(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, long int value)
lldpctl_atom_set_int	lib/lldpctl.h	/^lldpctl_atom_t *lldpctl_atom_set_int(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	p	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, long int value)
lldpctl_atom_set_str	lib/atom.c	/^lldpctl_atom_set_str(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	f	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const char *value)
lldpctl_atom_set_str	lib/lldpctl.h	/^lldpctl_atom_t *lldpctl_atom_set_str(lldpctl_atom_t *atom, lldpctl_key_t key,$/;"	p	signature:(lldpctl_atom_t *atom, lldpctl_key_t key, const char *value)
lldpctl_atom_t	lib/atom.h	/^struct lldpctl_atom_t {$/;"	s
lldpctl_atom_t	lib/lldpctl.h	/^typedef struct lldpctl_atom_t lldpctl_atom_t;$/;"	t	typeref:struct:lldpctl_atom_t
lldpctl_atom_t::buffers	lib/atom.h	/^	TAILQ_HEAD(, atom_buffer) buffers; \/* List of buffers *\/$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::conn	lib/atom.h	/^	lldpctl_conn_t *conn;$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::count	lib/atom.h	/^	int count;$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::create	lib/atom.h	/^	lldpctl_atom_t *(*create)(lldpctl_atom_t *);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::free	lib/atom.h	/^	void                 (*free)(lldpctl_atom_t *);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::get	lib/atom.h	/^	lldpctl_atom_t *(*get)(lldpctl_atom_t *, lldpctl_key_t);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::get_buffer	lib/atom.h	/^	const u_int8_t *(*get_buffer)(lldpctl_atom_t *, lldpctl_key_t, size_t *);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::get_int	lib/atom.h	/^	long int        (*get_int)(lldpctl_atom_t *, lldpctl_key_t);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::get_str	lib/atom.h	/^	const char     *(*get_str)(lldpctl_atom_t *, lldpctl_key_t);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::iter	lib/atom.h	/^	lldpctl_atom_iter_t *(*iter)(lldpctl_atom_t *);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::next	lib/atom.h	/^	lldpctl_atom_iter_t *(*next)(lldpctl_atom_t *, lldpctl_atom_iter_t *);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::set	lib/atom.h	/^	lldpctl_atom_t *(*set)(lldpctl_atom_t *, lldpctl_key_t, lldpctl_atom_t *);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::set_buffer	lib/atom.h	/^	lldpctl_atom_t *(*set_buffer)(lldpctl_atom_t *, lldpctl_key_t, const u_int8_t *, size_t);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::set_int	lib/atom.h	/^	lldpctl_atom_t *(*set_int)(lldpctl_atom_t *, lldpctl_key_t, long int);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::set_str	lib/atom.h	/^	lldpctl_atom_t *(*set_str)(lldpctl_atom_t *, lldpctl_key_t, const char *);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::type	lib/atom.h	/^	atom_t type;$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_atom_t::value	lib/atom.h	/^	lldpctl_atom_t      *(*value)(lldpctl_atom_t *, lldpctl_atom_iter_t *);$/;"	m	struct:lldpctl_atom_t	access:public
lldpctl_c_added	lib/lldpctl.h	/^	lldpctl_c_added,	\/**< This is a new neighbor *\/$/;"	e	enum:__anon7
lldpctl_c_deleted	lib/lldpctl.h	/^	lldpctl_c_deleted,	\/**< The neighbor has been deleted *\/$/;"	e	enum:__anon7
lldpctl_c_updated	lib/lldpctl.h	/^	lldpctl_c_updated,	\/**< The neighbor has been updated *\/$/;"	e	enum:__anon7
lldpctl_change_callback	lib/lldpctl.h	/^typedef void (*lldpctl_change_callback)(lldpctl_conn_t *conn,$/;"	t
lldpctl_change_t	lib/lldpctl.h	/^} lldpctl_change_t;$/;"	t	typeref:enum:__anon7
lldpctl_conn_sync_t	lib/atom.h	/^struct lldpctl_conn_sync_t {$/;"	s
lldpctl_conn_sync_t::fd	lib/atom.h	/^	int fd;			\/* File descriptor to the socket. *\/$/;"	m	struct:lldpctl_conn_sync_t	access:public
lldpctl_conn_t	lib/atom.h	/^struct lldpctl_conn_t {$/;"	s
lldpctl_conn_t	lib/lldpctl.h	/^typedef struct lldpctl_conn_t lldpctl_conn_t;$/;"	t	typeref:struct:lldpctl_conn_t
lldpctl_conn_t::ctlname	lib/atom.h	/^	char *ctlname;  \/\/ socket 地址$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::error	lib/atom.h	/^	lldpctl_error_t error;	\/* 报错回调函数*\/$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::input_buffer	lib/atom.h	/^	uint8_t *input_buffer;	\/* Current input\/output buffer *\/$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::input_buffer_len	lib/atom.h	/^	size_t input_buffer_len;$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::output_buffer	lib/atom.h	/^	uint8_t *output_buffer; \/* Current input\/output buffer *\/$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::output_buffer_len	lib/atom.h	/^	size_t output_buffer_len;$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::recv	lib/atom.h	/^	lldpctl_recv_callback recv; \/* 接收回调函数*\/$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::send	lib/atom.h	/^	lldpctl_send_callback send; \/* 发送回调函数*\/$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::state	lib/atom.h	/^	int state;		\/* Current state *\/$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::state_data	lib/atom.h	/^	char *state_data;	\/* Data attached to the state. It is used to$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::user_data	lib/atom.h	/^	void *user_data;	    \/* Callback user data *\/$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::watch_cb	lib/atom.h	/^	lldpctl_change_callback watch_cb;   \/* 通知回调函数 *\/$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::watch_data	lib/atom.h	/^	void *watch_data;$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_conn_t::watch_triggered	lib/atom.h	/^	int watch_triggered;$/;"	m	struct:lldpctl_conn_t	access:public
lldpctl_error_t	lib/lldpctl.h	/^} lldpctl_error_t;$/;"	t	typeref:enum:__anon5
lldpctl_get_configuration	lib/atom.c	/^lldpctl_get_configuration(lldpctl_conn_t *conn)$/;"	f	signature:(lldpctl_conn_t *conn)
lldpctl_get_configuration	lib/lldpctl.h	/^lldpctl_atom_t *lldpctl_get_configuration(lldpctl_conn_t *conn);$/;"	p	signature:(lldpctl_conn_t *conn)
lldpctl_get_default_port	lib/atom.c	/^lldpctl_get_default_port(lldpctl_conn_t *conn)$/;"	f	signature:(lldpctl_conn_t *conn)
lldpctl_get_default_port	lib/lldpctl.h	/^lldpctl_atom_t *lldpctl_get_default_port(lldpctl_conn_t *conn);$/;"	p	signature:(lldpctl_conn_t *conn)
lldpctl_get_default_transport	lib/connection.c	/^const char* lldpctl_get_default_transport(void)$/;"	f	signature:(void)
lldpctl_get_default_transport	lib/lldpctl.h	/^const char* lldpctl_get_default_transport(void);$/;"	p	signature:(void)
lldpctl_get_interfaces	lib/atom.c	/^lldpctl_atom_t* lldpctl_get_interfaces(lldpctl_conn_t *conn)$/;"	f	signature:(lldpctl_conn_t *conn)
lldpctl_get_interfaces	lib/lldpctl.h	/^lldpctl_atom_t *lldpctl_get_interfaces(lldpctl_conn_t *conn);$/;"	p	signature:(lldpctl_conn_t *conn)
lldpctl_get_local_chassis	lib/atom.c	/^lldpctl_get_local_chassis(lldpctl_conn_t *conn)$/;"	f	signature:(lldpctl_conn_t *conn)
lldpctl_get_local_chassis	lib/lldpctl.h	/^lldpctl_atom_t *lldpctl_get_local_chassis(lldpctl_conn_t *conn);$/;"	p	signature:(lldpctl_conn_t *conn)
lldpctl_get_port	lib/atom.c	/^lldpctl_get_port(lldpctl_atom_t *atom)$/;"	f	signature:(lldpctl_atom_t *atom)
lldpctl_get_port	lib/lldpctl.h	/^lldpctl_atom_t *lldpctl_get_port(lldpctl_atom_t *port);$/;"	p	signature:(lldpctl_atom_t *port)
lldpctl_k_ageout_cnt	lib/lldpctl.h	/^	lldpctl_k_ageout_cnt,	\/**< `(I)` ageout cnt. Only works for a local port. *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_cap_available	lib/lldpctl.h	/^	lldpctl_k_chassis_cap_available, \/**< `(I)` Available capabalities (see `LLDP_CAP_*`) *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_cap_enabled	lib/lldpctl.h	/^	lldpctl_k_chassis_cap_enabled,	 \/**< `(I)` Enabled capabilities (see `LLDP_CAP_*`) *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_descr	lib/lldpctl.h	/^	lldpctl_k_chassis_descr,      \/**< `(S)` The description of this chassis. *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_id	lib/lldpctl.h	/^	lldpctl_k_chassis_id,	      \/**< `(BS)` The ID of this chassis. *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_id_subtype	lib/lldpctl.h	/^	lldpctl_k_chassis_id_subtype, \/**< `(IS)` The subtype ID of this chassis. *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_index	lib/lldpctl.h	/^	lldpctl_k_chassis_index = 1800,   \/**< `(I)` The chassis index. *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_med_cap	lib/lldpctl.h	/^	lldpctl_k_chassis_med_cap,  \/**< `(I)` Available MED capabilitied. See `LLDP_MED_CAP_*` *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_med_inventory_asset	lib/lldpctl.h	/^	lldpctl_k_chassis_med_inventory_asset, \/**< `(S)` LLDP MED inventory "Asset ID" *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_med_inventory_fw	lib/lldpctl.h	/^	lldpctl_k_chassis_med_inventory_fw, \/**< `(S)` LLDP MED inventory "Firmware Revision" *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_med_inventory_hw	lib/lldpctl.h	/^	lldpctl_k_chassis_med_inventory_hw, \/**< `(S)` LLDP MED inventory "Hardware Revision" *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_med_inventory_manuf	lib/lldpctl.h	/^	lldpctl_k_chassis_med_inventory_manuf, \/**< `(S)` LLDP MED inventory "Manufacturer" *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_med_inventory_model	lib/lldpctl.h	/^	lldpctl_k_chassis_med_inventory_model, \/**< `(S)` LLDP MED inventory "Model" *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_med_inventory_sn	lib/lldpctl.h	/^	lldpctl_k_chassis_med_inventory_sn, \/**< `(S)` LLDP MED inventory "Serial Number" *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_med_inventory_sw	lib/lldpctl.h	/^	lldpctl_k_chassis_med_inventory_sw, \/**< `(S)` LLDP MED inventory "Software Revision" *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_med_type	lib/lldpctl.h	/^	lldpctl_k_chassis_med_type = 1900, \/**< `(IS)` Chassis MED type. See `LLDP_MED_CLASS_*` *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_mgmt	lib/lldpctl.h	/^	lldpctl_k_chassis_mgmt,		 \/**< `(AL)` List of management addresses *\/$/;"	e	enum:__anon8
lldpctl_k_chassis_name	lib/lldpctl.h	/^	lldpctl_k_chassis_name,	      \/**< `(S)` The name of this chassis. *\/$/;"	e	enum:__anon8
lldpctl_k_config_advertise_version	lib/lldpctl.h	/^	lldpctl_k_config_advertise_version, \/**< `(I)` Advertise version *\/$/;"	e	enum:__anon8
lldpctl_k_config_bond_slave_src_mac_type	lib/lldpctl.h	/^	lldpctl_k_config_bond_slave_src_mac_type, \/**< `(I,WO)` bond slave src mac type. *\/$/;"	e	enum:__anon8
lldpctl_k_config_chassis_cap_advertise	lib/lldpctl.h	/^	lldpctl_k_config_chassis_cap_advertise, \/**< `(I,WO)` Enable or disable chassis capabilities advertisement *\/$/;"	e	enum:__anon8
lldpctl_k_config_chassis_mgmt_advertise	lib/lldpctl.h	/^	lldpctl_k_config_chassis_mgmt_advertise, \/**< `(I,WO)` Enable or disable management addresses advertisement *\/$/;"	e	enum:__anon8
lldpctl_k_config_cid_pattern	lib/lldpctl.h	/^	lldpctl_k_config_cid_pattern,	\/**< `(S)` Interface pattern to choose the chassis ID *\/$/;"	e	enum:__anon8
lldpctl_k_config_description	lib/lldpctl.h	/^	lldpctl_k_config_description,	\/**< `(S,WON)` Chassis description overridden *\/$/;"	e	enum:__anon8
lldpctl_k_config_fast_start_enabled	lib/lldpctl.h	/^	lldpctl_k_config_fast_start_enabled, \/**< `(I,WO)` Is fast start enabled *\/$/;"	e	enum:__anon8
lldpctl_k_config_fast_start_interval	lib/lldpctl.h	/^	lldpctl_k_config_fast_start_interval, \/**< `(I,WO)` Start fast transmit interval *\/$/;"	e	enum:__anon8
lldpctl_k_config_hostname	lib/lldpctl.h	/^	lldpctl_k_config_hostname,	\/**< `(S,WON)` System name overridden *\/$/;"	e	enum:__anon8
lldpctl_k_config_iface_pattern	lib/lldpctl.h	/^	lldpctl_k_config_iface_pattern, \/**< `(S,WON)` Pattern of enabled interfaces *\/$/;"	e	enum:__anon8
lldpctl_k_config_iface_promisc	lib/lldpctl.h	/^	lldpctl_k_config_iface_promisc,  \/**< `(I,WO)` Enable or disable promiscuous mode on interfaces *\/$/;"	e	enum:__anon8
lldpctl_k_config_ifdescr_update	lib/lldpctl.h	/^	lldpctl_k_config_ifdescr_update, \/**< `(I,WO)` Enable or disable setting interface description *\/$/;"	e	enum:__anon8
lldpctl_k_config_lldp_portid_type	lib/lldpctl.h	/^	lldpctl_k_config_lldp_portid_type, \/**< `(I,WO)` LLDP PortID TLV Subtype *\/$/;"	e	enum:__anon8
lldpctl_k_config_lldpmed_noinventory	lib/lldpctl.h	/^	lldpctl_k_config_lldpmed_noinventory, \/**< `(I)` Disable LLDP-MED inventory *\/$/;"	e	enum:__anon8
lldpctl_k_config_mgmt_pattern	lib/lldpctl.h	/^	lldpctl_k_config_mgmt_pattern, \/**< `(S,WON)` Pattern to choose the management address *\/$/;"	e	enum:__anon8
lldpctl_k_config_paused	lib/lldpctl.h	/^	lldpctl_k_config_paused,	      \/**< `(I)` lldpd is paused *\/$/;"	e	enum:__anon8
lldpctl_k_config_platform	lib/lldpctl.h	/^	lldpctl_k_config_platform,	\/**< `(S,WON)` Platform description overridden (CDP) *\/$/;"	e	enum:__anon8
lldpctl_k_config_receiveonly	lib/lldpctl.h	/^	lldpctl_k_config_receiveonly, \/**< `(I)` Receive only mode *\/$/;"	e	enum:__anon8
lldpctl_k_config_tx_hold	lib/lldpctl.h	/^	lldpctl_k_config_tx_hold, \/**< `(I,WO)` Transmit hold interval. *\/$/;"	e	enum:__anon8
lldpctl_k_config_tx_interval	lib/lldpctl.h	/^	lldpctl_k_config_tx_interval, \/**< `(I,WO)` Transmit interval. When set to -1, it is meant to transmit now. *\/$/;"	e	enum:__anon8
lldpctl_k_custom_tlv	lib/lldpctl.h	/^	lldpctl_k_custom_tlv,			\/** `(AL,WO)` custom TLV **\/$/;"	e	enum:__anon8
lldpctl_k_custom_tlv_op	lib/lldpctl.h	/^	lldpctl_k_custom_tlv_op,		\/**< `(I,WO)` custom TLV operation *\/$/;"	e	enum:__anon8
lldpctl_k_custom_tlv_oui	lib/lldpctl.h	/^	lldpctl_k_custom_tlv_oui,		\/**< `(I,WO)` custom TLV Organizationally Unique Identifier. Default is 0 (3 bytes) *\/$/;"	e	enum:__anon8
lldpctl_k_custom_tlv_oui_info_string	lib/lldpctl.h	/^	lldpctl_k_custom_tlv_oui_info_string,	\/**< `(I,WO)` custom TLV Organizationally Unique Identifier Information String (up to 507 bytes) *\/$/;"	e	enum:__anon8
lldpctl_k_custom_tlv_oui_subtype	lib/lldpctl.h	/^	lldpctl_k_custom_tlv_oui_subtype,	\/**< `(I,WO)` custom TLV subtype. Default is 0 (1 byte) *\/$/;"	e	enum:__anon8
lldpctl_k_custom_tlvs	lib/lldpctl.h	/^	lldpctl_k_custom_tlvs = 5000,		\/**< `(AL)` custom TLVs *\/$/;"	e	enum:__anon8
lldpctl_k_custom_tlvs_clear	lib/lldpctl.h	/^	lldpctl_k_custom_tlvs_clear,		\/** `(I,WO)` clear list of custom TLVs *\/$/;"	e	enum:__anon8
lldpctl_k_delete_cnt	lib/lldpctl.h	/^	lldpctl_k_delete_cnt,	\/**< `(I)` delete cnt. Only works for a local port. *\/$/;"	e	enum:__anon8
lldpctl_k_dot3_power_allocated	lib/lldpctl.h	/^	lldpctl_k_dot3_power_allocated, \/**< `(I,W)` 802.3AT power allocated *\/$/;"	e	enum:__anon8
lldpctl_k_dot3_power_class	lib/lldpctl.h	/^	lldpctl_k_dot3_power_class, \/**< `(IS,W)` Power class. *\/$/;"	e	enum:__anon8
lldpctl_k_dot3_power_devicetype	lib/lldpctl.h	/^	lldpctl_k_dot3_power_devicetype, \/**< `(IS,W)` Device type. See `LLDP_DOT3_POWER_PSE\/PD` *\/$/;"	e	enum:__anon8
lldpctl_k_dot3_power_enabled	lib/lldpctl.h	/^	lldpctl_k_dot3_power_enabled, \/**< `(I,W)` Is MDI power enabled. *\/$/;"	e	enum:__anon8
lldpctl_k_dot3_power_paircontrol	lib/lldpctl.h	/^	lldpctl_k_dot3_power_paircontrol, \/**< `(I,W)` Pair-control enabled? *\/$/;"	e	enum:__anon8
lldpctl_k_dot3_power_pairs	lib/lldpctl.h	/^	lldpctl_k_dot3_power_pairs, \/**< `(IS,W)` See `LLDP_DOT3_POWERPAIRS_*` *\/$/;"	e	enum:__anon8
lldpctl_k_dot3_power_priority	lib/lldpctl.h	/^	lldpctl_k_dot3_power_priority, \/**< `(IS,W)` 802.3AT power priority *\/$/;"	e	enum:__anon8
lldpctl_k_dot3_power_requested	lib/lldpctl.h	/^	lldpctl_k_dot3_power_requested, \/**< `(I,W)` 802.3AT power requested *\/$/;"	e	enum:__anon8
lldpctl_k_dot3_power_source	lib/lldpctl.h	/^	lldpctl_k_dot3_power_source, \/**< `(IS,W)` 802.3AT power source *\/$/;"	e	enum:__anon8
lldpctl_k_dot3_power_supported	lib/lldpctl.h	/^	lldpctl_k_dot3_power_supported, \/**< `(I,W)` Is MDI power supported. *\/$/;"	e	enum:__anon8
lldpctl_k_dot3_power_type	lib/lldpctl.h	/^	lldpctl_k_dot3_power_type, \/**< `(I,W)` 802.3AT power type *\/$/;"	e	enum:__anon8
lldpctl_k_insert_cnt	lib/lldpctl.h	/^	lldpctl_k_insert_cnt,	\/**< `(I)` insert cnt. Only works for a local port. *\/$/;"	e	enum:__anon8
lldpctl_k_interface_name	lib/lldpctl.h	/^	lldpctl_k_interface_name = 1000, \/**< `(S)` The interface name. *\/$/;"	e	enum:__anon8
lldpctl_k_med_civicaddress_type	lib/lldpctl.h	/^	lldpctl_k_med_civicaddress_type, \/**< `(IS,W)` MED civic address type. *\/$/;"	e	enum:__anon8
lldpctl_k_med_civicaddress_value	lib/lldpctl.h	/^	lldpctl_k_med_civicaddress_value, \/**< `(S,W)` MED civic address value. *\/$/;"	e	enum:__anon8
lldpctl_k_med_location_altitude	lib/lldpctl.h	/^	lldpctl_k_med_location_altitude,  \/**< `(S,W)` MED altitude. Only if format is COORD. *\/$/;"	e	enum:__anon8
lldpctl_k_med_location_altitude_unit	lib/lldpctl.h	/^	lldpctl_k_med_location_altitude_unit, \/**< `(S,W)` MED altitude unit. See `LLDP_MED_LOCATION_ALTITUDE_UNIT_*`.$/;"	e	enum:__anon8
lldpctl_k_med_location_ca_elements	lib/lldpctl.h	/^	lldpctl_k_med_location_ca_elements = 2300, \/**< `(AL,WC)` MED civic address elements. Only if format is CIVIC *\/$/;"	e	enum:__anon8
lldpctl_k_med_location_country	lib/lldpctl.h	/^	lldpctl_k_med_location_country = 2200, \/**< `(S,W)` MED country. Only if format is CIVIC. *\/$/;"	e	enum:__anon8
lldpctl_k_med_location_elin	lib/lldpctl.h	/^	lldpctl_k_med_location_elin, \/**< `(S,W)` MED ELIN. Only if format is ELIN. *\/$/;"	e	enum:__anon8
lldpctl_k_med_location_format	lib/lldpctl.h	/^	lldpctl_k_med_location_format, \/**< `(IS,W)` MED location format. See$/;"	e	enum:__anon8
lldpctl_k_med_location_geoid	lib/lldpctl.h	/^	lldpctl_k_med_location_geoid, \/**< `(IS,W)` MED geoid. See `LLDP_MED_LOCATION_GEOID_*`. Only if format is COORD. *\/$/;"	e	enum:__anon8
lldpctl_k_med_location_latitude	lib/lldpctl.h	/^	lldpctl_k_med_location_latitude,  \/**< `(S,W)` MED latitude. Only if format is COORD. *\/$/;"	e	enum:__anon8
lldpctl_k_med_location_longitude	lib/lldpctl.h	/^	lldpctl_k_med_location_longitude, \/**< `(S,W)` MED longitude. Only if format is COORD. *\/$/;"	e	enum:__anon8
lldpctl_k_med_policy_dscp	lib/lldpctl.h	/^	lldpctl_k_med_policy_dscp,     \/**< `(I,W)` MED policy DSCP *\/$/;"	e	enum:__anon8
lldpctl_k_med_policy_priority	lib/lldpctl.h	/^	lldpctl_k_med_policy_priority, \/**< `(I,W)` MED policy priority *\/$/;"	e	enum:__anon8
lldpctl_k_med_policy_tagged	lib/lldpctl.h	/^	lldpctl_k_med_policy_tagged, \/**< `(I,W)` MED policy tagging *\/$/;"	e	enum:__anon8
lldpctl_k_med_policy_type	lib/lldpctl.h	/^	lldpctl_k_med_policy_type, \/**< `(IS,W)` MED policy app type. See `LLDP_MED_APPTYPE_*`. 0 if a policy is not defined. *\/$/;"	e	enum:__anon8
lldpctl_k_med_policy_unknown	lib/lldpctl.h	/^	lldpctl_k_med_policy_unknown, \/**< `(I,W)` Is MED policy defined? *\/$/;"	e	enum:__anon8
lldpctl_k_med_policy_vid	lib/lldpctl.h	/^	lldpctl_k_med_policy_vid,    \/**< `(I,W)` MED policy VID *\/$/;"	e	enum:__anon8
lldpctl_k_med_power_priority	lib/lldpctl.h	/^	lldpctl_k_med_power_priority, \/**< `(IS,W)` LLDP MED power priority. See `LLDP_MED_POW_PRIO_*` *\/$/;"	e	enum:__anon8
lldpctl_k_med_power_source	lib/lldpctl.h	/^	lldpctl_k_med_power_source, \/**< `(IS,W)` LLDP MED power source. See `LLDP_MED_POW_SOURCE_*` *\/$/;"	e	enum:__anon8
lldpctl_k_med_power_type	lib/lldpctl.h	/^	lldpctl_k_med_power_type, \/**< `(IS,W)` LLDP MED power device type. See `LLDP_MED_POW_TYPE_*` *\/$/;"	e	enum:__anon8
lldpctl_k_med_power_val	lib/lldpctl.h	/^	lldpctl_k_med_power_val, \/**< `(I,W)` LLDP MED power value *\/$/;"	e	enum:__anon8
lldpctl_k_mgmt_ip	lib/lldpctl.h	/^	lldpctl_k_mgmt_ip = 3000,	\/**< `(S)` IP address *\/$/;"	e	enum:__anon8
lldpctl_k_pi_id	lib/lldpctl.h	/^	lldpctl_k_pi_id,    \/**< `(B)` PID value *\/$/;"	e	enum:__anon8
lldpctl_k_port_age	lib/lldpctl.h	/^	lldpctl_k_port_age,	   \/**< `(I)`  Age of information, seconds from epoch. *\/$/;"	e	enum:__anon8
lldpctl_k_port_chassis	lib/lldpctl.h	/^	lldpctl_k_port_chassis,	   \/**< `(A)` Chassis associated to the port *\/$/;"	e	enum:__anon8
lldpctl_k_port_descr	lib/lldpctl.h	/^	lldpctl_k_port_descr,	   \/**< `(S,WO)` The description of this port. *\/$/;"	e	enum:__anon8
lldpctl_k_port_dot3_aggregid	lib/lldpctl.h	/^	lldpctl_k_port_dot3_aggregid,   \/**< `(I)` Port aggregation ID *\/$/;"	e	enum:__anon8
lldpctl_k_port_dot3_autoneg_advertised	lib/lldpctl.h	/^	lldpctl_k_port_dot3_autoneg_advertised, \/**< `(I)` Advertised protocols. See `LLDP_DOT3_LINK_AUTONEG_*` *\/$/;"	e	enum:__anon8
lldpctl_k_port_dot3_autoneg_enabled	lib/lldpctl.h	/^	lldpctl_k_port_dot3_autoneg_enabled, \/**< `(I)` Autonegotiation enabled. *\/$/;"	e	enum:__anon8
lldpctl_k_port_dot3_autoneg_support	lib/lldpctl.h	/^	lldpctl_k_port_dot3_autoneg_support, \/**< `(I)` Autonegotiation support. *\/$/;"	e	enum:__anon8
lldpctl_k_port_dot3_mautype	lib/lldpctl.h	/^	lldpctl_k_port_dot3_mautype, \/**< `(IS)` Current MAU type. See `LLDP_DOT3_MAU_*` *\/$/;"	e	enum:__anon8
lldpctl_k_port_dot3_mfs	lib/lldpctl.h	/^	lldpctl_k_port_dot3_mfs = 1300,	   \/**< `(I)` MFS *\/$/;"	e	enum:__anon8
lldpctl_k_port_dot3_power	lib/lldpctl.h	/^	lldpctl_k_port_dot3_power = 1400, \/**< `(A,WO)` Dot3 power related stuff. *\/$/;"	e	enum:__anon8
lldpctl_k_port_hidden	lib/lldpctl.h	/^	lldpctl_k_port_hidden,	   \/**< `(I)` Is this port hidden (or should it be displayed?)? *\/$/;"	e	enum:__anon8
lldpctl_k_port_id	lib/lldpctl.h	/^	lldpctl_k_port_id,	   \/**< `(BS,WO)` The ID of this port. *\/$/;"	e	enum:__anon8
lldpctl_k_port_id_subtype	lib/lldpctl.h	/^	lldpctl_k_port_id_subtype, \/**< `(IS)` The subtype ID of this port.  *\/$/;"	e	enum:__anon8
lldpctl_k_port_index	lib/lldpctl.h	/^	lldpctl_k_port_index,	\/**< `(I)` The port index. Only works for a local port. *\/$/;"	e	enum:__anon8
lldpctl_k_port_med_locations	lib/lldpctl.h	/^	lldpctl_k_port_med_locations = 2100, \/**< `(AL,WO)` MED locations attached to a port. *\/$/;"	e	enum:__anon8
lldpctl_k_port_med_policies	lib/lldpctl.h	/^	lldpctl_k_port_med_policies = 2000, \/**< `(AL,WO)` MED policies attached to a port. *\/$/;"	e	enum:__anon8
lldpctl_k_port_med_power	lib/lldpctl.h	/^	lldpctl_k_port_med_power = 2400, \/**< `(A,WO)` LLDP-MED power related stuff. *\/$/;"	e	enum:__anon8
lldpctl_k_port_name	lib/lldpctl.h	/^	lldpctl_k_port_name = 1100,	\/**< `(S)` The port name. Only works for a local port. *\/$/;"	e	enum:__anon8
lldpctl_k_port_neighbors	lib/lldpctl.h	/^	lldpctl_k_port_neighbors = 1200,$/;"	e	enum:__anon8
lldpctl_k_port_pis	lib/lldpctl.h	/^	lldpctl_k_port_pis = 1700, \/**< `(AL)` List of PIDs *\/$/;"	e	enum:__anon8
lldpctl_k_port_ppvids	lib/lldpctl.h	/^	lldpctl_k_port_ppvids = 1600, \/**< `(AL)` List of PPVIDs *\/$/;"	e	enum:__anon8
lldpctl_k_port_protocol	lib/lldpctl.h	/^	lldpctl_k_port_protocol,   \/**< `(IS)` The protocol that was used to retrieve this information. *\/$/;"	e	enum:__anon8
lldpctl_k_port_status	lib/lldpctl.h	/^	lldpctl_k_port_status,	   \/**< `(IS,WO)` Operational status of this (local) port *\/$/;"	e	enum:__anon8
lldpctl_k_port_vlan_pvid	lib/lldpctl.h	/^	lldpctl_k_port_vlan_pvid = 1500, \/**< `(I)` Primary VLAN ID *\/$/;"	e	enum:__anon8
lldpctl_k_port_vlans	lib/lldpctl.h	/^	lldpctl_k_port_vlans, \/**< `(AL)` List of VLAN *\/$/;"	e	enum:__anon8
lldpctl_k_ppvid_id	lib/lldpctl.h	/^	lldpctl_k_ppvid_id, \/**< `(I)` ID of PPVID *\/$/;"	e	enum:__anon8
lldpctl_k_ppvid_status	lib/lldpctl.h	/^	lldpctl_k_ppvid_status, \/**< `(I)` Status of PPVID (see `LLDP_PPVID_CAP_*`) *\/$/;"	e	enum:__anon8
lldpctl_k_rx_cnt	lib/lldpctl.h	/^	lldpctl_k_rx_cnt,	\/**< `(I)` rx cnt. Only works for a local port. *\/$/;"	e	enum:__anon8
lldpctl_k_rx_discarded_cnt	lib/lldpctl.h	/^	lldpctl_k_rx_discarded_cnt,	\/**< `(I)` discarded cnt. Only works for a local port. *\/$/;"	e	enum:__anon8
lldpctl_k_rx_unrecognized_cnt	lib/lldpctl.h	/^	lldpctl_k_rx_unrecognized_cnt,	\/**< `(I)` unrecognized cnt. Only works for a local port. *\/$/;"	e	enum:__anon8
lldpctl_k_tx_cnt	lib/lldpctl.h	/^	lldpctl_k_tx_cnt = 4000,	\/**< `(I)` tx cnt. Only works for a local port. *\/$/;"	e	enum:__anon8
lldpctl_k_vlan_id	lib/lldpctl.h	/^	lldpctl_k_vlan_id, \/**< `(I)` VLAN ID *\/$/;"	e	enum:__anon8
lldpctl_k_vlan_name	lib/lldpctl.h	/^	lldpctl_k_vlan_name, \/**< `(S)` VLAN name *\/$/;"	e	enum:__anon8
lldpctl_key_get_map	lib/atom.c	/^lldpctl_key_get_map(lldpctl_key_t key)$/;"	f	signature:(lldpctl_key_t key)
lldpctl_key_get_map	lib/lldpctl.h	/^lldpctl_map_t *lldpctl_key_get_map(lldpctl_key_t key);$/;"	p	signature:(lldpctl_key_t key)
lldpctl_key_t	lib/lldpctl.h	/^} lldpctl_key_t;$/;"	t	typeref:enum:__anon8
lldpctl_last_error	lib/errors.c	/^lldpctl_last_error(lldpctl_conn_t *lldpctl)$/;"	f	signature:(lldpctl_conn_t *lldpctl)
lldpctl_last_error	lib/lldpctl.h	/^lldpctl_error_t lldpctl_last_error(lldpctl_conn_t *conn);$/;"	p	signature:(lldpctl_conn_t *conn)
lldpctl_last_strerror	lib/lldpctl.h	365;"	d
lldpctl_log_callback	lib/errors.c	/^lldpctl_log_callback(void (*cb)(int severity, const char *msg))$/;"	f	signature:(void (*cb)(int severity, const char *msg))
lldpctl_log_callback	lib/lldpctl.h	/^void lldpctl_log_callback(void (*cb)(int severity, const char *msg));$/;"	p	signature:(void (*cb)(int severity, const char *msg))
lldpctl_log_level	lib/errors.c	/^lldpctl_log_level(int level)$/;"	f	signature:(int level)
lldpctl_log_level	lib/lldpctl.h	/^void lldpctl_log_level(int level);$/;"	p	signature:(int level)
lldpctl_map_t	lib/lldpctl.h	/^} lldpctl_map_t;$/;"	t	typeref:struct:__anon6
lldpctl_new	lib/connection.c	/^lldpctl_new(lldpctl_send_callback send, lldpctl_recv_callback recv, void *user_data)$/;"	f	signature:(lldpctl_send_callback send, lldpctl_recv_callback recv, void *user_data)
lldpctl_new	lib/lldpctl.h	/^lldpctl_conn_t *lldpctl_new(lldpctl_send_callback send,$/;"	p	signature:(lldpctl_send_callback send, lldpctl_recv_callback recv, void *user_data)
lldpctl_new_name	lib/connection.c	/^lldpctl_conn_t* lldpctl_new_name(const char *ctlname, lldpctl_send_callback send, lldpctl_recv_callback recv, void *user_data)$/;"	f	signature:(const char *ctlname, lldpctl_send_callback send, lldpctl_recv_callback recv, void *user_data)
lldpctl_new_name	lib/lldpctl.h	/^lldpctl_conn_t *lldpctl_new_name(const char *ctlname, lldpctl_send_callback send,$/;"	p	signature:(const char *ctlname, lldpctl_send_callback send, lldpctl_recv_callback recv, void *user_data)
lldpctl_process_conn_buffer	lib/connection.c	/^int lldpctl_process_conn_buffer(lldpctl_conn_t *conn)$/;"	f	signature:(lldpctl_conn_t *conn)
lldpctl_process_conn_buffer	lib/lldpctl.h	/^int lldpctl_process_conn_buffer(lldpctl_conn_t *conn);$/;"	p	signature:(lldpctl_conn_t *conn)
lldpctl_recv	lib/connection.c	/^lldpctl_recv(lldpctl_conn_t *conn, const uint8_t *data, size_t length)$/;"	f	signature:(lldpctl_conn_t *conn, const uint8_t *data, size_t length)
lldpctl_recv	lib/lldpctl.h	/^ssize_t lldpctl_recv(lldpctl_conn_t *conn, const uint8_t *data, size_t length);$/;"	p	signature:(lldpctl_conn_t *conn, const uint8_t *data, size_t length)
lldpctl_recv_callback	lib/lldpctl.h	/^typedef ssize_t (*lldpctl_recv_callback)(lldpctl_conn_t *conn,$/;"	t
lldpctl_release	lib/connection.c	/^lldpctl_release(lldpctl_conn_t *conn)$/;"	f	signature:(lldpctl_conn_t *conn)
lldpctl_release	lib/lldpctl.h	/^int lldpctl_release(lldpctl_conn_t *conn);$/;"	p	signature:(lldpctl_conn_t *conn)
lldpctl_send	lib/connection.c	/^ssize_t lldpctl_send(lldpctl_conn_t *conn)$/;"	f	signature:(lldpctl_conn_t *conn)
lldpctl_send	lib/lldpctl.h	/^ssize_t lldpctl_send(lldpctl_conn_t *conn);$/;"	p	signature:(lldpctl_conn_t *conn)
lldpctl_send_callback	lib/lldpctl.h	/^typedef ssize_t (*lldpctl_send_callback)(lldpctl_conn_t *conn,$/;"	t
lldpctl_strerror	lib/errors.c	/^lldpctl_strerror(lldpctl_error_t error)$/;"	f	signature:(lldpctl_error_t error)
lldpctl_strerror	lib/lldpctl.h	/^const char *lldpctl_strerror(lldpctl_error_t error);$/;"	p	signature:(lldpctl_error_t error)
lldpctl_watch	lib/atom.c	/^lldpctl_watch(lldpctl_conn_t *conn)$/;"	f	signature:(lldpctl_conn_t *conn)
lldpctl_watch	lib/lldpctl.h	/^int lldpctl_watch(lldpctl_conn_t *conn);$/;"	p	signature:(lldpctl_conn_t *conn)
lldpctl_watch_callback	lib/atom.c	/^lldpctl_watch_callback(lldpctl_conn_t *conn,$/;"	f	signature:(lldpctl_conn_t *conn, lldpctl_change_callback cb, void *data)
lldpctl_watch_callback	lib/lldpctl.h	/^int lldpctl_watch_callback(lldpctl_conn_t *conn,$/;"	p	signature:(lldpctl_conn_t *conn, lldpctl_change_callback cb, void *data)
lldpd	daemon/lldpd.h	/^struct lldpd {$/;"	s
lldpd::g_base	daemon/lldpd.h	/^	struct event_base	*g_base;        \/\/ 指向一个默认的event_base$/;"	m	struct:lldpd	typeref:struct:lldpd::event_base	access:public
lldpd::g_chassis	daemon/lldpd.h	/^	TAILQ_HEAD(, lldpd_chassis) g_chassis;      \/\/ 保存系统功能的尾队列头$/;"	m	struct:lldpd	access:public
lldpd::g_cleanup_timer	daemon/lldpd.h	/^	struct event		*g_cleanup_timer;$/;"	m	struct:lldpd	typeref:struct:lldpd::event	access:public
lldpd::g_config	daemon/lldpd.h	/^	struct lldpd_config	 g_config;      \/\/ lldp参数配置控制块$/;"	m	struct:lldpd	typeref:struct:lldpd::lldpd_config	access:public
lldpd::g_ctl	daemon/lldpd.h	/^	int			 g_ctl;                 \/\/ 记录lldpd cli unix-dimain fd$/;"	m	struct:lldpd	access:public
lldpd::g_ctlname	daemon/lldpd.h	/^	const char		*g_ctlname;         \/\/ lldpd cli 本地服务器地址 \/var\/run\/lldpd.socket$/;"	m	struct:lldpd	access:public
lldpd::g_default_local_port	daemon/lldpd.h	/^	struct lldpd_port	*g_default_local_port;  \/\/ 指向一个缺省的端口控制块尾队列元素$/;"	m	struct:lldpd	typeref:struct:lldpd::lldpd_port	access:public
lldpd::g_hardware	daemon/lldpd.h	/^	TAILQ_HEAD(, lldpd_hardware) g_hardware;$/;"	m	struct:lldpd	access:public
lldpd::g_iface_cb	daemon/lldpd.h	/^	void(*g_iface_cb)(struct lldpd *);	      \/* Called when there is an interface change 接口变化后的回调函数 *\/$/;"	m	struct:lldpd	access:public
lldpd::g_iface_event	daemon/lldpd.h	/^	struct event		*g_iface_event; \/* Triggered when there is an interface change *\/$/;"	m	struct:lldpd	typeref:struct:lldpd::event	access:public
lldpd::g_iface_timer_event	daemon/lldpd.h	/^	struct event		*g_iface_timer_event; \/* Triggered one second after last interface change *\/$/;"	m	struct:lldpd	typeref:struct:lldpd::event	access:public
lldpd::g_lastrid	daemon/lldpd.h	/^	int			 g_lastrid;$/;"	m	struct:lldpd	access:public
lldpd::g_lsb_release	daemon/lldpd.h	/^	char			*g_lsb_release;$/;"	m	struct:lldpd	access:public
lldpd::g_main_loop	daemon/lldpd.h	/^	struct event		*g_main_loop;   \/\/ 纯手动触发事件句柄$/;"	m	struct:lldpd	typeref:struct:lldpd::event	access:public
lldpd::g_netlink	daemon/lldpd.h	/^	struct lldpd_netlink	*g_netlink; \/\/ netlink控制块$/;"	m	struct:lldpd	typeref:struct:lldpd::lldpd_netlink	access:public
lldpd::g_protocols	daemon/lldpd.h	/^	struct protocol		*g_protocols;   \/\/ 指向lldp细分协议列表$/;"	m	struct:lldpd	typeref:struct:lldpd::protocol	access:public
lldpd::g_snmp	daemon/lldpd.h	/^	int			 g_snmp;                \/\/ snmp使能标志$/;"	m	struct:lldpd	access:public
lldpd::g_snmp_agentx	daemon/lldpd.h	/^	const char		*g_snmp_agentx;     \/\/ snmp本地服务器地址 \/var\/agentX\/master$/;"	m	struct:lldpd	access:public
lldpd::g_snmp_fds	daemon/lldpd.h	/^	void			*g_snmp_fds;        \/\/ 指向snmp-fds尾队列头$/;"	m	struct:lldpd	access:public
lldpd::g_snmp_timeout	daemon/lldpd.h	/^	struct event		*g_snmp_timeout;\/\/ snmp超时事件句柄$/;"	m	struct:lldpd	typeref:struct:lldpd::event	access:public
lldpd::g_sock	daemon/lldpd.h	/^	int			 g_sock;                \/\/ 记录ioctl fd$/;"	m	struct:lldpd	access:public
lldpd_address	lldpd-structs.h	/^union lldpd_address {$/;"	u
lldpd_address::inet	lldpd-structs.h	/^	struct in_addr		inet;$/;"	m	union:lldpd_address	typeref:struct:lldpd_address::in_addr	access:public
lldpd_address::inet6	lldpd-structs.h	/^	struct in6_addr		inet6;$/;"	m	union:lldpd_address	typeref:struct:lldpd_address::in6_addr	access:public
lldpd_address::octets	lldpd-structs.h	/^	u_int8_t		octets[LLDPD_MGMT_MAXADDRSIZE]; \/* network byte order! *\/$/;"	m	union:lldpd_address	access:public
lldpd_af	lldpd-structs.h	/^lldpd_af(int af)$/;"	f	signature:(int af)
lldpd_af_from_lldp_proto	daemon/protocols/lldp.c	/^lldpd_af_from_lldp_proto(int proto)$/;"	f	file:	signature:(int proto)
lldpd_af_to_lldp_proto	daemon/protocols/lldp.c	/^lldpd_af_to_lldp_proto(int af)$/;"	f	file:	signature:(int af)
lldpd_all_chassis_cleanup	daemon/lldpd.c	/^static void lldpd_all_chassis_cleanup(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
lldpd_alloc_default_local_port	daemon/lldpd.c	/^static void lldpd_alloc_default_local_port(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
lldpd_alloc_hardware	daemon/lldpd.c	/^lldpd_alloc_hardware(struct lldpd *cfg, char *name, int index)$/;"	f	signature:(struct lldpd *cfg, char *name, int index)
lldpd_alloc_hardware	daemon/lldpd.h	/^struct lldpd_hardware	*lldpd_alloc_hardware(struct lldpd *, char *, int);$/;"	p	signature:(struct lldpd *, char *, int)
lldpd_alloc_mgmt	daemon/lldpd.c	/^lldpd_alloc_mgmt(int family, void *addrptr, size_t addrsize, u_int32_t iface)$/;"	f	signature:(int family, void *addrptr, size_t addrsize, u_int32_t iface)
lldpd_alloc_mgmt	daemon/lldpd.h	/^struct lldpd_mgmt *lldpd_alloc_mgmt(int family, void *addr, size_t addrsize, u_int32_t iface);$/;"	p	signature:(int family, void *addr, size_t addrsize, u_int32_t iface)
lldpd_chassis	lldpd-structs.h	/^MARSHAL_END(lldpd_chassis);$/;"	v
lldpd_chassis	lldpd-structs.h	/^struct lldpd_chassis {$/;"	s
lldpd_chassis::c_cap_available	lldpd-structs.h	/^	u_int16_t		 c_cap_available;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_cap_enabled	lldpd-structs.h	/^	u_int16_t		 c_cap_enabled;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_descr	lldpd-structs.h	/^	char			*c_descr;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_chassis) c_entries;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_id	lldpd-structs.h	/^	char			*c_id;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_id_len	lldpd-structs.h	/^	int			 c_id_len;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_id_subtype	lldpd-structs.h	/^	u_int8_t	 	 c_id_subtype;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_index	lldpd-structs.h	/^	u_int16_t		 c_index;    \/* Monotonic index *\/$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_med_asset	lldpd-structs.h	/^	char			*c_med_asset;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_med_cap_available	lldpd-structs.h	/^	u_int16_t		 c_med_cap_available;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_med_fw	lldpd-structs.h	/^	char			*c_med_fw;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_med_hw	lldpd-structs.h	/^	char			*c_med_hw;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_med_manuf	lldpd-structs.h	/^	char			*c_med_manuf;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_med_model	lldpd-structs.h	/^	char			*c_med_model;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_med_sn	lldpd-structs.h	/^	char			*c_med_sn;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_med_sw	lldpd-structs.h	/^	char			*c_med_sw;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_med_type	lldpd-structs.h	/^	u_int8_t		 c_med_type;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_mgmt	lldpd-structs.h	/^	TAILQ_HEAD(, lldpd_mgmt) c_mgmt;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_name	lldpd-structs.h	/^	char			*c_name;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_protocol	lldpd-structs.h	/^	u_int8_t		 c_protocol; \/* Protocol used to get this chassis *\/$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_refcount	lldpd-structs.h	/^	u_int16_t		 c_refcount; \/* Reference count by ports *\/$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis::c_ttl	lldpd-structs.h	/^	u_int16_t		 c_ttl;$/;"	m	struct:lldpd_chassis	access:public
lldpd_chassis_cleanup	lldpd-structs.c	/^lldpd_chassis_cleanup(struct lldpd_chassis *chassis, int all)$/;"	f	signature:(struct lldpd_chassis *chassis, int all)
lldpd_chassis_cleanup	lldpd-structs.h	/^void	 lldpd_chassis_cleanup(struct lldpd_chassis *, int);$/;"	p	signature:(struct lldpd_chassis *, int)
lldpd_chassis_mgmt_cleanup	lldpd-structs.c	/^lldpd_chassis_mgmt_cleanup(struct lldpd_chassis *chassis)$/;"	f	signature:(struct lldpd_chassis *chassis)
lldpd_chassis_mgmt_cleanup	lldpd-structs.h	/^void	 lldpd_chassis_mgmt_cleanup(struct lldpd_chassis *);$/;"	p	signature:(struct lldpd_chassis *)
lldpd_cleanup	daemon/lldpd.c	/^void lldpd_cleanup(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
lldpd_cleanup	daemon/lldpd.h	/^void	 lldpd_cleanup(struct lldpd *);$/;"	p	signature:(struct lldpd *)
lldpd_clone_port	daemon/lldpd.c	/^lldpd_clone_port(struct lldpd_port *destination, struct lldpd_port *source)$/;"	f	file:	signature:(struct lldpd_port *destination, struct lldpd_port *source)
lldpd_config	lldpd-structs.h	/^MARSHAL_END(lldpd_config);$/;"	v
lldpd_config	lldpd-structs.h	/^struct lldpd_config {$/;"	s
lldpd_config::c_advertise_version	lldpd-structs.h	/^	int c_advertise_version; \/* Should the precise version be advertised? *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_bond_slave_src_mac_type	lldpd-structs.h	/^	int c_bond_slave_src_mac_type; \/* Src mac type in lldp frames over bond$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_cap_advertise	lldpd-structs.h	/^	int c_cap_advertise;	 \/* Chassis capabilities advertisement *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_cid_pattern	lldpd-structs.h	/^	char *c_cid_pattern;	\/* Pattern to match interfaces to use for chassis ID *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_description	lldpd-structs.h	/^	char *c_description;	\/* Override chassis description *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_enable_fast_start	lldpd-structs.h	/^	int c_enable_fast_start; \/* enable fast start *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_hostname	lldpd-structs.h	/^	char *c_hostname;	\/* Override system name *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_iface_pattern	lldpd-structs.h	/^	char *c_iface_pattern;	\/* Pattern to match interfaces to use 包含所有接口名的字符串 *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_lldp_portid_type	lldpd-structs.h	/^	int c_lldp_portid_type; \/* The PortID type *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_max_neighbors	lldpd-structs.h	/^	int c_max_neighbors;	\/* Maximum number of neighbors (per protocol) *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_mgmt_advertise	lldpd-structs.h	/^	int c_mgmt_advertise;	 \/* Management addresses advertisement *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_mgmt_pattern	lldpd-structs.h	/^	char *c_mgmt_pattern;	\/* Pattern to match a management address *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_noinventory	lldpd-structs.h	/^	int c_noinventory;	\/* Don't send inventory with LLDP-MED *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_paused	lldpd-structs.h	/^	int c_paused;	        \/* lldpd is paused *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_platform	lldpd-structs.h	/^	char *c_platform;	\/* Override platform description (for CDP) *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_promisc	lldpd-structs.h	/^	int c_promisc;		 \/* Interfaces should be in promiscuous mode *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_receiveonly	lldpd-structs.h	/^	int c_receiveonly;	\/* Receive only mode *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_set_ifdescr	lldpd-structs.h	/^	int c_set_ifdescr;	 \/* Set interface description *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_smart	lldpd-structs.h	/^	int c_smart;		\/* Bitmask for smart configuration (see SMART_*) *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_tx_fast_init	lldpd-structs.h	/^	int c_tx_fast_init;	\/* Num of lldpd lldppdu's for fast start *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_tx_fast_interval	lldpd-structs.h	/^	int c_tx_fast_interval;	\/* Time intr between sends during fast start *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_tx_hold	lldpd-structs.h	/^	int c_tx_hold;		\/* Transmit hold *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config::c_tx_interval	lldpd-structs.h	/^	int c_tx_interval;	\/* Transmit interval *\/$/;"	m	struct:lldpd_config	access:public
lldpd_config_cleanup	lldpd-structs.c	/^lldpd_config_cleanup(struct lldpd_config *config)$/;"	f	signature:(struct lldpd_config *config)
lldpd_config_cleanup	lldpd-structs.h	/^void	 lldpd_config_cleanup(struct lldpd_config *);$/;"	p	signature:(struct lldpd_config *)
lldpd_configure	daemon/lldpd.c	/^static pid_t lldpd_configure(int use_syslog, int debug, const char *path, const char *ctlname)$/;"	f	file:	signature:(int use_syslog, int debug, const char *path, const char *ctlname)
lldpd_count_neighbors	daemon/lldpd.c	/^static void lldpd_count_neighbors(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
lldpd_custom	lldpd-structs.h	/^MARSHAL_END(lldpd_custom);$/;"	v
lldpd_custom	lldpd-structs.h	/^struct lldpd_custom {$/;"	s
lldpd_custom::next	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_custom)	next;	\/* Pointer to next custom TLV *\/$/;"	m	struct:lldpd_custom	access:public
lldpd_custom::oui	lldpd-structs.h	/^	u_int8_t		oui[LLDP_TLV_ORG_OUI_LEN];$/;"	m	struct:lldpd_custom	access:public
lldpd_custom::oui_info	lldpd-structs.h	/^	u_int8_t		*oui_info;$/;"	m	struct:lldpd_custom	access:public
lldpd_custom::oui_info_len	lldpd-structs.h	/^	int			oui_info_len;$/;"	m	struct:lldpd_custom	access:public
lldpd_custom::subtype	lldpd-structs.h	/^	u_int8_t		subtype;$/;"	m	struct:lldpd_custom	access:public
lldpd_custom_list_cleanup	lldpd-structs.c	/^lldpd_custom_list_cleanup(struct lldpd_port *port)$/;"	f	signature:(struct lldpd_port *port)
lldpd_custom_list_cleanup	lldpd-structs.h	/^void     lldpd_custom_list_cleanup(struct lldpd_port *);$/;"	p	signature:(struct lldpd_port *)
lldpd_custom_tlv_add	lldpd-structs.c	/^lldpd_custom_tlv_add(struct lldpd_port *port, struct lldpd_custom *curr)$/;"	f	signature:(struct lldpd_port *port, struct lldpd_custom *curr)
lldpd_custom_tlv_add	lldpd-structs.h	/^void     lldpd_custom_tlv_add(struct lldpd_port *, struct lldpd_custom *);$/;"	p	signature:(struct lldpd_port *, struct lldpd_custom *)
lldpd_custom_tlv_cleanup	lldpd-structs.c	/^lldpd_custom_tlv_cleanup(struct lldpd_port *port, struct lldpd_custom *curr)$/;"	f	signature:(struct lldpd_port *port, struct lldpd_custom *curr)
lldpd_custom_tlv_cleanup	lldpd-structs.h	/^void     lldpd_custom_tlv_cleanup(struct lldpd_port *, struct lldpd_custom *);$/;"	p	signature:(struct lldpd_port *, struct lldpd_custom *)
lldpd_decode	daemon/lldpd.c	/^lldpd_decode(struct lldpd *cfg, char *frame, int s,$/;"	f	file:	signature:(struct lldpd *cfg, char *frame, int s, struct lldpd_hardware *hardware)
lldpd_display_neighbors	daemon/lldpd.c	/^lldpd_display_neighbors(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
lldpd_dot3_macphy	lldpd-structs.h	/^struct lldpd_dot3_macphy {$/;"	s
lldpd_dot3_macphy::autoneg_advertised	lldpd-structs.h	/^	u_int16_t		 autoneg_advertised;$/;"	m	struct:lldpd_dot3_macphy	access:public
lldpd_dot3_macphy::autoneg_enabled	lldpd-structs.h	/^	u_int8_t		 autoneg_enabled;$/;"	m	struct:lldpd_dot3_macphy	access:public
lldpd_dot3_macphy::autoneg_support	lldpd-structs.h	/^	u_int8_t		 autoneg_support;$/;"	m	struct:lldpd_dot3_macphy	access:public
lldpd_dot3_macphy::mau_type	lldpd-structs.h	/^	u_int16_t		 mau_type;$/;"	m	struct:lldpd_dot3_macphy	access:public
lldpd_dot3_power	lldpd-structs.h	/^MARSHAL(lldpd_dot3_power);$/;"	v
lldpd_dot3_power	lldpd-structs.h	/^struct lldpd_dot3_power {$/;"	s
lldpd_dot3_power::allocated	lldpd-structs.h	/^	u_int16_t		allocated;$/;"	m	struct:lldpd_dot3_power	access:public
lldpd_dot3_power::devicetype	lldpd-structs.h	/^	u_int8_t		devicetype;$/;"	m	struct:lldpd_dot3_power	access:public
lldpd_dot3_power::enabled	lldpd-structs.h	/^	u_int8_t		enabled;$/;"	m	struct:lldpd_dot3_power	access:public
lldpd_dot3_power::paircontrol	lldpd-structs.h	/^	u_int8_t		paircontrol;$/;"	m	struct:lldpd_dot3_power	access:public
lldpd_dot3_power::pairs	lldpd-structs.h	/^	u_int8_t		pairs;$/;"	m	struct:lldpd_dot3_power	access:public
lldpd_dot3_power::powertype	lldpd-structs.h	/^	u_int8_t		powertype; \/* If set to LLDP_DOT3_POWER_8023AT_OFF,$/;"	m	struct:lldpd_dot3_power	access:public
lldpd_dot3_power::priority	lldpd-structs.h	/^	u_int8_t		priority;$/;"	m	struct:lldpd_dot3_power	access:public
lldpd_dot3_power::requested	lldpd-structs.h	/^	u_int16_t		requested;$/;"	m	struct:lldpd_dot3_power	access:public
lldpd_dot3_power::source	lldpd-structs.h	/^	u_int8_t		source;$/;"	m	struct:lldpd_dot3_power	access:public
lldpd_dot3_power::supported	lldpd-structs.h	/^	u_int8_t		supported;$/;"	m	struct:lldpd_dot3_power	access:public
lldpd_events	daemon/event.c	/^struct lldpd_events {$/;"	s	file:
lldpd_events::TAILQ_ENTRY	daemon/event.c	/^	TAILQ_ENTRY(lldpd_events) next;$/;"	p	struct:lldpd_events	file:	access:public
lldpd_events::ev	daemon/event.c	/^	struct event *ev;$/;"	m	struct:lldpd_events	typeref:struct:lldpd_events::event	file:	access:public
lldpd_exit	daemon/lldpd.c	/^lldpd_exit(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
lldpd_frame	lldpd-structs.h	/^struct lldpd_frame {$/;"	s
lldpd_frame::frame	lldpd-structs.h	/^	unsigned char frame[1];$/;"	m	struct:lldpd_frame	access:public
lldpd_frame::size	lldpd-structs.h	/^	int size;$/;"	m	struct:lldpd_frame	access:public
lldpd_get_hardware	daemon/lldpd.c	/^lldpd_get_hardware(struct lldpd *cfg, char *name, int index)$/;"	f	signature:(struct lldpd *cfg, char *name, int index)
lldpd_get_hardware	daemon/lldpd.h	/^struct lldpd_hardware	*lldpd_get_hardware(struct lldpd *,$/;"	p	signature:(struct lldpd *, char *, int)
lldpd_get_lsb_release	daemon/lldpd.c	/^lldpd_get_lsb_release() {$/;"	f	file:
lldpd_get_os_release	daemon/lldpd.c	/^lldpd_get_os_release() {$/;"	f	file:
lldpd_guess_type	daemon/lldpd.c	/^lldpd_guess_type(struct lldpd *cfg, char *frame, int s)$/;"	f	file:	signature:(struct lldpd *cfg, char *frame, int s)
lldpd_hardware	lldpd-structs.h	/^MARSHAL_END(lldpd_hardware);$/;"	v
lldpd_hardware	lldpd-structs.h	/^struct lldpd_hardware {$/;"	s
lldpd_hardware::h_ageout_cnt	lldpd-structs.h	/^	u_int64_t		 h_ageout_cnt;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_cfg	lldpd-structs.h	/^	struct lldpd		*h_cfg;	    \/* Pointer to main configuration *\/$/;"	m	struct:lldpd_hardware	typeref:struct:lldpd_hardware::lldpd	access:public
lldpd_hardware::h_data	lldpd-structs.h	/^	void			*h_data;    \/* Hardware-dependent data *\/$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_delete_cnt	lldpd-structs.h	/^	u_int64_t		 h_delete_cnt;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_drop_cnt	lldpd-structs.h	/^	u_int64_t		 h_drop_cnt;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_hardware)	 h_entries;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_flags	lldpd-structs.h	/^	int			 h_flags; \/* Packets will be sent only$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_ifindex	lldpd-structs.h	/^	int			 h_ifindex; \/* Interface index, used by SNMP *\/$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_ifname	lldpd-structs.h	/^	char			 h_ifname[IFNAMSIZ]; \/* Should be unique *\/$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_insert_cnt	lldpd-structs.h	/^	u_int64_t		 h_insert_cnt;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_lchassis_previous_id	lldpd-structs.h	/^	char			*h_lchassis_previous_id;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_lchassis_previous_id_len	lldpd-structs.h	/^	int			 h_lchassis_previous_id_len;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_lchassis_previous_id_subtype	lldpd-structs.h	/^	u_int8_t	 	 h_lchassis_previous_id_subtype;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_lladdr	lldpd-structs.h	/^	u_int8_t		 h_lladdr[ETHER_ADDR_LEN];$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_lport	lldpd-structs.h	/^	struct lldpd_port	 h_lport;  \/* Port attached to this hardware port *\/$/;"	m	struct:lldpd_hardware	typeref:struct:lldpd_hardware::lldpd_port	access:public
lldpd_hardware::h_lport_previous	lldpd-structs.h	/^	void			*h_lport_previous;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_lport_previous_id	lldpd-structs.h	/^	char			*h_lport_previous_id;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_lport_previous_id_len	lldpd-structs.h	/^	int			 h_lport_previous_id_len;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_lport_previous_id_subtype	lldpd-structs.h	/^	u_int8_t		 h_lport_previous_id_subtype;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_lport_previous_len	lldpd-structs.h	/^	ssize_t			 h_lport_previous_len;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_mangle	lldpd-structs.h	/^	int			 h_mangle;  \/* 1 if we have to mangle the MAC address *\/$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_mtu	lldpd-structs.h	/^	int			 h_mtu;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_ops	lldpd-structs.h	/^	struct lldpd_ops	*h_ops;	    \/* Hardware-dependent functions *\/$/;"	m	struct:lldpd_hardware	typeref:struct:lldpd_hardware::lldpd_ops	access:public
lldpd_hardware::h_recv	lldpd-structs.h	/^	void			*h_recv;    \/* FD for reception *\/$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_rports	lldpd-structs.h	/^	TAILQ_HEAD(, lldpd_port) h_rports; \/* Remote ports *\/$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_rx_cnt	lldpd-structs.h	/^	u_int64_t		 h_rx_cnt;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_rx_discarded_cnt	lldpd-structs.h	/^	u_int64_t		 h_rx_discarded_cnt;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_rx_unrecognized_cnt	lldpd-structs.h	/^	u_int64_t		 h_rx_unrecognized_cnt;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_sendfd	lldpd-structs.h	/^	int			 h_sendfd;  \/* FD for sending, only used by h_ops *\/$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_timer	lldpd-structs.h	/^	void			*h_timer;   \/* Timer for this port *\/$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_tx_cnt	lldpd-structs.h	/^	u_int64_t		 h_tx_cnt;$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware::h_tx_fast	lldpd-structs.h	/^	int			h_tx_fast; \/* current tx fast start count *\/$/;"	m	struct:lldpd_hardware	access:public
lldpd_hardware_cleanup	daemon/lldpd.c	/^lldpd_hardware_cleanup(struct lldpd *cfg, struct lldpd_hardware *hardware)$/;"	f	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware)
lldpd_hardware_cleanup	daemon/lldpd.h	/^void	 lldpd_hardware_cleanup(struct lldpd*, struct lldpd_hardware *);$/;"	p	signature:(struct lldpd*, struct lldpd_hardware *)
lldpd_hide_all	daemon/lldpd.c	/^lldpd_hide_all(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
lldpd_hide_ports	daemon/lldpd.c	/^lldpd_hide_ports(struct lldpd *cfg, struct lldpd_hardware *hardware, int mask) {$/;"	f	file:	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware, int mask)
lldpd_interface	lldpd-structs.h	/^MARSHAL_END(lldpd_interface);$/;"	v
lldpd_interface	lldpd-structs.h	/^struct lldpd_interface {$/;"	s
lldpd_interface::name	lldpd-structs.h	/^	char			*name;$/;"	m	struct:lldpd_interface	access:public
lldpd_interface::next	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_interface) next;$/;"	m	struct:lldpd_interface	access:public
lldpd_loop	daemon/lldpd.c	/^void lldpd_loop(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
lldpd_loop	daemon/lldpd.h	/^void	 lldpd_loop(struct lldpd *);$/;"	p	signature:(struct lldpd *)
lldpd_main	daemon/lldpd.c	/^lldpd_main(int argc, char *argv[], char *envp[])$/;"	f	signature:(int argc, char *argv[], char *envp[])
lldpd_main	daemon/lldpd.h	/^int	 lldpd_main(int, char **, char **);$/;"	p	signature:(int, char **, char **)
lldpd_med	daemon/lldpd.c	/^lldpd_med(struct lldpd_chassis *chassis)$/;"	f	file:	signature:(struct lldpd_chassis *chassis)
lldpd_med_loc	lldpd-structs.h	/^MARSHAL_END(lldpd_med_loc);$/;"	v
lldpd_med_loc	lldpd-structs.h	/^struct lldpd_med_loc {$/;"	s
lldpd_med_loc::data	lldpd-structs.h	/^	char			*data;$/;"	m	struct:lldpd_med_loc	access:public
lldpd_med_loc::data_len	lldpd-structs.h	/^	int			 data_len;$/;"	m	struct:lldpd_med_loc	access:public
lldpd_med_loc::format	lldpd-structs.h	/^	u_int8_t		 format;$/;"	m	struct:lldpd_med_loc	access:public
lldpd_med_loc::index	lldpd-structs.h	/^	u_int8_t		 index; \/* Not used. *\/$/;"	m	struct:lldpd_med_loc	access:public
lldpd_med_policy	lldpd-structs.h	/^MARSHAL(lldpd_med_policy);$/;"	v
lldpd_med_policy	lldpd-structs.h	/^struct lldpd_med_policy {$/;"	s
lldpd_med_policy::dscp	lldpd-structs.h	/^	u_int8_t		 dscp;$/;"	m	struct:lldpd_med_policy	access:public
lldpd_med_policy::index	lldpd-structs.h	/^	u_int8_t		 index; \/* Not used. *\/$/;"	m	struct:lldpd_med_policy	access:public
lldpd_med_policy::priority	lldpd-structs.h	/^	u_int8_t		 priority;$/;"	m	struct:lldpd_med_policy	access:public
lldpd_med_policy::tagged	lldpd-structs.h	/^	u_int8_t		 tagged;$/;"	m	struct:lldpd_med_policy	access:public
lldpd_med_policy::type	lldpd-structs.h	/^	u_int8_t		 type;$/;"	m	struct:lldpd_med_policy	access:public
lldpd_med_policy::unknown	lldpd-structs.h	/^	u_int8_t		 unknown;$/;"	m	struct:lldpd_med_policy	access:public
lldpd_med_policy::vid	lldpd-structs.h	/^	u_int16_t		 vid;$/;"	m	struct:lldpd_med_policy	access:public
lldpd_med_power	lldpd-structs.h	/^MARSHAL(lldpd_med_power);$/;"	v
lldpd_med_power	lldpd-structs.h	/^struct lldpd_med_power {$/;"	s
lldpd_med_power::devicetype	lldpd-structs.h	/^	u_int8_t		 devicetype; \/* PD or PSE *\/$/;"	m	struct:lldpd_med_power	access:public
lldpd_med_power::priority	lldpd-structs.h	/^	u_int8_t		 priority;$/;"	m	struct:lldpd_med_power	access:public
lldpd_med_power::source	lldpd-structs.h	/^	u_int8_t		 source;$/;"	m	struct:lldpd_med_power	access:public
lldpd_med_power::val	lldpd-structs.h	/^	u_int16_t		 val;$/;"	m	struct:lldpd_med_power	access:public
lldpd_mgmt	lldpd-structs.h	/^MARSHAL_END(lldpd_mgmt);$/;"	v
lldpd_mgmt	lldpd-structs.h	/^struct lldpd_mgmt {$/;"	s
lldpd_mgmt::m_addr	lldpd-structs.h	/^	union lldpd_address	m_addr;$/;"	m	struct:lldpd_mgmt	typeref:union:lldpd_mgmt::lldpd_address	access:public
lldpd_mgmt::m_addrsize	lldpd-structs.h	/^	size_t 			m_addrsize;$/;"	m	struct:lldpd_mgmt	access:public
lldpd_mgmt::m_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_mgmt) m_entries;$/;"	m	struct:lldpd_mgmt	access:public
lldpd_mgmt::m_family	lldpd-structs.h	/^	int			m_family;$/;"	m	struct:lldpd_mgmt	access:public
lldpd_mgmt::m_iface	lldpd-structs.h	/^	u_int32_t		m_iface;$/;"	m	struct:lldpd_mgmt	access:public
lldpd_move_chassis	daemon/lldpd.c	/^lldpd_move_chassis(struct lldpd_chassis *ochassis,$/;"	f	file:	signature:(struct lldpd_chassis *ochassis, struct lldpd_chassis *chassis)
lldpd_neighbor_change	lldpd-structs.h	/^MARSHAL_END(lldpd_neighbor_change);$/;"	v
lldpd_neighbor_change	lldpd-structs.h	/^struct lldpd_neighbor_change {$/;"	s
lldpd_neighbor_change::ifname	lldpd-structs.h	/^	char *ifname;$/;"	m	struct:lldpd_neighbor_change	access:public
lldpd_neighbor_change::neighbor	lldpd-structs.h	/^	struct lldpd_port *neighbor;$/;"	m	struct:lldpd_neighbor_change	typeref:struct:lldpd_neighbor_change::lldpd_port	access:public
lldpd_neighbor_change::state	lldpd-structs.h	/^	int state;$/;"	m	struct:lldpd_neighbor_change	access:public
lldpd_netlink	daemon/netlink.c	/^struct lldpd_netlink {$/;"	s	file:
lldpd_netlink::addresses	daemon/netlink.c	/^	struct interfaces_address_list *addresses;$/;"	m	struct:lldpd_netlink	typeref:struct:lldpd_netlink::interfaces_address_list	file:	access:public
lldpd_netlink::devices	daemon/netlink.c	/^	struct interfaces_device_list *devices;$/;"	m	struct:lldpd_netlink	typeref:struct:lldpd_netlink::interfaces_device_list	file:	access:public
lldpd_netlink::nl_socket	daemon/netlink.c	/^	int nl_socket;$/;"	m	struct:lldpd_netlink	file:	access:public
lldpd_one_client	daemon/event.c	/^struct lldpd_one_client {$/;"	s	file:
lldpd_one_client::TAILQ_ENTRY	daemon/event.c	/^	TAILQ_ENTRY(lldpd_one_client) next;$/;"	p	struct:lldpd_one_client	file:	access:public
lldpd_one_client::bev	daemon/event.c	/^	struct bufferevent *bev;$/;"	m	struct:lldpd_one_client	typeref:struct:lldpd_one_client::bufferevent	file:	access:public
lldpd_one_client::cfg	daemon/event.c	/^	struct lldpd *cfg;$/;"	m	struct:lldpd_one_client	typeref:struct:lldpd_one_client::lldpd	file:	access:public
lldpd_one_client::subscribed	daemon/event.c	/^	int    subscribed;	\/* Is this client subscribed to changes? *\/$/;"	m	struct:lldpd_one_client	file:	access:public
lldpd_ops	lldpd-structs.h	/^struct lldpd_ops {$/;"	s
lldpd_ops::cleanup	lldpd-structs.h	/^	int(*cleanup)(struct lldpd *, struct lldpd_hardware *); \/* Cleanup function. *\/$/;"	m	struct:lldpd_ops	access:public
lldpd_ops::recv	lldpd-structs.h	/^	int(*recv)(struct lldpd *,$/;"	m	struct:lldpd_ops	access:public
lldpd_ops::send	lldpd-structs.h	/^	int(*send)(struct lldpd *,$/;"	m	struct:lldpd_ops	access:public
lldpd_pi	lldpd-structs.h	/^MARSHAL_END(lldpd_pi);$/;"	v
lldpd_pi	lldpd-structs.h	/^struct lldpd_pi {$/;"	s
lldpd_pi::p_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_pi)  p_entries;$/;"	m	struct:lldpd_pi	access:public
lldpd_pi::p_pi	lldpd-structs.h	/^	char			*p_pi;$/;"	m	struct:lldpd_pi	access:public
lldpd_pi::p_pi_len	lldpd-structs.h	/^	int			 p_pi_len;$/;"	m	struct:lldpd_pi	access:public
lldpd_pi_cleanup	lldpd-structs.c	/^lldpd_pi_cleanup(struct lldpd_port *port)$/;"	f	signature:(struct lldpd_port *port)
lldpd_pi_cleanup	lldpd-structs.h	/^void	 lldpd_pi_cleanup(struct lldpd_port *);$/;"	p	signature:(struct lldpd_port *)
lldpd_port	lldpd-structs.h	/^MARSHAL_END(lldpd_port);$/;"	v
lldpd_port	lldpd-structs.h	/^struct lldpd_port {$/;"	s
lldpd_port::_p_hardware_flags	lldpd-structs.h	/^	int			 _p_hardware_flags; \/* This is a copy of hardware flags. Do not use it! *\/$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_aggregid	lldpd-structs.h	/^	u_int32_t		 p_aggregid;$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_chassis	lldpd-structs.h	/^	struct lldpd_chassis	*p_chassis;    \/* Attached chassis *\/$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_chassis	access:public
lldpd_port::p_custom_list	lldpd-structs.h	/^	TAILQ_HEAD(, lldpd_custom) p_custom_list;$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_descr	lldpd-structs.h	/^	char			*p_descr;$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_disable_rx	lldpd-structs.h	/^	u_int8_t		 p_disable_rx:3; \/* Should RX be disabled for this port? *\/$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_disable_tx	lldpd-structs.h	/^	u_int8_t		 p_disable_tx:4; \/* Should TX be disabled for this port? *\/$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_port)	 p_entries;$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_hidden_in	lldpd-structs.h	/^	u_int8_t		 p_hidden_in:1; \/* Considered as hidden for reception *\/$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_hidden_out	lldpd-structs.h	/^	u_int8_t		 p_hidden_out:2; \/* Considered as hidden for emission *\/$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_id	lldpd-structs.h	/^	char			*p_id;$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_id_len	lldpd-structs.h	/^	int			 p_id_len;$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_id_subtype	lldpd-structs.h	/^	u_int8_t		 p_id_subtype;$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_lastchange	lldpd-structs.h	/^	time_t			 p_lastchange; \/* Time of last change of values *\/$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_lastframe	lldpd-structs.h	/^	struct lldpd_frame	*p_lastframe;  \/* Frame received during last update *\/$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_frame	access:public
lldpd_port::p_lastupdate	lldpd-structs.h	/^	time_t			 p_lastupdate; \/* Time of last update received *\/$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_macphy	lldpd-structs.h	/^	struct lldpd_dot3_macphy p_macphy;$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_dot3_macphy	access:public
lldpd_port::p_med_cap_enabled	lldpd-structs.h	/^	u_int16_t		 p_med_cap_enabled;$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_med_location	lldpd-structs.h	/^	struct lldpd_med_loc	 p_med_location[LLDP_MED_LOCFORMAT_LAST];$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_med_loc	access:public
lldpd_port::p_med_policy	lldpd-structs.h	/^	struct lldpd_med_policy	 p_med_policy[LLDP_MED_APPTYPE_LAST];$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_med_policy	access:public
lldpd_port::p_med_power	lldpd-structs.h	/^	struct lldpd_med_power	 p_med_power;$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_med_power	access:public
lldpd_port::p_mfs	lldpd-structs.h	/^	u_int16_t		 p_mfs;$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_pids	lldpd-structs.h	/^	TAILQ_HEAD(, lldpd_pi)	  p_pids;$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_power	lldpd-structs.h	/^	struct lldpd_dot3_power	 p_power;$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_dot3_power	access:public
lldpd_port::p_ppvids	lldpd-structs.h	/^	TAILQ_HEAD(, lldpd_ppvid) p_ppvids;$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_protocol	lldpd-structs.h	/^	u_int8_t		 p_protocol;   \/* Protocol used to get this port *\/$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_pvid	lldpd-structs.h	/^	u_int16_t		 p_pvid;$/;"	m	struct:lldpd_port	access:public
lldpd_port::p_vlans	lldpd-structs.h	/^	TAILQ_HEAD(, lldpd_vlan) p_vlans;$/;"	m	struct:lldpd_port	access:public
lldpd_port_cleanup	lldpd-structs.c	/^lldpd_port_cleanup(struct lldpd_port *port, int all)$/;"	f	signature:(struct lldpd_port *port, int all)
lldpd_port_cleanup	lldpd-structs.h	/^void	 lldpd_port_cleanup(struct lldpd_port *, int);$/;"	p	signature:(struct lldpd_port *, int)
lldpd_port_set	lldpd-structs.h	/^MARSHAL_END(lldpd_port_set);$/;"	v
lldpd_port_set	lldpd-structs.h	/^struct lldpd_port_set {$/;"	s
lldpd_port_set::custom	lldpd-structs.h	/^	struct lldpd_custom     *custom;$/;"	m	struct:lldpd_port_set	typeref:struct:lldpd_port_set::lldpd_custom	access:public
lldpd_port_set::custom_list_clear	lldpd-structs.h	/^	int custom_list_clear;$/;"	m	struct:lldpd_port_set	access:public
lldpd_port_set::custom_tlv_op	lldpd-structs.h	/^	int custom_tlv_op;$/;"	m	struct:lldpd_port_set	access:public
lldpd_port_set::dot3_power	lldpd-structs.h	/^	struct lldpd_dot3_power *dot3_power;$/;"	m	struct:lldpd_port_set	typeref:struct:lldpd_port_set::lldpd_dot3_power	access:public
lldpd_port_set::ifname	lldpd-structs.h	/^	char *ifname;$/;"	m	struct:lldpd_port_set	access:public
lldpd_port_set::local_descr	lldpd-structs.h	/^	char *local_descr;$/;"	m	struct:lldpd_port_set	access:public
lldpd_port_set::local_id	lldpd-structs.h	/^	char *local_id;$/;"	m	struct:lldpd_port_set	access:public
lldpd_port_set::med_location	lldpd-structs.h	/^	struct lldpd_med_loc    *med_location;$/;"	m	struct:lldpd_port_set	typeref:struct:lldpd_port_set::lldpd_med_loc	access:public
lldpd_port_set::med_policy	lldpd-structs.h	/^	struct lldpd_med_policy *med_policy;$/;"	m	struct:lldpd_port_set	typeref:struct:lldpd_port_set::lldpd_med_policy	access:public
lldpd_port_set::med_power	lldpd-structs.h	/^	struct lldpd_med_power  *med_power;$/;"	m	struct:lldpd_port_set	typeref:struct:lldpd_port_set::lldpd_med_power	access:public
lldpd_port_set::rxtx	lldpd-structs.h	/^	int rxtx;$/;"	m	struct:lldpd_port_set	access:public
lldpd_ppvid	lldpd-structs.h	/^MARSHAL_END(lldpd_ppvid);$/;"	v
lldpd_ppvid	lldpd-structs.h	/^struct lldpd_ppvid {$/;"	s
lldpd_ppvid::p_cap_status	lldpd-structs.h	/^	u_int8_t		p_cap_status;$/;"	m	struct:lldpd_ppvid	access:public
lldpd_ppvid::p_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_ppvid) p_entries;$/;"	m	struct:lldpd_ppvid	access:public
lldpd_ppvid::p_ppvid	lldpd-structs.h	/^	u_int16_t		p_ppvid;$/;"	m	struct:lldpd_ppvid	access:public
lldpd_ppvid_cleanup	lldpd-structs.c	/^lldpd_ppvid_cleanup(struct lldpd_port *port)$/;"	f	signature:(struct lldpd_port *port)
lldpd_ppvid_cleanup	lldpd-structs.h	/^void	 lldpd_ppvid_cleanup(struct lldpd_port *);$/;"	p	signature:(struct lldpd_port *)
lldpd_protocol_map	lib/atoms/port.c	/^static struct atom_map lldpd_protocol_map = {$/;"	v	typeref:struct:atom_map	file:
lldpd_recv	daemon/lldpd.c	/^lldpd_recv(struct lldpd *cfg, struct lldpd_hardware *hardware, int fd)$/;"	f	signature:(struct lldpd *cfg, struct lldpd_hardware *hardware, int fd)
lldpd_recv	daemon/lldpd.h	/^void	 lldpd_recv(struct lldpd *, struct lldpd_hardware *, int);$/;"	p	signature:(struct lldpd *, struct lldpd_hardware *, int)
lldpd_remote_cleanup	lldpd-structs.c	/^lldpd_remote_cleanup(struct lldpd_hardware *hardware,$/;"	f	signature:(struct lldpd_hardware *hardware, void(*expire)(struct lldpd_hardware *, struct lldpd_port *), int all)
lldpd_remote_cleanup	lldpd-structs.h	/^void	 lldpd_remote_cleanup(struct lldpd_hardware *,$/;"	p	signature:(struct lldpd_hardware *, void(*expire)(struct lldpd_hardware *, struct lldpd_port *), int)
lldpd_reset_timer	daemon/lldpd.c	/^lldpd_reset_timer(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
lldpd_routing_enabled	daemon/lldpd.c	/^lldpd_routing_enabled(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
lldpd_send	daemon/lldpd.c	/^lldpd_send(struct lldpd_hardware *hardware)$/;"	f	signature:(struct lldpd_hardware *hardware)
lldpd_send	daemon/lldpd.h	/^void	 lldpd_send(struct lldpd_hardware *);$/;"	p	signature:(struct lldpd_hardware *)
lldpd_send_shutdown	daemon/lldpd.c	/^lldpd_send_shutdown(struct lldpd_hardware *hardware)$/;"	f	file:	signature:(struct lldpd_hardware *hardware)
lldpd_started_by_systemd	daemon/lldpd.c	/^lldpd_started_by_systemd()$/;"	f	file:
lldpd_started_by_upstart	daemon/lldpd.c	/^lldpd_started_by_upstart()$/;"	f	file:
lldpd_update_localchassis	daemon/lldpd.c	/^static void lldpd_update_localchassis(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
lldpd_update_localports	daemon/lldpd.c	/^void lldpd_update_localports(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
lldpd_update_localports	daemon/lldpd.h	/^void	 lldpd_update_localports(struct lldpd *);$/;"	p	signature:(struct lldpd *)
lldpd_vlan	lldpd-structs.h	/^MARSHAL_END(lldpd_vlan);$/;"	v
lldpd_vlan	lldpd-structs.h	/^struct lldpd_vlan {$/;"	s
lldpd_vlan::v_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_vlan)  v_entries;$/;"	m	struct:lldpd_vlan	access:public
lldpd_vlan::v_name	lldpd-structs.h	/^	char			*v_name;$/;"	m	struct:lldpd_vlan	access:public
lldpd_vlan::v_vid	lldpd-structs.h	/^	u_int16_t		 v_vid;$/;"	m	struct:lldpd_vlan	access:public
lldpd_vlan_cleanup	lldpd-structs.c	/^lldpd_vlan_cleanup(struct lldpd_port *port)$/;"	f	signature:(struct lldpd_port *port)
lldpd_vlan_cleanup	lldpd-structs.h	/^void	 lldpd_vlan_cleanup(struct lldpd_port *);$/;"	p	signature:(struct lldpd_port *)
local	lib/atom.h	/^	int local;			 \/* Local or remote port? *\/$/;"	m	struct:_lldpctl_atom_port_t	access:public
local_descr	lldpd-structs.h	/^	char *local_descr;$/;"	m	struct:lldpd_port_set	access:public
local_id	lldpd-structs.h	/^	char *local_id;$/;"	m	struct:lldpd_port_set	access:public
location	lib/atom.h	/^	struct lldpd_med_loc *location;$/;"	m	struct:_lldpctl_atom_med_location_t	typeref:struct:_lldpctl_atom_med_location_t::lldpd_med_loc	access:public
log_accept	log.c	/^log_accept(const char *token)$/;"	f	signature:(const char *token)
log_accept	log.h	/^void             log_accept(const char *);$/;"	p	signature:(const char *)
log_debug	log.c	/^log_debug(const char *token, const char *emsg, ...)$/;"	f	signature:(const char *token, const char *emsg, ...)
log_debug	log.h	/^void             log_debug(const char *, const char *, ...) __attribute__ ((format (printf, 2, 3)));$/;"	p	signature:(const char *, const char *, ...)
log_debug_accept_token	log.c	/^log_debug_accept_token(const char *token)$/;"	f	file:	signature:(const char *token)
log_info	log.c	/^log_info(const char *token, const char *emsg, ...)$/;"	f	signature:(const char *token, const char *emsg, ...)
log_info	log.h	/^void             log_info(const char *, const char *, ...) __attribute__ ((format (printf, 2, 3)));$/;"	p	signature:(const char *, const char *, ...)
log_init	log.c	/^log_init(int n_syslog, int n_debug, const char *progname)$/;"	f	signature:(int n_syslog, int n_debug, const char *progname)
log_init	log.h	/^void             log_init(int, int, const char *);$/;"	p	signature:(int, int, const char *)
log_level	log.c	/^log_level(int n_debug)$/;"	f	signature:(int n_debug)
log_level	log.h	/^void		 log_level(int);$/;"	p	signature:(int)
log_register	log.c	/^log_register(void (*cb)(int, const char*))$/;"	f	signature:(void (*cb)(int, const char*))
log_register	log.h	/^void		 log_register(void (*cb)(int, const char*));$/;"	p	signature:(void (*cb)(int, const char*))
log_warn	log.c	/^log_warn(const char *token, const char *emsg, ...)$/;"	f	signature:(const char *token, const char *emsg, ...)
log_warn	log.h	/^void             log_warn(const char *, const char *, ...) __attribute__ ((format (printf, 2, 3)));$/;"	p	signature:(const char *, const char *, ...)
log_warnx	log.c	/^log_warnx(const char *token, const char *emsg, ...)$/;"	f	signature:(const char *token, const char *emsg, ...)
log_warnx	log.h	/^void             log_warnx(const char *, const char *, ...) __attribute__ ((format (printf, 2, 3)));$/;"	p	signature:(const char *, const char *, ...)
logh	log.c	/^static void (*logh)(int severity, const char *msg) = NULL;$/;"	v	file:
logit	log.c	/^logit(int pri, const char *token, const char *fmt, ...)$/;"	f	file:	signature:(int pri, const char *token, const char *fmt, ...)
logit	log.c	/^static void	 logit(int, const char *, const char *, ...);$/;"	p	file:	signature:(int, const char *, const char *, ...)
lower	daemon/lldpd.h	/^	struct interfaces_device *lower; \/* Lower interface (for a VLAN for example) *\/$/;"	m	struct:interfaces_device	typeref:struct:interfaces_device::interfaces_device	access:public
lower_idx	daemon/lldpd.h	/^	int lower_idx;		\/* Index to lower interface *\/$/;"	m	struct:interfaces_device	access:public
m_addr	lldpd-structs.h	/^	union lldpd_address	m_addr;$/;"	m	struct:lldpd_mgmt	typeref:union:lldpd_mgmt::lldpd_address	access:public
m_addrsize	lldpd-structs.h	/^	size_t 			m_addrsize;$/;"	m	struct:lldpd_mgmt	access:public
m_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_mgmt) m_entries;$/;"	m	struct:lldpd_mgmt	access:public
m_family	lldpd-structs.h	/^	int			m_family;$/;"	m	struct:lldpd_mgmt	access:public
m_iface	lldpd-structs.h	/^	u_int32_t		m_iface;$/;"	m	struct:lldpd_mgmt	access:public
mac	daemon/lldpd.h	/^	u_int8_t	 mac[ETHER_ADDR_LEN];  \/* Destination MAC address used by this protocol *\/$/;"	m	struct:protocol	access:public
main	client/lldpcli.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	daemon/main.c	/^main(int argc, char **argv, char **envp)$/;"	f	signature:(int argc, char **argv, char **envp)
malloc	compat/compat.h	/^void *malloc(size_t size);$/;"	p	signature:(size_t size)
malloc	compat/malloc.c	4;"	d	file:
map	lib/atom.h	/^	lldpctl_map_t   map[];$/;"	m	struct:atom_map	access:public
map_lookup	lib/helpers.c	/^map_lookup(lldpctl_map_t *list, int n)$/;"	f	signature:(lldpctl_map_t *list, int n)
map_lookup	lib/helpers.h	/^const char *map_lookup(lldpctl_map_t *list, int n);$/;"	p	signature:(lldpctl_map_t *list, int n)
map_reverse_lookup	lib/helpers.c	/^map_reverse_lookup(lldpctl_map_t *list, const char *string)$/;"	f	signature:(lldpctl_map_t *list, const char *string)
map_reverse_lookup	lib/helpers.h	/^int map_reverse_lookup(lldpctl_map_t *list, const char *string);$/;"	p	signature:(lldpctl_map_t *list, const char *string)
marshal_alloc	marshal.c	/^marshal_alloc(struct gc_l *pointers, size_t len, void *orig)$/;"	f	file:	signature:(struct gc_l *pointers, size_t len, void *orig)
marshal_free	marshal.c	/^marshal_free(struct gc_l *pointers, int gconly)$/;"	f	file:	signature:(struct gc_l *pointers, int gconly)
marshal_info	marshal.h	/^struct marshal_info {$/;"	s
marshal_info::name	marshal.h	/^	char   *name;		\/* Name of structure *\/$/;"	m	struct:marshal_info	access:public
marshal_info::pointers	marshal.h	/^	struct marshal_subinfo pointers[0]; \/* Pointer to other structures *\/$/;"	m	struct:marshal_info	typeref:struct:marshal_info::marshal_subinfo	access:public
marshal_info::pointers	marshal.h	/^	struct marshal_subinfo pointers[]; \/* Pointer to other structures *\/$/;"	m	struct:marshal_info	typeref:struct:marshal_info::marshal_subinfo	access:public
marshal_info::size	marshal.h	/^	size_t  size;		\/* Size of the structure *\/$/;"	m	struct:marshal_info	access:public
marshal_info_fstring	marshal.c	/^struct marshal_info marshal_info_fstring = {$/;"	v	typeref:struct:marshal_info
marshal_info_ignore	marshal.c	/^struct marshal_info marshal_info_ignore = {$/;"	v	typeref:struct:marshal_info
marshal_info_string	marshal.c	/^struct marshal_info marshal_info_string = {$/;"	v	typeref:struct:marshal_info
marshal_repair_tailq	marshal.h	140;"	d
marshal_serialize	marshal.h	132;"	d
marshal_serialize_	marshal.c	/^marshal_serialize_(struct marshal_info *mi, void *unserialized, void **input,$/;"	f	signature:(struct marshal_info *mi, void *unserialized, void **input, int skip, void *_refs, int osize)
marshal_serialize_	marshal.h	/^ssize_t  marshal_serialize_(struct marshal_info *, void *, void **, int, void *, int)$/;"	p	signature:(struct marshal_info *, void *, void **, int, void *, int)
marshal_serialized	marshal.c	/^struct marshal_serialized {$/;"	s	file:
marshal_serialized::object	marshal.c	/^	unsigned char object[0];$/;"	m	struct:marshal_serialized	file:	access:public
marshal_serialized::orig	marshal.c	/^	void         *orig;	\/* Original reference. Also enforce alignment. *\/$/;"	m	struct:marshal_serialized	file:	access:public
marshal_serialized::size	marshal.c	/^	size_t        size;$/;"	m	struct:marshal_serialized	file:	access:public
marshal_subinfo	marshal.h	/^struct marshal_subinfo {$/;"	s
marshal_subinfo::kind	marshal.h	/^	enum marshal_subinfo_kind kind; \/* Kind of substructure *\/$/;"	m	struct:marshal_subinfo	typeref:enum:marshal_subinfo::marshal_subinfo_kind	access:public
marshal_subinfo::mi	marshal.h	/^	struct  marshal_info *mi;$/;"	m	struct:marshal_subinfo	typeref:struct:marshal_subinfo::marshal_info	access:public
marshal_subinfo::offset	marshal.h	/^	size_t offset;	     \/* Offset compared to parent structure *\/$/;"	m	struct:marshal_subinfo	access:public
marshal_subinfo::offset2	marshal.h	/^	size_t offset2;	     \/* Ancillary offset (for related data) *\/$/;"	m	struct:marshal_subinfo	access:public
marshal_subinfo_kind	marshal.h	/^enum marshal_subinfo_kind {$/;"	g
marshal_unserialize	marshal.h	137;"	d
marshal_unserialize_	marshal.c	/^marshal_unserialize_(struct marshal_info *mi, void *buffer, size_t len, void **output,$/;"	f	signature:(struct marshal_info *mi, void *buffer, size_t len, void **output, void *_pointers, int skip, int osize)
marshal_unserialize_	marshal.h	/^size_t  marshal_unserialize_(struct marshal_info *, void *, size_t, void **, void*, int, int)$/;"	p	signature:(struct marshal_info *, void *, size_t, void **, void*, int, int)
mau_type	lldpd-structs.h	/^	u_int16_t		 mau_type;$/;"	m	struct:lldpd_dot3_macphy	access:public
may_read	daemon/lldpd.h	/^int	 may_read(enum priv_context, void *, size_t);$/;"	p	signature:(enum priv_context, void *, size_t)
may_read	daemon/privsep_io.c	/^int may_read(enum priv_context ctx, void *buf, size_t n)$/;"	f	signature:(enum priv_context ctx, void *buf, size_t n)
med_caelement	lib/atoms/med.c	/^static struct atom_builder med_caelement =$/;"	v	typeref:struct:atom_builder	file:
med_caelements_list	lib/atoms/med.c	/^static struct atom_builder med_caelements_list =$/;"	v	typeref:struct:atom_builder	file:
med_location	lib/atoms/med.c	/^static struct atom_builder med_location =$/;"	v	typeref:struct:atom_builder	file:
med_location	lldpd-structs.h	/^	struct lldpd_med_loc    *med_location;$/;"	m	struct:lldpd_port_set	typeref:struct:lldpd_port_set::lldpd_med_loc	access:public
med_locations_list	lib/atoms/med.c	/^static struct atom_builder med_locations_list =$/;"	v	typeref:struct:atom_builder	file:
med_policies_list	lib/atoms/med.c	/^static struct atom_builder med_policies_list =$/;"	v	typeref:struct:atom_builder	file:
med_policy	lib/atoms/med.c	/^static struct atom_builder med_policy =$/;"	v	typeref:struct:atom_builder	file:
med_policy	lldpd-structs.h	/^	struct lldpd_med_policy *med_policy;$/;"	m	struct:lldpd_port_set	typeref:struct:lldpd_port_set::lldpd_med_policy	access:public
med_power	lib/atoms/med.c	/^static struct atom_builder med_power =$/;"	v	typeref:struct:atom_builder	file:
med_power	lldpd-structs.h	/^	struct lldpd_med_power  *med_power;$/;"	m	struct:lldpd_port_set	typeref:struct:lldpd_port_set::lldpd_med_power	access:public
mgmt	lib/atom.h	/^	struct lldpd_mgmt *mgmt;$/;"	m	struct:_lldpctl_atom_mgmt_t	typeref:struct:_lldpctl_atom_mgmt_t::lldpd_mgmt	access:public
mgmt	lib/atoms/mgmt.c	/^static struct atom_builder mgmt =$/;"	v	typeref:struct:atom_builder	file:
mgmts_list	lib/atoms/mgmt.c	/^static struct atom_builder mgmts_list =$/;"	v	typeref:struct:atom_builder	file:
mi	marshal.h	/^	struct  marshal_info *mi;$/;"	m	struct:marshal_subinfo	typeref:struct:marshal_subinfo::marshal_info	access:public
min	lib/atoms/custom.c	31;"	d	file:
mode	daemon/lldpd.h	/^	int		 mode;		\/* > 0 mode identifier (unique per protocol) *\/$/;"	m	struct:protocol	access:public
monitored	daemon/priv-seccomp.c	/^static int monitored = -1;$/;"	v	file:
monitored	daemon/priv.c	/^static int monitored = -1;		\/* Child *\/$/;"	v	file:
msg	daemon/priv.c	/^	enum priv_cmd msg;$/;"	m	struct:dispatch_actions	typeref:enum:dispatch_actions::priv_cmd	file:	access:public
mtu	daemon/lldpd.h	/^	int   mtu;		\/* MTU *\/$/;"	m	struct:interfaces_device	access:public
must_exit	client/lldpcli.c	/^static int must_exit = 0;$/;"	v	file:
must_read	daemon/lldpd.h	/^void	 must_read(enum priv_context, void *, size_t);$/;"	p	signature:(enum priv_context, void *, size_t)
must_read	daemon/privsep_io.c	/^void must_read(enum priv_context ctx, void *buf, size_t n)$/;"	f	signature:(enum priv_context ctx, void *buf, size_t n)
must_write	daemon/lldpd.h	/^void	 must_write(enum priv_context, const void *, size_t);$/;"	p	signature:(enum priv_context, const void *, size_t)
must_write	daemon/privsep_io.c	/^void must_write(enum priv_context ctx, const void *buf, size_t n)$/;"	f	signature:(enum priv_context ctx, const void *buf, size_t n)
name	client/lldpcli.c	/^	char *name;$/;"	m	struct:input	file:	access:public
name	daemon/agent.c	/^	oid             *name;	 \/* Requested\/returned OID *\/$/;"	m	struct:header_index	file:	access:public
name	daemon/client.c	/^	const char *name;$/;"	m	struct:client_handle	file:	access:public
name	daemon/interfaces-linux.c	/^	char name[IFNAMSIZ];$/;"	m	struct:bond_master	file:	access:public
name	daemon/lldpd.h	/^	char		*name;		\/* Name of protocol *\/$/;"	m	struct:protocol	access:public
name	daemon/lldpd.h	/^	char *name;		\/* Name *\/$/;"	m	struct:interfaces_device	access:public
name	lib/atom.h	/^	char *name;$/;"	m	struct:_lldpctl_atom_interface_t	access:public
name	lldpd-structs.h	/^	char			*name;$/;"	m	struct:lldpd_interface	access:public
name	marshal.h	/^	char   *name;		\/* Name of structure *\/$/;"	m	struct:marshal_info	access:public
nb	client/show.c	/^	size_t nb;$/;"	m	struct:watcharg	file:	access:public
neighbor	lldpd-structs.h	/^	struct lldpd_port *neighbor;$/;"	m	struct:lldpd_neighbor_change	typeref:struct:lldpd_neighbor_change::lldpd_port	access:public
netlink_change_cb	daemon/netlink.c	/^netlink_change_cb(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
netlink_cleanup	daemon/lldpd.h	/^void netlink_cleanup(struct lldpd *);$/;"	p	signature:(struct lldpd *)
netlink_cleanup	daemon/netlink.c	/^netlink_cleanup(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
netlink_connect	daemon/netlink.c	/^static int netlink_connect(int protocol, unsigned groups)$/;"	f	file:	signature:(int protocol, unsigned groups)
netlink_get_addresses	daemon/lldpd.h	/^struct interfaces_address_list *netlink_get_addresses(struct lldpd *);$/;"	p	signature:(struct lldpd *)
netlink_get_addresses	daemon/netlink.c	/^struct interfaces_address_list* netlink_get_addresses(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
netlink_get_interfaces	daemon/lldpd.h	/^struct interfaces_device_list  *netlink_get_interfaces(struct lldpd *);$/;"	p	signature:(struct lldpd *)
netlink_get_interfaces	daemon/netlink.c	/^struct interfaces_device_list* netlink_get_interfaces(struct lldpd *cfg)$/;"	f	signature:(struct lldpd *cfg)
netlink_group_mask	daemon/netlink.c	/^netlink_group_mask(int group)$/;"	f	file:	signature:(int group)
netlink_initialize	daemon/netlink.c	/^static int netlink_initialize(struct lldpd *cfg)$/;"	f	file:	signature:(struct lldpd *cfg)
netlink_merge	daemon/netlink.c	/^netlink_merge(struct interfaces_device *old, struct interfaces_device *new)$/;"	f	signature:(struct interfaces_device *old, struct interfaces_device *new)
netlink_parse_address	daemon/netlink.c	/^netlink_parse_address(struct nlmsghdr *msg,$/;"	f	file:	signature:(struct nlmsghdr *msg, struct interfaces_address *ifa)
netlink_parse_link	daemon/netlink.c	/^netlink_parse_link(struct nlmsghdr *msg,$/;"	f	file:	signature:(struct nlmsghdr *msg, struct interfaces_device *iff)
netlink_parse_linkinfo	daemon/netlink.c	/^netlink_parse_linkinfo(struct interfaces_device *iff, struct rtattr *rta, int len)$/;"	f	file:	signature:(struct interfaces_device *iff, struct rtattr *rta, int len)
netlink_parse_rtattr	daemon/netlink.c	/^netlink_parse_rtattr(struct rtattr *tb[], int max, struct rtattr *rta, int len)$/;"	f	file:	signature:(struct rtattr *tb[], int max, struct rtattr *rta, int len)
netlink_recv	daemon/netlink.c	/^netlink_recv(int s,$/;"	f	file:	signature:(int s, struct interfaces_device_list *ifs, struct interfaces_address_list *ifas)
netlink_req	daemon/netlink.c	/^struct netlink_req {$/;"	s	file:
netlink_req::gen	daemon/netlink.c	/^	struct rtgenmsg gen;$/;"	m	struct:netlink_req	typeref:struct:netlink_req::rtgenmsg	file:	access:public
netlink_req::hdr	daemon/netlink.c	/^	struct nlmsghdr hdr;$/;"	m	struct:netlink_req	typeref:struct:netlink_req::nlmsghdr	file:	access:public
netlink_send	daemon/netlink.c	/^static int netlink_send(int s, int type, int family, int seq)$/;"	f	file:	signature:(int s, int type, int family, int seq)
netlink_subscribe_changes	daemon/netlink.c	/^int netlink_subscribe_changes()$/;"	f
netsnmp_large_fd_set	daemon/event.c	69;"	d	file:
netsnmp_large_fd_set_cleanup	daemon/event.c	73;"	d	file:
netsnmp_large_fd_set_init	daemon/event.c	72;"	d	file:
netsnmp_unix	daemon/agent_priv.c	/^static oid netsnmp_unix[] = { TRANSPORT_DOMAIN_LOCAL };$/;"	v	file:
next	daemon/lldpd.h	/^	TAILQ_ENTRY(interfaces_address) next;$/;"	m	struct:interfaces_address	access:public
next	daemon/lldpd.h	/^	TAILQ_ENTRY(interfaces_device) next;$/;"	m	struct:interfaces_device	access:public
next	lib/atom.h	/^	TAILQ_ENTRY(atom_buffer) next;$/;"	m	struct:atom_buffer	access:public
next	lib/atom.h	/^	lldpctl_atom_iter_t *(*next)(lldpctl_atom_t *, lldpctl_atom_iter_t *);$/;"	m	struct:lldpctl_atom_t	access:public
next	lib/atom.h	/^	lldpctl_atom_iter_t* (*next)(lldpctl_atom_t *,  lldpctl_atom_iter_t *); \/* Return the next object for the provided iterator *\/$/;"	m	struct:atom_builder	access:public
next	lib/atom.h	/^	struct atom_map *next;$/;"	m	struct:atom_map	typeref:struct:atom_map::atom_map	access:public
next	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_custom)	next;	\/* Pointer to next custom TLV *\/$/;"	m	struct:lldpd_custom	access:public
next	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_interface) next;$/;"	m	struct:lldpd_interface	access:public
nextb	lib/atom.h	/^	struct atom_builder  *nextb;$/;"	m	struct:atom_builder	typeref:struct:atom_builder::atom_builder	access:public
nl_socket	daemon/netlink.c	/^	int nl_socket;$/;"	m	struct:lldpd_netlink	file:	access:public
notify_clients_deletion	daemon/lldpd.c	/^notify_clients_deletion(struct lldpd_hardware *hardware,$/;"	f	file:	signature:(struct lldpd_hardware *hardware, struct lldpd_port *rport)
ntohll	lib/fixedpoint.c	32;"	d	file:
object	marshal.c	/^	unsigned char object[0];$/;"	m	struct:marshal_serialized	file:	access:public
octets	lldpd-structs.h	/^	u_int8_t		octets[LLDPD_MGMT_MAXADDRSIZE]; \/* network byte order! *\/$/;"	m	union:lldpd_address	access:public
offset	marshal.h	/^	size_t offset;	     \/* Offset compared to parent structure *\/$/;"	m	struct:marshal_subinfo	access:public
offset2	marshal.h	/^	size_t offset2;	     \/* Ancillary offset (for related data) *\/$/;"	m	struct:marshal_subinfo	access:public
op	lib/atom.h	/^	int op;$/;"	m	struct:_lldpctl_atom_custom_t	access:public
operational_mau_type_values	lib/atoms/port.c	/^static lldpctl_map_t operational_mau_type_values[] = {$/;"	v	file:
orig	marshal.c	/^	void         *orig;	\/* Original reference. Also enforce alignment. *\/$/;"	m	struct:marshal_serialized	file:	access:public
orig	marshal.c	/^	void *orig;		\/* Original reference (not valid anymore !) *\/$/;"	m	struct:gc	file:	access:public
oui	lldpd-structs.h	/^	u_int8_t		oui[LLDP_TLV_ORG_OUI_LEN];$/;"	m	struct:lldpd_custom	access:public
oui_info	lldpd-structs.h	/^	u_int8_t		*oui_info;$/;"	m	struct:lldpd_custom	access:public
oui_info_len	lldpd-structs.h	/^	int			oui_info_len;$/;"	m	struct:lldpd_custom	access:public
output_buffer	lib/atom.h	/^	uint8_t *output_buffer; \/* Current input\/output buffer *\/$/;"	m	struct:lldpctl_conn_t	access:public
output_buffer_len	lib/atom.h	/^	size_t output_buffer_len;$/;"	m	struct:lldpctl_conn_t	access:public
p_aggregid	lldpd-structs.h	/^	u_int32_t		 p_aggregid;$/;"	m	struct:lldpd_port	access:public
p_cap_status	lldpd-structs.h	/^	u_int8_t		p_cap_status;$/;"	m	struct:lldpd_ppvid	access:public
p_chassis	lldpd-structs.h	/^	struct lldpd_chassis	*p_chassis;    \/* Attached chassis *\/$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_chassis	access:public
p_custom_list	lldpd-structs.h	/^	TAILQ_HEAD(, lldpd_custom) p_custom_list;$/;"	m	struct:lldpd_port	access:public
p_descr	lldpd-structs.h	/^	char			*p_descr;$/;"	m	struct:lldpd_port	access:public
p_disable_rx	lldpd-structs.h	/^	u_int8_t		 p_disable_rx:3; \/* Should RX be disabled for this port? *\/$/;"	m	struct:lldpd_port	access:public
p_disable_tx	lldpd-structs.h	/^	u_int8_t		 p_disable_tx:4; \/* Should TX be disabled for this port? *\/$/;"	m	struct:lldpd_port	access:public
p_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_pi)  p_entries;$/;"	m	struct:lldpd_pi	access:public
p_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_port)	 p_entries;$/;"	m	struct:lldpd_port	access:public
p_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_ppvid) p_entries;$/;"	m	struct:lldpd_ppvid	access:public
p_hidden_in	lldpd-structs.h	/^	u_int8_t		 p_hidden_in:1; \/* Considered as hidden for reception *\/$/;"	m	struct:lldpd_port	access:public
p_hidden_out	lldpd-structs.h	/^	u_int8_t		 p_hidden_out:2; \/* Considered as hidden for emission *\/$/;"	m	struct:lldpd_port	access:public
p_id	lldpd-structs.h	/^	char			*p_id;$/;"	m	struct:lldpd_port	access:public
p_id_len	lldpd-structs.h	/^	int			 p_id_len;$/;"	m	struct:lldpd_port	access:public
p_id_subtype	lldpd-structs.h	/^	u_int8_t		 p_id_subtype;$/;"	m	struct:lldpd_port	access:public
p_lastchange	lldpd-structs.h	/^	time_t			 p_lastchange; \/* Time of last change of values *\/$/;"	m	struct:lldpd_port	access:public
p_lastframe	lldpd-structs.h	/^	struct lldpd_frame	*p_lastframe;  \/* Frame received during last update *\/$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_frame	access:public
p_lastupdate	lldpd-structs.h	/^	time_t			 p_lastupdate; \/* Time of last update received *\/$/;"	m	struct:lldpd_port	access:public
p_macphy	lldpd-structs.h	/^	struct lldpd_dot3_macphy p_macphy;$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_dot3_macphy	access:public
p_med_cap_enabled	lldpd-structs.h	/^	u_int16_t		 p_med_cap_enabled;$/;"	m	struct:lldpd_port	access:public
p_med_location	lldpd-structs.h	/^	struct lldpd_med_loc	 p_med_location[LLDP_MED_LOCFORMAT_LAST];$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_med_loc	access:public
p_med_policy	lldpd-structs.h	/^	struct lldpd_med_policy	 p_med_policy[LLDP_MED_APPTYPE_LAST];$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_med_policy	access:public
p_med_power	lldpd-structs.h	/^	struct lldpd_med_power	 p_med_power;$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_med_power	access:public
p_mfs	lldpd-structs.h	/^	u_int16_t		 p_mfs;$/;"	m	struct:lldpd_port	access:public
p_pi	lldpd-structs.h	/^	char			*p_pi;$/;"	m	struct:lldpd_pi	access:public
p_pi_len	lldpd-structs.h	/^	int			 p_pi_len;$/;"	m	struct:lldpd_pi	access:public
p_pids	lldpd-structs.h	/^	TAILQ_HEAD(, lldpd_pi)	  p_pids;$/;"	m	struct:lldpd_port	access:public
p_power	lldpd-structs.h	/^	struct lldpd_dot3_power	 p_power;$/;"	m	struct:lldpd_port	typeref:struct:lldpd_port::lldpd_dot3_power	access:public
p_ppvid	lldpd-structs.h	/^	u_int16_t		p_ppvid;$/;"	m	struct:lldpd_ppvid	access:public
p_ppvids	lldpd-structs.h	/^	TAILQ_HEAD(, lldpd_ppvid) p_ppvids;$/;"	m	struct:lldpd_port	access:public
p_protocol	lldpd-structs.h	/^	u_int8_t		 p_protocol;   \/* Protocol used to get this port *\/$/;"	m	struct:lldpd_port	access:public
p_pvid	lldpd-structs.h	/^	u_int16_t		 p_pvid;$/;"	m	struct:lldpd_port	access:public
p_vlans	lldpd-structs.h	/^	TAILQ_HEAD(, lldpd_vlan) p_vlans;$/;"	m	struct:lldpd_port	access:public
paircontrol	lldpd-structs.h	/^	u_int8_t		paircontrol;$/;"	m	struct:lldpd_dot3_power	access:public
pairs	lldpd-structs.h	/^	u_int8_t		pairs;$/;"	m	struct:lldpd_dot3_power	access:public
parent	lib/atom.h	/^	lldpctl_atom_t *parent;$/;"	m	struct:_lldpctl_atom_mgmt_t	access:public
parent	lib/atom.h	/^	lldpctl_atom_t *parent;$/;"	m	struct:_lldpctl_atom_mgmts_list_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_med_location_t *parent;$/;"	m	struct:_lldpctl_atom_med_caelement_t	typeref:struct:_lldpctl_atom_med_caelement_t::_lldpctl_atom_med_location_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_med_location_t *parent;$/;"	m	struct:_lldpctl_atom_med_caelements_list_t	typeref:struct:_lldpctl_atom_med_caelements_list_t::_lldpctl_atom_med_location_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent; \/* Local port if we are a remote port *\/$/;"	m	struct:_lldpctl_atom_port_t	typeref:struct:_lldpctl_atom_port_t::_lldpctl_atom_port_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent; \/* Optional: parent of this atom (owning our reference) *\/$/;"	m	struct:_lldpctl_atom_chassis_t	typeref:struct:_lldpctl_atom_chassis_t::_lldpctl_atom_port_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_any_list_t	typeref:struct:_lldpctl_atom_any_list_t::_lldpctl_atom_port_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_custom_list_t	typeref:struct:_lldpctl_atom_custom_list_t::_lldpctl_atom_port_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_custom_t	typeref:struct:_lldpctl_atom_custom_t::_lldpctl_atom_port_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_dot3_power_t	typeref:struct:_lldpctl_atom_dot3_power_t::_lldpctl_atom_port_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_med_location_t	typeref:struct:_lldpctl_atom_med_location_t::_lldpctl_atom_port_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_med_policy_t	typeref:struct:_lldpctl_atom_med_policy_t::_lldpctl_atom_port_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_med_power_t	typeref:struct:_lldpctl_atom_med_power_t::_lldpctl_atom_port_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_pi_t	typeref:struct:_lldpctl_atom_pi_t::_lldpctl_atom_port_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_ppvid_t	typeref:struct:_lldpctl_atom_ppvid_t::_lldpctl_atom_port_t	access:public
parent	lib/atom.h	/^	struct _lldpctl_atom_port_t *parent;$/;"	m	struct:_lldpctl_atom_vlan_t	typeref:struct:_lldpctl_atom_vlan_t::_lldpctl_atom_port_t	access:public
parse_and_exec	client/lldpcli.c	/^static int parse_and_exec(lldpctl_conn_t *conn, const char *fmt, const char *line)$/;"	f	file:	signature:(lldpctl_conn_t *conn, const char *fmt, const char *line)
pattern_match	daemon/lldpd.h	/^int pattern_match(char *, char *, int);$/;"	p	signature:(char *, char *, int)
pattern_match	daemon/pattern.c	/^pattern_match(char *string, char *patterns, int found)$/;"	f	signature:(char *string, char *patterns, int found)
pi	lib/atom.h	/^	struct lldpd_pi *pi;$/;"	m	struct:_lldpctl_atom_pi_t	typeref:struct:_lldpctl_atom_pi_t::lldpd_pi	access:public
pi	lib/atoms/dot1.c	/^static struct atom_builder pi =$/;"	v	typeref:struct:atom_builder	file:
pis_list	lib/atoms/dot1.c	/^static struct atom_builder pis_list =$/;"	v	typeref:struct:atom_builder	file:
pointer	marshal.c	/^	void *pointer;$/;"	m	struct:gc	file:	access:public
pointer	marshal.c	/^	void *pointer;$/;"	m	struct:ref	file:	access:public
pointer	marshal.h	/^	pointer,$/;"	e	enum:marshal_subinfo_kind
pointers	marshal.h	/^	struct marshal_subinfo pointers[0]; \/* Pointer to other structures *\/$/;"	m	struct:marshal_info	typeref:struct:marshal_info::marshal_subinfo	access:public
pointers	marshal.h	/^	struct marshal_subinfo pointers[]; \/* Pointer to other structures *\/$/;"	m	struct:marshal_info	typeref:struct:marshal_info::marshal_subinfo	access:public
policy	lib/atom.h	/^	struct lldpd_med_policy *policy;$/;"	m	struct:_lldpctl_atom_med_policy_t	typeref:struct:_lldpctl_atom_med_policy_t::lldpd_med_policy	access:public
port	lib/atom.h	/^	struct lldpd_port     *port;	 \/* Local and remote *\/$/;"	m	struct:_lldpctl_atom_port_t	typeref:struct:_lldpctl_atom_port_t::lldpd_port	access:public
port	lib/atoms/port.c	/^static struct atom_builder port =$/;"	v	typeref:struct:atom_builder	file:
port_dot3_power_class_map	lib/atoms/dot3.c	/^static struct atom_map port_dot3_power_class_map = {$/;"	v	typeref:struct:atom_map	file:
port_dot3_power_devicetype_map	lib/atoms/dot3.c	/^static lldpctl_map_t port_dot3_power_devicetype_map[] = {$/;"	v	file:
port_dot3_power_pairs_map	lib/atoms/dot3.c	/^static struct atom_map port_dot3_power_pairs_map = {$/;"	v	typeref:struct:atom_map	file:
port_dot3_power_pd_source_map	lib/atoms/dot3.c	/^static lldpctl_map_t port_dot3_power_pd_source_map[] = {$/;"	v	file:
port_dot3_power_priority_map	lib/atoms/dot3.c	/^static struct atom_map port_dot3_power_priority_map = {$/;"	v	typeref:struct:atom_map	file:
port_dot3_power_pse_source_map	lib/atoms/dot3.c	/^static lldpctl_map_t port_dot3_power_pse_source_map[] = {$/;"	v	file:
port_id_subtype_map	lib/atoms/port.c	/^static lldpctl_map_t port_id_subtype_map[] = {$/;"	v	file:
port_med_geoid_map	lib/atoms/med.c	/^static struct atom_map port_med_geoid_map = {$/;"	v	typeref:struct:atom_map	file:
port_med_location_map	lib/atoms/med.c	/^static lldpctl_map_t port_med_location_map[] = {$/;"	v	file:
port_med_policy_map	lib/atoms/med.c	/^static struct atom_map port_med_policy_map = {$/;"	v	typeref:struct:atom_map	file:
port_med_policy_prio_map	lib/atoms/med.c	/^static struct atom_map port_med_policy_prio_map = {$/;"	v	typeref:struct:atom_map	file:
port_med_pow_devicetype_map	lib/atoms/med.c	/^static lldpctl_map_t port_med_pow_devicetype_map[] = {$/;"	v	file:
port_med_pow_priority_map	lib/atoms/med.c	/^static struct atom_map port_med_pow_priority_map = {$/;"	v	typeref:struct:atom_map	file:
port_med_pow_source_map	lib/atoms/med.c	/^static lldpctl_map_t port_med_pow_source_map[] = {$/;"	v	file:
port_med_pow_source_map2	lib/atoms/med.c	/^static lldpctl_map_t port_med_pow_source_map2[] = {$/;"	v	file:
port_status_map	lib/atoms/port.c	/^static struct atom_map port_status_map = {$/;"	v	typeref:struct:atom_map	file:
ports_list	lib/atoms/port.c	/^static struct atom_builder ports_list =$/;"	v	typeref:struct:atom_builder	file:
powerof2	compat/getline.c	74;"	d	file:
powertype	lldpd-structs.h	/^	u_int8_t		powertype; \/* If set to LLDP_DOT3_POWER_8023AT_OFF,$/;"	m	struct:lldpd_dot3_power	access:public
ppvid	lib/atom.h	/^	struct lldpd_ppvid *ppvid;$/;"	m	struct:_lldpctl_atom_ppvid_t	typeref:struct:_lldpctl_atom_ppvid_t::lldpd_ppvid	access:public
ppvid	lib/atoms/dot1.c	/^static struct atom_builder ppvid =$/;"	v	typeref:struct:atom_builder	file:
ppvids_list	lib/atoms/dot1.c	/^static struct atom_builder ppvids_list =$/;"	v	typeref:struct:atom_builder	file:
precision	lib/fixedpoint.h	/^		unsigned precision;$/;"	m	struct:fp_number::__anon10	access:public
prefix	client/kv_writer.c	/^	char *  prefix;$/;"	m	struct:kv_writer_private	file:	access:public
priority	lldpd-structs.h	/^	u_int8_t		 priority;$/;"	m	struct:lldpd_med_policy	access:public
priority	lldpd-structs.h	/^	u_int8_t		 priority;$/;"	m	struct:lldpd_med_power	access:public
priority	lldpd-structs.h	/^	u_int8_t		priority;$/;"	m	struct:lldpd_dot3_power	access:public
priv	client/writer.h	/^	void	* priv;$/;"	m	struct:writer	access:public
priv_cmd	daemon/lldpd.h	/^enum priv_cmd {$/;"	g
priv_context	daemon/lldpd.h	/^enum priv_context {$/;"	g
priv_ctl_cleanup	daemon/lldpd.h	/^void	 priv_ctl_cleanup(const char *ctlname);$/;"	p	signature:(const char *ctlname)
priv_ctl_cleanup	daemon/priv.c	/^priv_ctl_cleanup(const char *ctlname)$/;"	f	signature:(const char *ctlname)
priv_ethtool	daemon/lldpd.h	/^int    	 priv_ethtool(char*, void*, size_t);$/;"	p	signature:(char*, void*, size_t)
priv_ethtool	daemon/priv-linux.c	/^priv_ethtool(char *ifname, void *ethc, size_t length)$/;"	f	signature:(char *ifname, void *ethc, size_t length)
priv_exit	daemon/priv.c	/^priv_exit()$/;"	f	file:
priv_exit_rc_status	daemon/priv.c	/^priv_exit_rc_status(int rc, int status) {$/;"	f	file:	signature:(int rc, int status)
priv_fd	daemon/lldpd.h	/^int	 priv_fd(enum priv_context);$/;"	p	signature:(enum priv_context)
priv_fd	daemon/privsep_io.c	/^priv_fd(enum priv_context ctx)$/;"	f	signature:(enum priv_context ctx)
priv_gethostname	daemon/lldpd.h	/^char   	*priv_gethostname(void);$/;"	p	signature:(void)
priv_gethostname	daemon/priv.c	/^priv_gethostname()$/;"	f
priv_iface_description	daemon/lldpd.h	/^int	 priv_iface_description(const char *, const char *);$/;"	p	signature:(const char *, const char *)
priv_iface_description	daemon/priv.c	/^priv_iface_description(const char *name, const char *description)$/;"	f	signature:(const char *name, const char *description)
priv_iface_init	daemon/lldpd.h	/^int    	 priv_iface_init(int, char *);$/;"	p	signature:(int, char *)
priv_iface_init	daemon/priv.c	/^priv_iface_init(int index, char *iface)$/;"	f	signature:(int index, char *iface)
priv_iface_mac	daemon/lldpd.h	/^int    	 priv_iface_mac(char*, void*, size_t);$/;"	p	signature:(char*, void*, size_t)
priv_iface_mac	daemon/priv-linux.c	/^priv_iface_mac(char *ifname, void *mac, size_t length)$/;"	f	signature:(char *ifname, void *mac, size_t length)
priv_iface_multicast	daemon/lldpd.h	/^int	 priv_iface_multicast(const char *, u_int8_t *, int);$/;"	p	signature:(const char *, u_int8_t *, int)
priv_iface_multicast	daemon/priv.c	/^priv_iface_multicast(const char *name, u_int8_t *mac, int add)$/;"	f	signature:(const char *name, u_int8_t *mac, int add)
priv_iface_promisc	daemon/lldpd.h	/^int	 priv_iface_promisc(const char*);$/;"	p	signature:(const char*)
priv_iface_promisc	daemon/priv.c	/^priv_iface_promisc(const char *ifname)$/;"	f	signature:(const char *ifname)
priv_init	daemon/lldpd.h	/^void	 priv_init(const char*, int, uid_t, gid_t);$/;"	p	signature:(const char*, int, uid_t, gid_t)
priv_init	daemon/priv.c	/^void priv_init(const char *chrootdir, int ctl, uid_t uid, gid_t gid)$/;"	f	signature:(const char *chrootdir, int ctl, uid_t uid, gid_t gid)
priv_loop	daemon/priv.c	/^static void priv_loop(int privileged, int once)$/;"	f	file:	signature:(int privileged, int once)
priv_open	daemon/lldpd.h	/^int    	 priv_open(char*);$/;"	p	signature:(char*)
priv_open	daemon/priv-linux.c	/^priv_open(char *file)$/;"	f	signature:(char *file)
priv_ping	daemon/priv.c	/^static void priv_ping()$/;"	f	file:
priv_privileged_fd	daemon/lldpd.h	/^void	 priv_privileged_fd(int);$/;"	p	signature:(int)
priv_privileged_fd	daemon/privsep_io.c	/^priv_privileged_fd(int fd)$/;"	f	signature:(int fd)
priv_seccomp_init	daemon/lldpd.h	/^int priv_seccomp_init(int, int);$/;"	p	signature:(int, int)
priv_seccomp_init	daemon/priv-seccomp.c	/^priv_seccomp_init(int remote, int child)$/;"	f	signature:(int remote, int child)
priv_seccomp_trap_handler	daemon/priv-seccomp.c	/^priv_seccomp_trap_handler(int signal, siginfo_t *info, void *vctx)$/;"	f	file:	signature:(int signal, siginfo_t *info, void *vctx)
priv_seccomp_trap_install	daemon/priv-seccomp.c	/^priv_seccomp_trap_install()$/;"	f	file:
priv_setup_chroot	daemon/priv.c	/^static void priv_setup_chroot(const char *chrootdir)$/;"	f	file:	signature:(const char *chrootdir)
priv_snmp_socket	daemon/lldpd.h	/^int	 priv_snmp_socket(struct sockaddr_un *);$/;"	p	signature:(struct sockaddr_un *)
priv_snmp_socket	daemon/priv.c	/^priv_snmp_socket(struct sockaddr_un *addr)$/;"	f	signature:(struct sockaddr_un *addr)
priv_unprivileged_fd	daemon/lldpd.h	/^void	 priv_unprivileged_fd(int);$/;"	p	signature:(int)
priv_unprivileged_fd	daemon/privsep_io.c	/^priv_unprivileged_fd(int fd)$/;"	f	signature:(int fd)
priv_wait	daemon/lldpd.h	/^void	 priv_wait(void);$/;"	p	signature:(void)
priv_wait	daemon/priv.c	/^void priv_wait() {$/;"	f
privileged	client/commands.c	/^	int privileged;		\/**< Privileged command? *\/$/;"	m	struct:cmd_node	file:	access:public
privileged	daemon/privsep_io.c	/^static int privileged, unprivileged;$/;"	v	file:
prompt	client/lldpcli.c	/^prompt()$/;"	f	file:
protocol	daemon/lldpd.h	/^struct protocol {$/;"	s
protocol::arg	daemon/lldpd.h	/^	char		 arg;		\/* Argument to enable this protocol *\/$/;"	m	struct:protocol	access:public
protocol::decode	daemon/lldpd.h	/^	int(*decode)(PROTO_DECODE_SIG); \/* How to decode a frame *\/$/;"	m	struct:protocol	access:public
protocol::enabled	daemon/lldpd.h	/^	int		 enabled;	\/* Is this protocol enabled? *\/$/;"	m	struct:protocol	access:public
protocol::guess	daemon/lldpd.h	/^	int(*guess)(PROTO_GUESS_SIG);   \/* Can be NULL, use MAC address in this case *\/$/;"	m	struct:protocol	access:public
protocol::mac	daemon/lldpd.h	/^	u_int8_t	 mac[ETHER_ADDR_LEN];  \/* Destination MAC address used by this protocol *\/$/;"	m	struct:protocol	access:public
protocol::mode	daemon/lldpd.h	/^	int		 mode;		\/* > 0 mode identifier (unique per protocol) *\/$/;"	m	struct:protocol	access:public
protocol::name	daemon/lldpd.h	/^	char		*name;		\/* Name of protocol *\/$/;"	m	struct:protocol	access:public
protocol::send	daemon/lldpd.h	/^	int(*send)(PROTO_SEND_SIG);	\/* How to send a frame *\/$/;"	m	struct:protocol	access:public
protos	daemon/lldpd.c	/^static struct protocol protos[] =$/;"	v	typeref:struct:protocol	file:
read_fixed_precision	lib/atoms/med.c	/^read_fixed_precision(lldpctl_atom_t *atom,$/;"	f	file:	signature:(lldpctl_atom_t *atom, char *buffer, unsigned shift, unsigned intbits, unsigned fltbits, const char *suffix)
readline	client/client.h	/^extern char *readline();$/;"	p	signature:()
readline	client/lldpcli.c	/^readline(const char *p)$/;"	f	file:	signature:(const char *p)
realloc	compat/compat.h	/^void *realloc(void *ptr, size_t size);$/;"	p	signature:(void *ptr, size_t size)
realloc	compat/realloc.c	4;"	d	file:
receive_fd	daemon/lldpd.h	/^int	 receive_fd(enum priv_context);$/;"	p	signature:(enum priv_context)
receive_fd	daemon/privsep_io.c	/^receive_fd(enum priv_context ctx)$/;"	f	signature:(enum priv_context ctx)
recv	lib/atom.h	/^	lldpctl_recv_callback recv; \/* 接收回调函数*\/$/;"	m	struct:lldpctl_conn_t	access:public
recv	lldpd-structs.h	/^	int(*recv)(struct lldpd *,$/;"	m	struct:lldpd_ops	access:public
ref	marshal.c	/^struct ref {$/;"	s	file:
ref::TAILQ_ENTRY	marshal.c	/^	TAILQ_ENTRY(ref) next;$/;"	p	struct:ref	file:	access:public
ref::dummy	marshal.c	/^	int dummy;		\/* To renumerate pointers *\/$/;"	m	struct:ref	file:	access:public
ref::pointer	marshal.c	/^	void *pointer;$/;"	m	struct:ref	file:	access:public
register_commands	client/lldpcli.c	/^static struct cmd_node* register_commands()$/;"	f	file:
register_commands_configure	client/client.h	/^void register_commands_configure(struct cmd_node *);$/;"	p	signature:(struct cmd_node *)
register_commands_configure	client/conf.c	/^void register_commands_configure(struct cmd_node *root)$/;"	f	signature:(struct cmd_node *root)
register_commands_configure_dot3	client/client.h	/^void register_commands_configure_dot3(struct cmd_node *);$/;"	p	signature:(struct cmd_node *)
register_commands_configure_dot3	client/conf-dot3.c	/^register_commands_configure_dot3(struct cmd_node *configure)$/;"	f	signature:(struct cmd_node *configure)
register_commands_configure_lldp	client/client.h	/^void register_commands_configure_lldp(struct cmd_node *, struct cmd_node *);$/;"	p	signature:(struct cmd_node *, struct cmd_node *)
register_commands_configure_lldp	client/conf-lldp.c	/^register_commands_configure_lldp(struct cmd_node *configure,$/;"	f	signature:(struct cmd_node *configure, struct cmd_node *unconfigure)
register_commands_configure_lldp_custom_tlvs	client/conf-lldp.c	/^register_commands_configure_lldp_custom_tlvs(struct cmd_node *configure_lldp,$/;"	f	signature:(struct cmd_node *configure_lldp, struct cmd_node *unconfigure_lldp)
register_commands_configure_med	client/client.h	/^void register_commands_configure_med(struct cmd_node *, struct cmd_node *);$/;"	p	signature:(struct cmd_node *, struct cmd_node *)
register_commands_configure_med	client/conf-med.c	/^register_commands_configure_med(struct cmd_node *configure, struct cmd_node *unconfigure)$/;"	f	signature:(struct cmd_node *configure, struct cmd_node *unconfigure)
register_commands_configure_system	client/client.h	/^void register_commands_configure_system(struct cmd_node *, struct cmd_node *);$/;"	p	signature:(struct cmd_node *, struct cmd_node *)
register_commands_configure_system	client/conf-system.c	/^register_commands_configure_system(struct cmd_node *configure,$/;"	f	signature:(struct cmd_node *configure, struct cmd_node *unconfigure)
register_commands_dot3pow	client/client.h	/^void register_commands_dot3pow(struct cmd_node *);$/;"	p	signature:(struct cmd_node *)
register_commands_dot3pow	client/conf-power.c	/^register_commands_dot3pow(struct cmd_node *configure_dot3)$/;"	f	signature:(struct cmd_node *configure_dot3)
register_commands_medfast	client/conf-med.c	/^register_commands_medfast(struct cmd_node *med, struct cmd_node *nomed)$/;"	f	file:	signature:(struct cmd_node *med, struct cmd_node *nomed)
register_commands_medloc	client/conf-med.c	/^register_commands_medloc(struct cmd_node *configure_med)$/;"	f	file:	signature:(struct cmd_node *configure_med)
register_commands_medloc_addr	client/conf-med.c	/^register_commands_medloc_addr(struct cmd_node *configure_medlocation)$/;"	f	file:	signature:(struct cmd_node *configure_medlocation)
register_commands_medloc_coord	client/conf-med.c	/^register_commands_medloc_coord(struct cmd_node *configure_medlocation)$/;"	f	file:	signature:(struct cmd_node *configure_medlocation)
register_commands_medloc_elin	client/conf-med.c	/^register_commands_medloc_elin(struct cmd_node *configure_medlocation)$/;"	f	file:	signature:(struct cmd_node *configure_medlocation)
register_commands_medpol	client/conf-med.c	/^register_commands_medpol(struct cmd_node *configure_med)$/;"	f	file:	signature:(struct cmd_node *configure_med)
register_commands_medpow	client/client.h	/^void register_commands_medpow(struct cmd_node *);$/;"	p	signature:(struct cmd_node *)
register_commands_medpow	client/conf-power.c	/^register_commands_medpow(struct cmd_node *configure_med)$/;"	f	signature:(struct cmd_node *configure_med)
register_commands_pow_priority	client/conf-power.c	/^register_commands_pow_priority(struct cmd_node *priority, int key)$/;"	f	file:	signature:(struct cmd_node *priority, int key)
register_commands_pow_source	client/conf-power.c	/^register_commands_pow_source(struct cmd_node *source)$/;"	f	file:	signature:(struct cmd_node *source)
register_commands_show	client/client.h	/^void register_commands_show(struct cmd_node *);$/;"	p	signature:(struct cmd_node *)
register_commands_show	client/show.c	/^void register_commands_show(struct cmd_node *root)$/;"	f	signature:(struct cmd_node *root)
register_commands_srcmac_type	client/conf-system.c	/^register_commands_srcmac_type(struct cmd_node *configure)$/;"	f	file:	signature:(struct cmd_node *configure)
register_commands_watch	client/client.h	/^void register_commands_watch(struct cmd_node *);$/;"	p	signature:(struct cmd_node *)
register_commands_watch	client/show.c	/^register_commands_watch(struct cmd_node *root)$/;"	f	signature:(struct cmd_node *root)
register_common_commands	client/show.c	/^void register_common_commands(struct cmd_node *root, int neighbor)$/;"	f	signature:(struct cmd_node *root, int neighbor)
register_summary_command	client/show.c	/^register_summary_command(struct cmd_node *root)$/;"	f	signature:(struct cmd_node *root)
register_sysORTable	daemon/agent.c	/^extern int register_sysORTable(oid *, size_t, const char *);$/;"	p	file:	signature:(oid *, size_t, const char *)
requested	lldpd-structs.h	/^	u_int16_t		requested;$/;"	m	struct:lldpd_dot3_power	access:public
res_init	daemon/priv.c	/^int res_init (void);$/;"	p	file:	signature:(void)
rl_bind_key	client/client.h	/^extern int rl_bind_key(int, int(*f)(int, int));$/;"	p	signature:(int, int(*f)(int, int))
rl_forced_update_display	client/client.h	/^extern void rl_forced_update_display(void);$/;"	p	signature:(void)
rl_insert_text	client/client.h	/^extern int rl_insert_text(const char*);$/;"	p	signature:(const char*)
root	client/lldpcli.c	/^static struct cmd_node *root = NULL;    \/\/ cmd根尾队列 $/;"	v	typeref:struct:cmd_node	file:
rpl_malloc	compat/malloc.c	/^rpl_malloc(size_t n)$/;"	f	signature:(size_t n)
rpl_realloc	compat/realloc.c	/^rpl_realloc(void *ptr, size_t n)$/;"	f	signature:(void *ptr, size_t n)
rxtx	lldpd-structs.h	/^	int rxtx;$/;"	m	struct:lldpd_port_set	access:public
saved_argv	daemon/lldpd.c	/^static char		**saved_argv;$/;"	v	file:
scfg	daemon/agent.c	38;"	d	file:
send	daemon/lldpd.h	/^	int(*send)(PROTO_SEND_SIG);	\/* How to send a frame *\/$/;"	m	struct:protocol	access:public
send	lib/atom.h	/^	lldpctl_send_callback send; \/* 发送回调函数*\/$/;"	m	struct:lldpctl_conn_t	access:public
send	lldpd-structs.h	/^	int(*send)(struct lldpd *,$/;"	m	struct:lldpd_ops	access:public
send_fd	daemon/lldpd.h	/^void	 send_fd(enum priv_context, int);$/;"	p	signature:(enum priv_context, int)
send_fd	daemon/privsep_io.c	/^void send_fd(enum priv_context ctx, int fd)$/;"	f	signature:(enum priv_context ctx, int fd)
sep	client/text_writer.c	/^static char sep[] = "-------------------------------------------------------------------------------";$/;"	v	file:
seq	daemon/protocols/edp.c	/^static int seq = 0;$/;"	v	file:
set	lib/atom.h	/^	lldpctl_atom_t *(*set)(lldpctl_atom_t *, lldpctl_key_t, lldpctl_atom_t *);$/;"	m	struct:lldpctl_atom_t	access:public
set	lib/atom.h	/^	lldpctl_atom_t*      (*set)(lldpctl_atom_t *, lldpctl_key_t, lldpctl_atom_t *);$/;"	m	struct:atom_builder	access:public
set_buffer	lib/atom.h	/^	lldpctl_atom_t *(*set_buffer)(lldpctl_atom_t *, lldpctl_key_t, const u_int8_t *, size_t);$/;"	m	struct:lldpctl_atom_t	access:public
set_buffer	lib/atom.h	/^	lldpctl_atom_t*      (*set_buffer)(lldpctl_atom_t *, lldpctl_key_t, const u_int8_t *, size_t);$/;"	m	struct:atom_builder	access:public
set_int	lib/atom.h	/^	lldpctl_atom_t *(*set_int)(lldpctl_atom_t *, lldpctl_key_t, long int);$/;"	m	struct:lldpctl_atom_t	access:public
set_int	lib/atom.h	/^	lldpctl_atom_t*      (*set_int)(lldpctl_atom_t *, lldpctl_key_t, long int);$/;"	m	struct:atom_builder	access:public
set_str	lib/atom.h	/^	lldpctl_atom_t *(*set_str)(lldpctl_atom_t *, lldpctl_key_t, const char *);$/;"	m	struct:lldpctl_atom_t	access:public
set_str	lib/atom.h	/^	lldpctl_atom_t*      (*set_str)(lldpctl_atom_t *, lldpctl_key_t, const char *);$/;"	m	struct:atom_builder	access:public
setproctitle	compat/compat.h	/^void setproctitle(const char *fmt, ...) __attribute__ ((format (printf, 1, 2)));$/;"	p	signature:(const char *fmt, ...)
setproctitle	compat/setproctitle.c	/^setproctitle(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
sig_chld	daemon/priv.c	/^sig_chld(int sig)$/;"	f	file:	signature:(int sig)
sig_pass_to_chld	daemon/priv.c	/^sig_pass_to_chld(int sig)$/;"	f	file:	signature:(int sig)
size	lib/atom.h	/^	size_t size;	\/* Size of structure to allocate *\/$/;"	m	struct:atom_builder	access:public
size	lldpd-structs.h	/^	int size;$/;"	m	struct:lldpd_frame	access:public
size	marshal.c	/^	size_t        size;$/;"	m	struct:marshal_serialized	file:	access:public
size	marshal.h	/^	size_t  size;		\/* Size of the structure *\/$/;"	m	struct:marshal_info	access:public
snmp_read2	daemon/event.c	70;"	d	file:
snmp_select_info2	daemon/event.c	71;"	d	file:
sonmp_chassis	daemon/protocols/sonmp.h	/^struct sonmp_chassis {$/;"	s
sonmp_chassis::description	daemon/protocols/sonmp.h	/^	char *description;$/;"	m	struct:sonmp_chassis	access:public
sonmp_chassis::type	daemon/protocols/sonmp.h	/^	int type;$/;"	m	struct:sonmp_chassis	access:public
sonmp_chassis_types	daemon/protocols/sonmp.c	/^static struct sonmp_chassis sonmp_chassis_types[] = {$/;"	v	typeref:struct:sonmp_chassis	file:
sonmp_decode	daemon/lldpd.h	/^int	 sonmp_decode(PROTO_DECODE_SIG);$/;"	p	signature:(PROTO_DECODE_SIG)
sonmp_decode	daemon/protocols/sonmp.c	/^sonmp_decode(struct lldpd *cfg, char *frame, int s,$/;"	f	signature:(struct lldpd *cfg, char *frame, int s, struct lldpd_hardware *hardware, struct lldpd_chassis **newchassis, struct lldpd_port **newport)
sonmp_send	daemon/lldpd.h	/^int	 sonmp_send(PROTO_SEND_SIG);$/;"	p	signature:(PROTO_SEND_SIG)
sonmp_send	daemon/protocols/sonmp.c	/^sonmp_send(struct lldpd *global,$/;"	f	signature:(struct lldpd *global, struct lldpd_hardware *hardware)
source	lldpd-structs.h	/^	u_int8_t		 source;$/;"	m	struct:lldpd_med_power	access:public
source	lldpd-structs.h	/^	u_int8_t		source;$/;"	m	struct:lldpd_dot3_power	access:public
start	client/writer.h	/^	void	(*start)(struct writer *, const char * tag, const char * descr);$/;"	m	struct:writer	access:public
state	lib/atom.h	/^	int state;		\/* Current state *\/$/;"	m	struct:lldpctl_conn_t	access:public
state	lldpd-structs.h	/^	int state;$/;"	m	struct:lldpd_neighbor_change	access:public
state_data	lib/atom.h	/^	char *state_data;	\/* Data attached to the state. It is used to$/;"	m	struct:lldpctl_conn_t	access:public
string	lib/lldpctl.h	/^	char *string;$/;"	m	struct:__anon6	access:public
strlcpy	compat/compat.h	/^size_t	strlcpy(char *, const char *, size_t);$/;"	p	signature:(char *, const char *, size_t)
strlcpy	compat/strlcpy.c	/^strlcpy(char *dst, const char *src, size_t siz)$/;"	f	signature:(char *dst, const char *src, size_t siz)
strndup	compat/compat.h	/^char	*strndup(const char *, size_t);$/;"	p	signature:(const char *, size_t)
strndup	compat/strndup.c	/^strndup(const char *string, size_t maxlen)$/;"	f	signature:(const char *string, size_t maxlen)
strnlen	compat/compat.h	/^size_t	strnlen(const char *, size_t);$/;"	p	signature:(const char *, size_t)
strnlen	compat/strnlen.c	/^strnlen(const char *string, size_t maxlen)$/;"	f	signature:(const char *string, size_t maxlen)
strtonum	compat/compat.h	/^long long strtonum(const char *, long long, long long, const char **);$/;"	p	signature:(const char *, long long, long long, const char **)
strtonum	compat/strtonum.c	/^strtonum(const char *numstr, long long minval, long long maxval,$/;"	f	signature:(const char *numstr, long long minval, long long maxval, const char **errstrp)
subscribed	daemon/event.c	/^	int    subscribed;	\/* Is this client subscribed to changes? *\/$/;"	m	struct:lldpd_one_client	file:	access:public
substruct	marshal.h	/^	substruct,$/;"	e	enum:marshal_subinfo_kind
subtype	lldpd-structs.h	/^	u_int8_t		subtype;$/;"	m	struct:lldpd_custom	access:public
supported	lldpd-structs.h	/^	u_int8_t		supported;$/;"	m	struct:lldpd_dot3_power	access:public
swap_bits	daemon/agent.c	/^swap_bits(uint8_t n)$/;"	f	file:	signature:(uint8_t n)
sync_connect	lib/connection.c	/^sync_connect(lldpctl_conn_t *lldpctl)$/;"	f	file:	signature:(lldpctl_conn_t *lldpctl)
sync_recv	lib/connection.c	/^static ssize_t sync_recv(lldpctl_conn_t *lldpctl,$/;"	f	file:	signature:(lldpctl_conn_t *lldpctl, const uint8_t *data, size_t length, void *user_data)
sync_send	lib/connection.c	/^static ssize_t sync_send(lldpctl_conn_t *lldpctl,$/;"	f	file:	signature:(lldpctl_conn_t *lldpctl, const uint8_t *data, size_t length, void *user_data)
tag_attr	client/writer.h	33;"	d
tag_data	client/writer.h	34;"	d
tag_datatag	client/writer.h	36;"	d
tag_end	client/writer.h	35;"	d
tag_start	client/writer.h	32;"	d
tagged	lldpd-structs.h	/^	u_int8_t		 tagged;$/;"	m	struct:lldpd_med_policy	access:public
tlv	lib/atom.h	/^	struct lldpd_custom *tlv;$/;"	m	struct:_lldpctl_atom_custom_t	typeref:struct:_lldpctl_atom_custom_t::lldpd_custom	access:public
token	client/commands.c	/^	const char *token;	\/**< Token to enter this cnode *\/$/;"	m	struct:cmd_node	file:	access:public
tokenize_free	client/client.h	/^void tokenize_free(int, char**);$/;"	p	signature:(int, char**)
tokenize_free	client/tokenizer.c	/^tokenize_free(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
tokenize_line	client/client.h	/^int tokenize_line(const char*, int*, char***);$/;"	p	signature:(const char*, int*, char***)
tokenize_line	client/tokenizer.c	/^int tokenize_line(const char *line, int *argc, char ***argv)$/;"	f	signature:(const char *line, int *argc, char ***argv)
tokens	log.c	/^static const char *tokens[MAX_DBG_TOKENS + 1] = {NULL};$/;"	v	file:
totag	client/client.h	/^char*  totag(const char *);$/;"	p	signature:(const char *)
totag	client/misc.c	/^totag(const char *value)$/;"	f	signature:(const char *value)
translate	log.c	/^translate(int fd, int priority)$/;"	f	file:	signature:(int fd, int priority)
trapped	daemon/priv-seccomp.c	/^static int trapped = 0;$/;"	v	file:
txt_attr	client/text_writer.c	/^txt_attr(struct writer *w, const char *tag, const char *descr, const char *value) {$/;"	f	file:	signature:(struct writer *w, const char *tag, const char *descr, const char *value)
txt_data	client/text_writer.c	/^txt_data(struct writer *w, const char *data) {$/;"	f	file:	signature:(struct writer *w, const char *data)
txt_end	client/text_writer.c	/^txt_end(struct writer *w) {$/;"	f	file:	signature:(struct writer *w)
txt_finish	client/text_writer.c	/^txt_finish(struct writer *w) {$/;"	f	file:	signature:(struct writer *w)
txt_init	client/text_writer.c	/^txt_init(FILE* fh) {$/;"	f	signature:(FILE* fh)
txt_init	client/writer.h	/^extern struct writer *txt_init(FILE *);$/;"	p	signature:(FILE *)
txt_start	client/text_writer.c	/^txt_start(struct writer *w , const char *tag, const char *descr) {$/;"	f	file:	signature:(struct writer *w , const char *tag, const char *descr)
txt_writer_private	client/text_writer.c	/^struct txt_writer_private {$/;"	s	file:
txt_writer_private::attrs	client/text_writer.c	/^	int	attrs;$/;"	m	struct:txt_writer_private	file:	access:public
txt_writer_private::fh	client/text_writer.c	/^	FILE *	fh;$/;"	m	struct:txt_writer_private	file:	access:public
txt_writer_private::level	client/text_writer.c	/^	int	level;$/;"	m	struct:txt_writer_private	file:	access:public
type	ctl.h	/^	enum hmsg_type type;$/;"	m	struct:hmsg_header	typeref:enum:hmsg_header::hmsg_type	access:public
type	daemon/client.c	/^	enum hmsg_type type;$/;"	m	struct:client_handle	typeref:enum:client_handle::hmsg_type	file:	access:public
type	daemon/lldpd.h	/^	int   type;		\/* Type (see IFACE_*_T) *\/$/;"	m	struct:interfaces_device	access:public
type	daemon/protocols/sonmp.h	/^	int type;$/;"	m	struct:sonmp_chassis	access:public
type	lib/atom.h	/^	atom_t type;	\/* Atom type *\/$/;"	m	struct:atom_builder	access:public
type	lib/atom.h	/^	atom_t type;$/;"	m	struct:lldpctl_atom_t	access:public
type	lib/atom.h	/^	int type;$/;"	m	struct:_lldpctl_atom_med_caelement_t	access:public
type	lldpd-structs.h	/^	u_int8_t		 type;$/;"	m	struct:lldpd_med_policy	access:public
types	daemon/frame.h	/^} types;$/;"	v	typeref:union:__anon1
unixDomain	daemon/agent_priv.c	/^static netsnmp_tdomain unixDomain;$/;"	v	file:
unknown	lldpd-structs.h	/^	u_int8_t		 unknown;$/;"	m	struct:lldpd_med_policy	access:public
unprivileged	daemon/privsep_io.c	/^static int privileged, unprivileged;$/;"	v	file:
unregister_sysORTable	daemon/agent.c	/^extern int unregister_sysORTable(oid *, size_t);$/;"	p	file:	signature:(oid *, size_t)
upper	daemon/lldpd.h	/^	struct interfaces_device *upper; \/* Upper interface (for a bridge or a bond) *\/$/;"	m	struct:interfaces_device	typeref:struct:interfaces_device::interfaces_device	access:public
upper_idx	daemon/lldpd.h	/^	int upper_idx;		\/* Index to upper interface *\/$/;"	m	struct:interfaces_device	access:public
usage	client/lldpcli.c	/^usage()$/;"	f	file:
usage	daemon/lldpd.c	/^static void		 usage(void);$/;"	p	file:	signature:(void)
usage	daemon/lldpd.c	/^usage(void)$/;"	f	file:	signature:(void)
use_syslog	log.c	/^static int	 use_syslog = 0;$/;"	v	file:
user_data	lib/atom.h	/^	void *user_data;	    \/* Callback user data *\/$/;"	m	struct:lldpctl_conn_t	access:public
v_entries	lldpd-structs.h	/^	TAILQ_ENTRY(lldpd_vlan)  v_entries;$/;"	m	struct:lldpd_vlan	access:public
v_name	lldpd-structs.h	/^	char			*v_name;$/;"	m	struct:lldpd_vlan	access:public
v_vid	lldpd-structs.h	/^	u_int16_t		 v_vid;$/;"	m	struct:lldpd_vlan	access:public
val	lldpd-structs.h	/^	u_int16_t		 val;$/;"	m	struct:lldpd_med_power	access:public
validate	client/commands.c	/^	int(*validate)(struct cmd_env*, void *);$/;"	m	struct:cmd_node	file:	access:public
value	client/commands.c	/^	const char *value;	      \/**< Value for this element *\/$/;"	m	struct:cmd_env_el	file:	access:public
value	lib/atom.h	/^	lldpctl_atom_t      *(*value)(lldpctl_atom_t *, lldpctl_atom_iter_t *);$/;"	m	struct:lldpctl_atom_t	access:public
value	lib/atom.h	/^	lldpctl_atom_t*      (*value)(lldpctl_atom_t *, lldpctl_atom_iter_t *); \/* Return the current object for the provided iterator *\/$/;"	m	struct:atom_builder	access:public
value	lib/atom.h	/^	uint8_t *value;$/;"	m	struct:_lldpctl_atom_med_caelement_t	access:public
value	lib/fixedpoint.h	/^		long long value;$/;"	m	struct:fp_number::__anon10	access:public
value	lib/fixedpoint.h	/^		long long value;$/;"	m	struct:fp_number::__anon9	access:public
value	lib/lldpctl.h	/^	int   value;$/;"	m	struct:__anon6	access:public
vasprintf	compat/asprintf.c	/^int vasprintf(char **str, const char *fmt, va_list ap)$/;"	f	signature:(char **str, const char *fmt, va_list ap)
vasprintf	compat/compat.h	/^int vasprintf(char **, const char *, va_list) __attribute__ ((format (printf, 2, 0)));$/;"	p	signature:(char **, const char *, va_list)
version_check	daemon/lldpd.c	/^static void version_check(void) {}$/;"	f	file:	signature:(void)
version_check	daemon/lldpd.c	/^version_check(void)$/;"	f	file:	signature:(void)
version_convert	daemon/lldpd.c	/^version_convert(const char *sversion, unsigned iversion[], size_t n)$/;"	f	file:	signature:(const char *sversion, unsigned iversion[], size_t n)
version_display	log.h	/^void		 version_display(FILE *, const char *, int);$/;"	p	signature:(FILE *, const char *, int)
version_display	version.c	/^version_display(FILE *destination, const char *progname, int verbose)$/;"	f	signature:(FILE *destination, const char *progname, int verbose)
version_display_array	version.c	/^version_display_array(FILE *destination, const char *prefix, const char *const *items)$/;"	f	file:	signature:(FILE *destination, const char *prefix, const char *const *items)
vfork	daemon/lldpd.h	44;"	d
vid	lldpd-structs.h	/^	u_int16_t		 vid;$/;"	m	struct:lldpd_med_policy	access:public
vlan	lib/atom.h	/^	struct lldpd_vlan *vlan;$/;"	m	struct:_lldpctl_atom_vlan_t	typeref:struct:_lldpctl_atom_vlan_t::lldpd_vlan	access:public
vlan	lib/atoms/dot1.c	/^static struct atom_builder vlan =$/;"	v	typeref:struct:atom_builder	file:
vlanid	daemon/lldpd.h	/^	int   vlanid;		\/* If a VLAN, what is the VLAN ID? *\/$/;"	m	struct:interfaces_device	access:public
vlans_list	lib/atoms/dot1.c	/^static struct atom_builder vlans_list =$/;"	v	typeref:struct:atom_builder	file:
vlog	log.c	/^static void	 vlog(int, const char *, const char *, va_list);$/;"	p	file:	signature:(int, const char *, const char *, va_list)
vlog	log.c	/^vlog(int pri, const char *token, const char *fmt, va_list ap)$/;"	f	file:	signature:(int pri, const char *token, const char *fmt, va_list ap)
vp	daemon/agent.c	/^	struct variable *vp;$/;"	m	struct:header_index	typeref:struct:header_index::variable	file:	access:public
vsyslog	compat/compat.h	/^void vsyslog(int, const char *, va_list) __attribute__ ((format (printf, 2, 0)));$/;"	p	signature:(int, const char *, va_list)
vsyslog	compat/vsyslog.c	/^vsyslog(int facility, const char *format, va_list ap) {$/;"	f	signature:(int facility, const char *format, va_list ap)
w	client/show.c	/^	struct writer *w;$/;"	m	struct:watcharg	typeref:struct:watcharg::writer	file:	access:public
watch_cb	lib/atom.h	/^	lldpctl_change_callback watch_cb;   \/* 通知回调函数 *\/$/;"	m	struct:lldpctl_conn_t	access:public
watch_data	lib/atom.h	/^	void *watch_data;$/;"	m	struct:lldpctl_conn_t	access:public
watch_triggered	lib/atom.h	/^	int watch_triggered;$/;"	m	struct:lldpctl_conn_t	access:public
watcharg	client/show.c	/^struct watcharg {$/;"	s	file:
watcharg::env	client/show.c	/^	struct cmd_env *env;$/;"	m	struct:watcharg	typeref:struct:watcharg::cmd_env	file:	access:public
watcharg::nb	client/show.c	/^	size_t nb;$/;"	m	struct:watcharg	file:	access:public
watcharg::w	client/show.c	/^	struct writer *w;$/;"	m	struct:watcharg	typeref:struct:watcharg::writer	file:	access:public
watchcb	client/show.c	/^watchcb(lldpctl_conn_t *conn,$/;"	f	file:	signature:(lldpctl_conn_t *conn, lldpctl_change_t type, lldpctl_atom_t *interface, lldpctl_atom_t *neighbor, void *data)
word	client/commands.c	/^	const char *word;$/;"	m	struct:candidate_word	file:	access:public
writer	client/writer.h	/^struct writer {$/;"	s
writer::attr	client/writer.h	/^	void	(*attr)(struct writer *, const char * tag, const char * descr, const char * value);$/;"	m	struct:writer	access:public
writer::data	client/writer.h	/^	void	(*data)(struct writer *, const char * data);$/;"	m	struct:writer	access:public
writer::end	client/writer.h	/^	void	(*end)(struct writer *);$/;"	m	struct:writer	access:public
writer::finish	client/writer.h	/^	void	(*finish)(struct writer *);$/;"	m	struct:writer	access:public
writer::priv	client/writer.h	/^	void	* priv;$/;"	m	struct:writer	access:public
writer::start	client/writer.h	/^	void	(*start)(struct writer *, const char * tag, const char * descr);$/;"	m	struct:writer	access:public
xml_attr	client/xml_writer.c	/^void xml_attr(struct writer *w, const char *tag, const char *descr, const char *value ) {$/;"	f	signature:(struct writer *w, const char *tag, const char *descr, const char *value )
xml_data	client/xml_writer.c	/^void xml_data(struct writer *w, const char *data) {$/;"	f	signature:(struct writer *w, const char *data)
xml_end	client/xml_writer.c	/^void xml_end(struct writer *w) {$/;"	f	signature:(struct writer *w)
xml_finish	client/xml_writer.c	/^void xml_finish(struct writer *w) {$/;"	f	signature:(struct writer *w)
xml_init	client/writer.h	/^extern struct writer *xml_init(FILE *);$/;"	p	signature:(FILE *)
xml_init	client/xml_writer.c	/^struct writer *xml_init(FILE *fh) {$/;"	f	signature:(FILE *fh)
xml_new_writer	client/xml_writer.c	/^void xml_new_writer(struct xml_writer_private *priv)$/;"	f	signature:(struct xml_writer_private *priv)
xml_start	client/xml_writer.c	/^void xml_start(struct writer *w , const char *tag, const char *descr ) {$/;"	f	signature:(struct writer *w , const char *tag, const char *descr )
xml_writer_private	client/xml_writer.c	/^struct xml_writer_private {$/;"	s	file:
xml_writer_private::depth	client/xml_writer.c	/^	ssize_t depth;$/;"	m	struct:xml_writer_private	file:	access:public
xml_writer_private::doc	client/xml_writer.c	/^	xmlDocPtr doc;$/;"	m	struct:xml_writer_private	file:	access:public
xml_writer_private::fh	client/xml_writer.c	/^	FILE *fh;$/;"	m	struct:xml_writer_private	file:	access:public
xml_writer_private::xw	client/xml_writer.c	/^	xmlTextWriterPtr xw;$/;"	m	struct:xml_writer_private	file:	access:public
xstrdup	daemon/client.c	/^xstrdup(const char *str)$/;"	f	file:	signature:(const char *str)
xw	client/xml_writer.c	/^	xmlTextWriterPtr xw;$/;"	m	struct:xml_writer_private	file:	access:public
