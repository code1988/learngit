!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_SIZE	ucimap.h	26;"	d
BITFIELD_SIZE	ucimap.h	29;"	d
BUILD_CAST	uci.h	597;"	d
CLI_FLAG_BATCH	cli.c	/^	CLI_FLAG_BATCH =    (1 << 3),$/;"	e	enum:__anon7	file:
CLI_FLAG_MERGE	cli.c	/^	CLI_FLAG_MERGE =    (1 << 0),$/;"	e	enum:__anon7	file:
CLI_FLAG_NOCOMMIT	cli.c	/^	CLI_FLAG_NOCOMMIT = (1 << 2),$/;"	e	enum:__anon7	file:
CLI_FLAG_QUIET	cli.c	/^	CLI_FLAG_QUIET =    (1 << 1),$/;"	e	enum:__anon7	file:
CLI_FLAG_SHOW_EXT	cli.c	/^	CLI_FLAG_SHOW_EXT = (1 << 4),$/;"	e	enum:__anon7	file:
CLR_BIT	ucimap.h	31;"	d
CMD_ADD	cli.c	/^	CMD_ADD,$/;"	e	enum:__anon8	file:
CMD_ADD_LIST	cli.c	/^	CMD_ADD_LIST,$/;"	e	enum:__anon8	file:
CMD_CHANGES	cli.c	/^	CMD_CHANGES,$/;"	e	enum:__anon8	file:
CMD_COMMIT	cli.c	/^	CMD_COMMIT,$/;"	e	enum:__anon8	file:
CMD_COMMIT	lua/uci.c	/^	CMD_COMMIT,$/;"	e	enum:pkg_cmd	file:
CMD_DEL	cli.c	/^	CMD_DEL,$/;"	e	enum:__anon8	file:
CMD_DEL_LIST	cli.c	/^	CMD_DEL_LIST,$/;"	e	enum:__anon8	file:
CMD_EXPORT	cli.c	/^	CMD_EXPORT,$/;"	e	enum:__anon8	file:
CMD_GET	cli.c	/^	CMD_GET,$/;"	e	enum:__anon8	file:
CMD_HELP	cli.c	/^	CMD_HELP,$/;"	e	enum:__anon8	file:
CMD_IMPORT	cli.c	/^	CMD_IMPORT,$/;"	e	enum:__anon8	file:
CMD_RENAME	cli.c	/^	CMD_RENAME,$/;"	e	enum:__anon8	file:
CMD_REORDER	cli.c	/^	CMD_REORDER,$/;"	e	enum:__anon8	file:
CMD_REVERT	cli.c	/^	CMD_REVERT,$/;"	e	enum:__anon8	file:
CMD_REVERT	lua/uci.c	/^	CMD_REVERT$/;"	e	enum:pkg_cmd	file:
CMD_SAVE	lua/uci.c	/^	CMD_SAVE,$/;"	e	enum:pkg_cmd	file:
CMD_SET	cli.c	/^	CMD_SET,$/;"	e	enum:__anon8	file:
CMD_SHOW	cli.c	/^	CMD_SHOW,$/;"	e	enum:__anon8	file:
DPRINTF	lua/uci.c	32;"	d	file:
DPRINTF	lua/uci.c	34;"	d	file:
DPRINTF	uci_internal.h	164;"	d
DPRINTF	uci_internal.h	166;"	d
HLIST_HEAD	list.h	470;"	d
HLIST_HEAD_INIT	list.h	469;"	d
INIT_HLIST_HEAD	list.h	471;"	d
INIT_HLIST_NODE	list.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f
INIT_LIST_HEAD	list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
LINEBUF	file.c	35;"	d	file:
LIST_HEAD	list.h	34;"	d
LIST_HEAD_INIT	list.h	32;"	d
MAX_ARGS	cli.c	22;"	d	file:
METANAME	lua/uci.c	28;"	d	file:
MODNAME	lua/uci.c	27;"	d	file:
SET_BIT	ucimap.h	35;"	d
TEST_BIT	ucimap.h	39;"	d
UCIMAP_BOOL	ucimap.h	/^	UCIMAP_BOOL     = 0x2,$/;"	e	enum:ucimap_type
UCIMAP_CUSTOM	ucimap.h	/^	UCIMAP_CUSTOM	= 0x0,$/;"	e	enum:ucimap_type
UCIMAP_FLAGS	ucimap.h	/^	UCIMAP_FLAGS     = 0xff00, \/* flags mask *\/$/;"	e	enum:ucimap_type
UCIMAP_INT	ucimap.h	/^	UCIMAP_INT      = 0x3,$/;"	e	enum:ucimap_type
UCIMAP_LIST	ucimap.h	/^	UCIMAP_LIST     = 0x10,$/;"	e	enum:ucimap_type
UCIMAP_LIST_AUTO	ucimap.h	/^	UCIMAP_LIST_AUTO = 0x0100,$/;"	e	enum:ucimap_type
UCIMAP_OPTION	ucimap.h	95;"	d
UCIMAP_SECTION	ucimap.h	/^	UCIMAP_SECTION  = 0x4,$/;"	e	enum:ucimap_type
UCIMAP_SECTION	ucimap.h	102;"	d
UCIMAP_SIMPLE	ucimap.h	/^	UCIMAP_SIMPLE   = 0x00,$/;"	e	enum:ucimap_type
UCIMAP_STRING	ucimap.h	/^	UCIMAP_STRING   = 0x1,$/;"	e	enum:ucimap_type
UCIMAP_SUBTYPE	ucimap.h	/^	UCIMAP_SUBTYPE  = 0xf, \/* subtype mask *\/$/;"	e	enum:ucimap_type
UCIMAP_TYPE	ucimap.h	/^	UCIMAP_TYPE     = 0xf0, \/* type mask *\/$/;"	e	enum:ucimap_type
UCI_ASSERT	uci_internal.h	251;"	d
UCI_BACKEND	uci_internal.h	146;"	d
UCI_CMD_ADD	uci.h	/^	UCI_CMD_ADD,$/;"	e	enum:uci_command
UCI_CMD_CHANGE	uci.h	/^	UCI_CMD_CHANGE,$/;"	e	enum:uci_command
UCI_CMD_LIST_ADD	uci.h	/^	UCI_CMD_LIST_ADD,$/;"	e	enum:uci_command
UCI_CMD_LIST_DEL	uci.h	/^	UCI_CMD_LIST_DEL,$/;"	e	enum:uci_command
UCI_CMD_REMOVE	uci.h	/^	UCI_CMD_REMOVE,$/;"	e	enum:uci_command
UCI_CMD_RENAME	uci.h	/^	UCI_CMD_RENAME,$/;"	e	enum:uci_command
UCI_CMD_REORDER	uci.h	/^	UCI_CMD_REORDER,$/;"	e	enum:uci_command
UCI_CONFDIR	uci.h	38;"	d
UCI_DIRMODE	uci.h	40;"	d
UCI_ERR_DUPLICATE	uci.h	/^	UCI_ERR_DUPLICATE,$/;"	e	enum:__anon4
UCI_ERR_INVAL	uci.h	/^	UCI_ERR_INVAL,$/;"	e	enum:__anon4
UCI_ERR_IO	uci.h	/^	UCI_ERR_IO,$/;"	e	enum:__anon4
UCI_ERR_LAST	uci.h	/^	UCI_ERR_LAST$/;"	e	enum:__anon4
UCI_ERR_MEM	uci.h	/^	UCI_ERR_MEM,$/;"	e	enum:__anon4
UCI_ERR_NOTFOUND	uci.h	/^	UCI_ERR_NOTFOUND,$/;"	e	enum:__anon4
UCI_ERR_PARSE	uci.h	/^	UCI_ERR_PARSE,$/;"	e	enum:__anon4
UCI_ERR_UNKNOWN	uci.h	/^	UCI_ERR_UNKNOWN,$/;"	e	enum:__anon4
UCI_FILEMODE	uci.h	41;"	d
UCI_FLAG_EXPORT_NAME	uci.h	/^	UCI_FLAG_EXPORT_NAME =   (1 << 2), \/* when exporting, name unnamed sections *\/$/;"	e	enum:uci_flags
UCI_FLAG_PERROR	uci.h	/^	UCI_FLAG_PERROR =        (1 << 1), \/* print parser error messages *\/$/;"	e	enum:uci_flags
UCI_FLAG_SAVED_DELTA	uci.h	/^	UCI_FLAG_SAVED_DELTA = (1 << 3), \/* store the saved delta in memory as well *\/$/;"	e	enum:uci_flags
UCI_FLAG_STRICT	uci.h	/^	UCI_FLAG_STRICT =        (1 << 0), \/* strict mode for the parser *\/$/;"	e	enum:uci_flags
UCI_HANDLE_ERR	uci_internal.h	187;"	d
UCI_INTERNAL	uci_internal.h	230;"	d
UCI_LOOKUP_COMPLETE	uci.h	/^		UCI_LOOKUP_COMPLETE = (1 << 1),$/;"	e	enum:uci_ptr::__anon6
UCI_LOOKUP_DONE	uci.h	/^		UCI_LOOKUP_DONE =     (1 << 0),$/;"	e	enum:uci_ptr::__anon6
UCI_LOOKUP_EXTENDED	uci.h	/^		UCI_LOOKUP_EXTENDED = (1 << 2),$/;"	e	enum:uci_ptr::__anon6
UCI_NESTED	uci_internal.h	241;"	d
UCI_OK	uci.h	/^	UCI_OK = 0,$/;"	e	enum:__anon4
UCI_QUOTE_ESCAPE	file.c	542;"	d	file:
UCI_SAVEDIR	uci.h	39;"	d
UCI_THROW	uci_internal.h	173;"	d
UCI_TRAP_RESTORE	uci_internal.h	220;"	d
UCI_TRAP_SAVE	uci_internal.h	210;"	d
UCI_TYPE_BACKEND	uci.h	/^	UCI_TYPE_BACKEND = 6,$/;"	e	enum:uci_type
UCI_TYPE_DELTA	uci.h	/^	UCI_TYPE_DELTA = 1,$/;"	e	enum:uci_type
UCI_TYPE_HOOK	uci.h	/^	UCI_TYPE_HOOK = 8,$/;"	e	enum:uci_type
UCI_TYPE_ITEM	uci.h	/^	UCI_TYPE_ITEM = 7,$/;"	e	enum:uci_type
UCI_TYPE_LIST	uci.h	/^	UCI_TYPE_LIST = 1,$/;"	e	enum:uci_option_type
UCI_TYPE_OPTION	uci.h	/^	UCI_TYPE_OPTION = 4,$/;"	e	enum:uci_type
UCI_TYPE_PACKAGE	uci.h	/^	UCI_TYPE_PACKAGE = 2,$/;"	e	enum:uci_type
UCI_TYPE_PATH	uci.h	/^	UCI_TYPE_PATH = 5,$/;"	e	enum:uci_type
UCI_TYPE_SECTION	uci.h	/^	UCI_TYPE_SECTION = 3,$/;"	e	enum:uci_type
UCI_TYPE_STRING	uci.h	/^	UCI_TYPE_STRING = 0,$/;"	e	enum:uci_option_type
UCI_TYPE_UNSPEC	uci.h	/^	UCI_TYPE_UNSPEC = 0,$/;"	e	enum:uci_type
_GNU_SOURCE	delta.c	19;"	d	file:
_GNU_SOURCE	file.c	19;"	d	file:
_GNU_SOURCE	libuci.c	19;"	d	file:
_GNU_SOURCE	util.c	19;"	d	file:
_LINUX_LIST_H	list.h	2;"	d
__LIBUCI_H	uci.h	16;"	d
__UCIMAP_H	ucimap.h	20;"	d
__UCI_BLOB_H	uci_blob.h	15;"	d
__UCI_CMD_LAST	uci.h	/^	__UCI_CMD_LAST = __UCI_CMD_MAX - 1$/;"	e	enum:uci_command
__UCI_CMD_MAX	uci.h	/^	__UCI_CMD_MAX,$/;"	e	enum:uci_command
__UCI_INTERNAL_H	uci_internal.h	16;"	d
__bool_compatible	ucimap.h	74;"	d
__compatible	ucimap.h	56;"	d
__hlist_del	list.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__int_compatible	ucimap.h	62;"	d
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_compatible	ucimap.h	59;"	d
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_for_each	list.h	288;"	d
__list_splice	list.h	/^static inline void __list_splice(struct list_head *list,$/;"	f
__optmap_gen_type	ucimap.h	44;"	d
__optmap_gen_type	ucimap.h	78;"	d
__private	uci_internal.h	18;"	d
__public	uci_internal.h	19;"	d
__string_compatible	ucimap.h	67;"	d
__uci_blob_check_equal	blob.c	/^__uci_blob_check_equal(struct blob_attr *c1, struct blob_attr *c2,$/;"	f	file:
__uci_element_to_blob	blob.c	/^__uci_element_to_blob(struct blob_buf *b, struct uci_element *e,$/;"	f	file:
__uci_to_blob	blob.c	/^__uci_to_blob(struct blob_buf *b, struct uci_section *s,$/;"	f	file:
add	ucimap.h	/^	int (*add)(struct uci_map *map, void *section);$/;"	m	struct:uci_sectionmap
addc	file.c	/^static inline void addc(struct uci_context *ctx, int *pos_dest, int *pos_src)$/;"	f	file:
alloc	ucimap.h	/^	struct ucimap_section_data *(*alloc)(struct uci_map *map,$/;"	m	struct:uci_sectionmap	typeref:struct:uci_sectionmap::alloc
alloc_custom	ucimap.h	/^	struct ucimap_alloc_custom *alloc_custom;$/;"	m	struct:ucimap_section_data	typeref:struct:ucimap_section_data::ucimap_alloc_custom
alloc_custom_len	ucimap.h	/^	unsigned int alloc_custom_len;$/;"	m	struct:ucimap_section_data
alloc_len	ucimap.h	/^	unsigned int alloc_len;$/;"	m	struct:uci_sectionmap
allocmap	ucimap.h	/^	struct ucimap_alloc *allocmap;$/;"	m	struct:ucimap_section_data	typeref:struct:ucimap_section_data::ucimap_alloc
allocmap_len	ucimap.h	/^	unsigned int allocmap_len;$/;"	m	struct:ucimap_section_data
anonymous	uci.h	/^	bool anonymous;$/;"	m	struct:uci_section
append	sh/uci.sh	/^append() {$/;"	f
appname	cli.c	/^static const char *appname;$/;"	v	file:
assertFailWithNoReturn	test/tests.sh	/^assertFailWithNoReturn() {$/;"	f
assertNotIllegal	test/tests.sh	/^assertNotIllegal()$/;"	f
assertNotSegFault	test/tests.sh	/^assertNotSegFault()$/;"	f
assertSameFile	test/tests.sh	/^assertSameFile() {$/;"	f
assert_eol	file.c	/^static void assert_eol(struct uci_context *ctx)$/;"	f	file:
b	ucimap.h	/^	bool b;$/;"	m	union:ucimap_data
backend	uci.h	/^	struct uci_backend *backend;$/;"	m	struct:uci_context	typeref:struct:uci_context::uci_backend
backend	uci.h	/^	struct uci_backend *backend;$/;"	m	struct:uci_package	typeref:struct:uci_package::uci_backend
backends	uci.h	/^	struct uci_list backends;$/;"	m	struct:uci_context	typeref:struct:uci_context::uci_list
base	ucimap.h	/^			int base;$/;"	m	struct:uci_optmap::__anon1::__anon2
buf	uci.h	/^	char *buf;$/;"	m	struct:uci_context
buf	uci_internal.h	/^	char *buf;$/;"	m	struct:uci_parse_context
bufsz	uci.h	/^	int bufsz;$/;"	m	struct:uci_context
bufsz	uci_internal.h	/^	int bufsz;$/;"	m	struct:uci_parse_context
byte	uci_internal.h	/^	int byte;$/;"	m	struct:uci_parse_context
cli_error	cli.c	/^static void cli_error(const char *fmt, ...)$/;"	f	file:
cli_perror	cli.c	/^static void cli_perror(void)$/;"	f	file:
cmap	ucimap.h	/^	unsigned char *cmap;$/;"	m	struct:ucimap_section_data
cmd	uci.h	/^	enum uci_command cmd;$/;"	m	struct:uci_delta	typeref:enum:uci_delta::uci_command
commit	uci.h	/^	void (*commit)(struct uci_context *ctx, struct uci_package **p, bool overwrite);$/;"	m	struct:uci_backend
confdir	uci.h	/^	char *confdir;$/;"	m	struct:uci_context
config	sh/uci.sh	/^config () {$/;"	f
config_cb	sh/uci.sh	/^	config_cb() { return 0; }$/;"	f
config_clear	sh/uci.sh	/^config_clear() {$/;"	f
config_foreach	sh/uci.sh	/^config_foreach() {$/;"	f
config_get	sh/uci.sh	/^config_get() {$/;"	f
config_get_bool	sh/uci.sh	/^config_get_bool() {$/;"	f
config_list_foreach	sh/uci.sh	/^config_list_foreach() {$/;"	f
config_load	sh/uci.sh	/^config_load() {$/;"	f
config_set	sh/uci.sh	/^config_set() {$/;"	f
config_unset	sh/uci.sh	/^config_unset() {$/;"	f
container_of	list.h	13;"	d
container_of	uci.h	524;"	d
ctx	cli.c	/^static struct uci_context *ctx;$/;"	v	typeref:struct:uci_context	file:
ctx	uci.h	/^	struct uci_context *ctx;$/;"	m	struct:uci_package	typeref:struct:uci_package::uci_context
cur_section_ref	cli.c	/^static const char *cur_section_ref = NULL;$/;"	v	file:
data	ucimap.c	/^	union ucimap_data *data;$/;"	m	struct:ucimap_fixup	typeref:union:ucimap_fixup::ucimap_data	file:
data	ucimap.h	/^	void **data;$/;"	m	union:ucimap_data
data	ucimap.h	/^	} data;$/;"	m	struct:uci_optmap	typeref:union:uci_optmap::__anon1
delimiter	cli.c	/^static const char *delimiter = " ";$/;"	v	file:
delta	uci.h	/^	struct uci_list delta;$/;"	m	struct:uci_package	typeref:struct:uci_package::uci_list
delta_path	uci.h	/^	struct uci_list delta_path;$/;"	m	struct:uci_context	typeref:struct:uci_context::uci_list
detected_type	ucimap.h	/^	int detected_type;$/;"	m	struct:uci_optmap
djbhash	list.c	/^static unsigned int djbhash(unsigned int hash, char *str)$/;"	f	file:
done	ucimap.h	/^	bool done;$/;"	m	struct:ucimap_section_data
e	uci.h	/^	struct uci_element e;$/;"	m	struct:uci_backend	typeref:struct:uci_backend::uci_element
e	uci.h	/^	struct uci_element e;$/;"	m	struct:uci_delta	typeref:struct:uci_delta::uci_element
e	uci.h	/^	struct uci_element e;$/;"	m	struct:uci_option	typeref:struct:uci_option::uci_element
e	uci.h	/^	struct uci_element e;$/;"	m	struct:uci_package	typeref:struct:uci_package::uci_element
e	uci.h	/^	struct uci_element e;$/;"	m	struct:uci_section	typeref:struct:uci_section::uci_element
err	uci.h	/^	int err;$/;"	m	struct:uci_context
file	uci_internal.h	/^	FILE *file;$/;"	m	struct:uci_parse_context
find_context	lua/uci.c	/^find_context(lua_State *L, int *offset)$/;"	f	file:
find_package	lua/uci.c	/^find_package(lua_State *L, struct uci_context *ctx, const char *str, bool al)$/;"	f	file:
first	list.h	/^	struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
fixup	ucimap.h	/^	struct ucimap_fixup *fixup;$/;"	m	struct:uci_map	typeref:struct:uci_map::ucimap_fixup
fixup_tail	ucimap.h	/^	struct ucimap_fixup **fixup_tail;$/;"	m	struct:uci_map	typeref:struct:uci_map::ucimap_fixup
flags	cli.c	/^} flags;$/;"	v	typeref:enum:__anon7	file:
flags	uci.h	/^	enum uci_flags flags;$/;"	m	struct:uci_context	typeref:enum:uci_context::uci_flags
flags	uci.h	/^	} flags;$/;"	m	struct:uci_ptr	typeref:enum:uci_ptr::__anon6
format	ucimap.h	/^	int (*format)(void *section, struct uci_optmap *om, union ucimap_data *data, char **string);$/;"	m	struct:uci_optmap
free	ucimap.h	/^	int (*free)(struct uci_map *map, void *section);$/;"	m	struct:uci_sectionmap
free	ucimap.h	/^	void (*free)(void *section, struct uci_optmap *om, void *ptr);$/;"	m	struct:uci_optmap
func	uci.h	/^	const char *func;$/;"	m	struct:uci_context
get_filename	file.c	/^static inline char *get_filename(char *path)$/;"	f	file:
global_ctx	lua/uci.c	/^static struct uci_context *global_ctx = NULL;$/;"	v	typeref:struct:uci_context	file:
has_delta	uci.h	/^	bool has_delta;$/;"	m	struct:uci_package
hash_murmur2	parse.c	/^static uint32_t hash_murmur2(uint32_t h, const void * key, int len)$/;"	f	file:
hlist_add_after	list.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	list.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_head	list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	list.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_del_init	list.h	/^static inline void hlist_del_init(struct hlist_node *n)$/;"	f
hlist_empty	list.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	list.h	545;"	d
hlist_for_each	list.h	547;"	d
hlist_for_each_entry	list.h	560;"	d
hlist_for_each_entry_continue	list.h	571;"	d
hlist_for_each_entry_from	list.h	582;"	d
hlist_for_each_entry_safe	list.h	595;"	d
hlist_for_each_safe	list.h	550;"	d
hlist_head	list.h	/^struct hlist_head {$/;"	s
hlist_node	list.h	/^struct hlist_node {$/;"	s
hlist_unhashed	list.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f
hotplug_dev	sh/uci.sh	/^hotplug_dev() {$/;"	f
i	ucimap.h	/^		} i;$/;"	m	union:uci_optmap::__anon1	typeref:struct:uci_optmap::__anon1::__anon2
i	ucimap.h	/^	int i;$/;"	m	union:ucimap_data
idx	cli.c	/^	unsigned int idx;$/;"	m	struct:uci_type_list	file:
info	uci_blob.h	/^	const struct uci_blob_param_info *info;$/;"	m	struct:uci_blob_param_list	typeref:struct:uci_blob_param_list::uci_blob_param_info
init	ucimap.h	/^	int (*init)(struct uci_map *map, void *section, struct uci_section *s);$/;"	m	struct:uci_sectionmap
input	cli.c	/^static FILE *input;$/;"	v	file:
internal	uci.h	/^	bool internal, nested;$/;"	m	struct:uci_context
item	ucimap.h	/^	union ucimap_data item[];$/;"	m	struct:ucimap_list	typeref:union:ucimap_list::ucimap_data
last	uci.h	/^	struct uci_element *last;$/;"	m	struct:uci_ptr	typeref:struct:uci_ptr::uci_element
likely	ucimap.h	47;"	d
likely	ucimap.h	86;"	d
line	uci_internal.h	/^	int line;$/;"	m	struct:uci_parse_context
list	sh/uci.sh	/^list() {$/;"	f
list	uci.h	/^		struct uci_list list;$/;"	m	union:uci_option::__anon5	typeref:struct:uci_option::__anon5::uci_list
list	uci.h	/^	struct uci_list list;$/;"	m	struct:uci_element	typeref:struct:uci_element::uci_list
list	ucimap.h	/^	struct ucimap_list *list;$/;"	m	union:ucimap_data	typeref:struct:ucimap_data::ucimap_list
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_cb	sh/uci.sh	/^	list_cb() { return 0; }$/;"	f
list_configs	uci.h	/^	char **(*list_configs)(struct uci_context *ctx);$/;"	m	struct:uci_backend
list_contains	sh/uci.sh	/^list_contains() {$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entry	list.h	255;"	d
list_first_entry	list.h	266;"	d
list_for_each	list.h	274;"	d
list_for_each_entry	list.h	327;"	d
list_for_each_entry_continue	list.h	363;"	d
list_for_each_entry_continue_reverse	list.h	377;"	d
list_for_each_entry_from	list.h	390;"	d
list_for_each_entry_reverse	list.h	338;"	d
list_for_each_entry_safe	list.h	401;"	d
list_for_each_entry_safe_continue	list.h	417;"	d
list_for_each_entry_safe_from	list.h	433;"	d
list_for_each_entry_safe_reverse	list.h	448;"	d
list_for_each_prev	list.h	296;"	d
list_for_each_prev_safe	list.h	316;"	d
list_for_each_safe	list.h	306;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_is_last	list.h	/^static inline int list_is_last(const struct list_head *list,$/;"	f
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_prepare_entry	list.h	351;"	d
list_remove	sh/uci.sh	/^list_remove() {$/;"	f
list_replace	list.h	/^static inline void list_replace(struct list_head *old,$/;"	f
list_replace_init	list.h	/^static inline void list_replace_init(struct list_head *old,$/;"	f
list_splice	list.h	/^static inline void list_splice(struct list_head *list, struct list_head *head)$/;"	f
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
list_to_element	uci.h	534;"	d
load	uci.h	/^	struct uci_package *(*load)(struct uci_context *ctx, const char *name);$/;"	m	struct:uci_backend	typeref:struct:uci_backend::load
lookup_args	lua/uci.c	/^lookup_args(lua_State *L, struct uci_context *ctx, int offset, struct uci_ptr *ptr, char **buf)$/;"	f	file:
luaL_setfuncs	lua/uci.c	/^static void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup) {$/;"	f	file:
lua_rawlen	lua/uci.c	55;"	d	file:
luaopen_uci	lua/uci.c	/^luaopen_uci(lua_State *L)$/;"	f
main	cli.c	/^int main(int argc, char **argv)$/;"	f
map	ucimap.h	/^	struct uci_map *map;$/;"	m	struct:ucimap_section_data	typeref:struct:ucimap_section_data::uci_map
max	ucimap.h	/^			int max;$/;"	m	struct:uci_optmap::__anon1::__anon2
maxlen	ucimap.h	/^			int maxlen;$/;"	m	struct:uci_optmap::__anon1::__anon3
merge	uci_internal.h	/^	bool merge;$/;"	m	struct:uci_parse_context
min	ucimap.h	/^			int min;$/;"	m	struct:uci_optmap::__anon1::__anon2
n_items	ucimap.h	/^	int n_items;$/;"	m	struct:ucimap_list
n_next	uci_blob.h	/^	int n_next;$/;"	m	struct:uci_blob_param_list
n_options	ucimap.h	/^	unsigned int n_options;$/;"	m	struct:uci_sectionmap
n_params	uci_blob.h	/^	int n_params;$/;"	m	struct:uci_blob_param_list
n_section	uci.h	/^	int n_section;$/;"	m	struct:uci_package
n_sections	ucimap.h	/^	unsigned int n_sections;$/;"	m	struct:uci_map
name	cli.c	/^	const char *name;$/;"	m	struct:uci_type_list	file:
name	uci.h	/^	char *name;$/;"	m	struct:uci_element
name	uci.h	/^	const char *name;$/;"	m	struct:uci_parse_option
name	uci_internal.h	/^	const char *name;$/;"	m	struct:uci_parse_context
name	ucimap.c	/^	const char *name;$/;"	m	struct:ucimap_fixup	file:
name	ucimap.h	/^	const char *name;$/;"	m	struct:uci_optmap
nested	uci.h	/^	bool internal, nested;$/;"	m	struct:uci_context
next	cli.c	/^	struct uci_type_list *next;$/;"	m	struct:uci_type_list	typeref:struct:uci_type_list::uci_type_list	file:
next	list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next	uci.h	/^	struct uci_list *next;$/;"	m	struct:uci_list	typeref:struct:uci_list::uci_list
next	uci_blob.h	/^	const struct uci_blob_param_list *next[];$/;"	m	struct:uci_blob_param_list	typeref:struct:uci_blob_param_list::uci_blob_param_list
next	ucimap.c	/^	struct ucimap_fixup *next;$/;"	m	struct:ucimap_fixup	typeref:struct:ucimap_fixup::ucimap_fixup	file:
next	ucimap.h	/^	struct ucimap_section_data *next, **ref;$/;"	m	struct:ucimap_section_data	typeref:struct:ucimap_section_data::ucimap_section_data
next_arg	file.c	/^static int next_arg(struct uci_context *ctx, bool required, bool name, bool package)$/;"	f	file:
o	uci.h	/^	struct uci_option *o;$/;"	m	struct:uci_ptr	typeref:struct:uci_ptr::uci_option
offset	ucimap.h	/^	unsigned int offset;$/;"	m	struct:uci_optmap
offsetof	uci.h	514;"	d
om	ucimap.c	/^	struct uci_optmap *om;$/;"	m	struct:ucimap_alloc_custom	typeref:struct:ucimap_alloc_custom::uci_optmap	file:
option	sh/uci.sh	/^option () {$/;"	f
option	uci.h	/^	const char *option;$/;"	m	struct:uci_ptr
option_cb	sh/uci.sh	/^	option_cb() { return 0; }$/;"	f
options	uci.h	/^	struct uci_list options;$/;"	m	struct:uci_section	typeref:struct:uci_section::uci_list
options	ucimap.h	/^	struct uci_optmap *options;$/;"	m	struct:uci_sectionmap	typeref:struct:uci_sectionmap::uci_optmap
options_size	ucimap.h	/^	unsigned int options_size;$/;"	m	struct:uci_sectionmap
p	uci.h	/^	struct uci_package *p;$/;"	m	struct:uci_ptr	typeref:struct:uci_ptr::uci_package
package	sh/uci.sh	/^package() {$/;"	f
package	uci.h	/^	const char *package;$/;"	m	struct:uci_ptr
package	uci.h	/^	struct uci_package *package;$/;"	m	struct:uci_section	typeref:struct:uci_section::uci_package
package	uci_internal.h	/^	struct uci_package *package;$/;"	m	struct:uci_parse_context	typeref:struct:uci_parse_context::uci_package
package_cmd	cli.c	/^static int package_cmd(int cmd, char *tuple)$/;"	f	file:
params	uci_blob.h	/^	const struct blobmsg_policy *params;$/;"	m	struct:uci_blob_param_list	typeref:struct:uci_blob_param_list::blobmsg_policy
parse	ucimap.h	/^	int (*parse)(void *section, struct uci_optmap *om, union ucimap_data *data, const char *string);$/;"	m	struct:uci_optmap
parse_backslash	file.c	/^static bool parse_backslash(struct uci_context *ctx)$/;"	f	file:
parse_double_quote	file.c	/^static void parse_double_quote(struct uci_context *ctx, int *target)$/;"	f	file:
parse_single_quote	file.c	/^static void parse_single_quote(struct uci_context *ctx, int *target)$/;"	f	file:
parse_str	file.c	/^static void parse_str(struct uci_context *ctx, int *target)$/;"	f	file:
parsed	ucimap.h	/^	bool parsed;$/;"	m	struct:uci_map
path	uci.h	/^	char *path;$/;"	m	struct:uci_package
pctx	uci.h	/^	struct uci_parse_context *pctx;$/;"	m	struct:uci_context	typeref:struct:uci_context::uci_parse_context
pctx_char	uci_internal.h	41;"	d
pctx_cur_char	uci_internal.h	42;"	d
pctx_cur_str	uci_internal.h	40;"	d
pctx_pos	uci_internal.h	38;"	d
pctx_str	uci_internal.h	39;"	d
pending	ucimap.h	/^	struct ucimap_section_data *pending;$/;"	m	struct:uci_map	typeref:struct:uci_map::ucimap_section_data
pkg_cmd	lua/uci.c	/^enum pkg_cmd {$/;"	g	file:
pos	uci_internal.h	/^	int pos;$/;"	m	struct:uci_parse_context
pprev	list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
prev	uci.h	/^	struct uci_list *prev;$/;"	m	struct:uci_list	typeref:struct:uci_list::uci_list
priv	uci.h	/^	void *priv;$/;"	m	struct:uci_backend
priv	uci.h	/^	void *priv;$/;"	m	struct:uci_package
priv	ucimap.h	/^	void *priv;$/;"	m	struct:uci_map
ptr	uci.h	/^	const void *ptr;$/;"	m	struct:uci_backend
ptr	ucimap.c	/^	void *ptr;$/;"	m	struct:ucimap_alloc	file:
ptr	ucimap.c	/^	void *ptr;$/;"	m	struct:ucimap_alloc_custom	file:
ptr	ucimap.h	/^	void *ptr;$/;"	m	union:ucimap_data
reason	uci_internal.h	/^	const char *reason;$/;"	m	struct:uci_parse_context
ref	ucimap.h	/^	struct ucimap_section_data *next, **ref;$/;"	m	struct:ucimap_section_data	typeref:struct:ucimap_section_data::
reset_cb	sh/uci.sh	/^reset_cb() {$/;"	f
root	uci.h	/^	struct uci_list root;$/;"	m	struct:uci_context	typeref:struct:uci_context::uci_list
s	uci.h	/^	struct uci_section *s;$/;"	m	struct:uci_ptr	typeref:struct:uci_ptr::uci_section
s	ucimap.h	/^		} s;$/;"	m	union:uci_optmap::__anon1	typeref:struct:uci_optmap::__anon1::__anon3
s	ucimap.h	/^	char *s;$/;"	m	union:ucimap_data
saved_delta	uci.h	/^	struct uci_list saved_delta;$/;"	m	struct:uci_package	typeref:struct:uci_package::uci_list
savedir	uci.h	/^	char *savedir;$/;"	m	struct:uci_context
sdata	ucimap.h	/^	struct ucimap_section_data *sdata;$/;"	m	struct:uci_map	typeref:struct:uci_map::ucimap_section_data
sdata_tail	ucimap.h	/^	struct ucimap_section_data **sdata_tail;$/;"	m	struct:uci_map	typeref:struct:uci_map::ucimap_section_data
section	uci.h	/^	char *section;$/;"	m	struct:uci_delta
section	uci.h	/^	const char *section;$/;"	m	struct:uci_ptr
section	uci.h	/^	struct uci_section *section;$/;"	m	struct:uci_option	typeref:struct:uci_option::uci_section
section	uci_internal.h	/^	struct uci_section *section;$/;"	m	struct:uci_parse_context	typeref:struct:uci_parse_context::uci_section
section	ucimap.c	/^	void *section;$/;"	m	struct:ucimap_alloc_custom	file:
section_name	ucimap.h	/^	const char *section_name;$/;"	m	struct:ucimap_section_data
sections	uci.h	/^	struct uci_list sections;$/;"	m	struct:uci_package	typeref:struct:uci_package::uci_list
sections	ucimap.h	/^	struct uci_sectionmap **sections;$/;"	m	struct:uci_map	typeref:struct:uci_map::uci_sectionmap
setUp	test/tests.sh	/^setUp() {$/;"	f
size	ucimap.h	/^	int size;$/;"	m	struct:ucimap_list
skip_whitespace	file.c	/^static void skip_whitespace(struct uci_context *ctx)$/;"	f	file:
sm	ucimap.c	/^	struct uci_sectionmap *sm;$/;"	m	struct:ucimap_fixup	typeref:struct:ucimap_fixup::uci_sectionmap	file:
sm	ucimap.h	/^		struct uci_sectionmap *sm;$/;"	m	union:uci_optmap::__anon1	typeref:struct:uci_optmap::__anon1::uci_sectionmap
sm	ucimap.h	/^	struct uci_sectionmap *sm;$/;"	m	struct:ucimap_section_data	typeref:struct:ucimap_section_data::uci_sectionmap
smap_offset	ucimap.h	/^	unsigned int smap_offset;$/;"	m	struct:uci_sectionmap
string	uci.h	/^		char *string;$/;"	m	union:uci_option::__anon5
target	uci.h	/^	enum uci_type target;$/;"	m	struct:uci_ptr	typeref:enum:uci_ptr::uci_type
tearDown	test/tests.sh	/^tearDown() {$/;"	f
trap	uci.h	/^	jmp_buf trap;$/;"	m	struct:uci_context
type	uci.h	/^	char *type;$/;"	m	struct:uci_section
type	uci.h	/^	enum uci_option_type type;$/;"	m	struct:uci_option	typeref:enum:uci_option::uci_option_type
type	uci.h	/^	enum uci_option_type type;$/;"	m	struct:uci_parse_option	typeref:enum:uci_parse_option::uci_option_type
type	uci.h	/^	enum uci_type type;$/;"	m	struct:uci_element	typeref:enum:uci_element::uci_type
type	uci_blob.h	/^	enum blobmsg_type type;$/;"	m	struct:uci_blob_param_info	typeref:enum:uci_blob_param_info::blobmsg_type
type	ucimap.c	/^	enum ucimap_type type;$/;"	m	struct:ucimap_fixup	typeref:enum:ucimap_fixup::ucimap_type	file:
type	ucimap.h	/^	const char *type;$/;"	m	struct:uci_sectionmap
type	ucimap.h	/^	enum ucimap_type type;$/;"	m	struct:uci_optmap	typeref:enum:uci_optmap::ucimap_type
type_list	cli.c	/^static struct uci_type_list *type_list = NULL;$/;"	v	typeref:struct:uci_type_list	file:
type_name	ucimap.h	/^	const char *type_name;$/;"	m	struct:uci_optmap
type_name	ucimap.h	/^	const char *type_name;$/;"	m	struct:uci_sectionmap
typestr	cli.c	/^static char *typestr = NULL;$/;"	v	file:
uci	lua/uci.c	/^static const luaL_Reg uci[] = {$/;"	v	file:
uci_add_delta	delta.c	/^uci_add_delta(struct uci_context *ctx, struct uci_list *list, int cmd, const char *section, const char *option, const char *value)$/;"	f
uci_add_delta_path	delta.c	/^int uci_add_delta_path(struct uci_context *ctx, const char *dir)$/;"	f
uci_add_element_list	list.c	/^static void uci_add_element_list(struct uci_context *ctx, struct uci_ptr *ptr, bool internal)$/;"	f	file:
uci_add_list	list.c	/^int uci_add_list(struct uci_context *ctx, struct uci_ptr *ptr)$/;"	f
uci_add_section	list.c	/^int uci_add_section(struct uci_context *ctx, struct uci_package *p, const char *type, struct uci_section **res)$/;"	f
uci_alloc_context	libuci.c	/^struct uci_context *uci_alloc_context(void)$/;"	f
uci_alloc_element	uci.h	627;"	d
uci_alloc_generic	list.c	/^uci_alloc_generic(struct uci_context *ctx, int type, const char *name, int size)$/;"	f
uci_alloc_list	list.c	/^uci_alloc_list(struct uci_section *s, const char *name)$/;"	f	file:
uci_alloc_option	list.c	/^uci_alloc_option(struct uci_section *s, const char *name, const char *value)$/;"	f	file:
uci_alloc_package	list.c	/^uci_alloc_package(struct uci_context *ctx, const char *name)$/;"	f
uci_alloc_parse_context	util.c	/^__private void uci_alloc_parse_context(struct uci_context *ctx)$/;"	f
uci_alloc_section	list.c	/^uci_alloc_section(struct uci_package *p, const char *type, const char *name)$/;"	f	file:
uci_array_to_blob	blob.c	/^uci_array_to_blob(struct blob_buf *b, struct uci_option *o,$/;"	f	file:
uci_attr_to_blob	blob.c	/^uci_attr_to_blob(struct blob_buf *b, const char *str,$/;"	f	file:
uci_backend	uci.h	/^struct uci_backend$/;"	s
uci_batch	cli.c	/^static int uci_batch(void)$/;"	f	file:
uci_batch_cmd	cli.c	/^static int uci_batch_cmd(void)$/;"	f	file:
uci_blob_check_equal	blob.c	/^uci_blob_check_equal(struct blob_attr *c1, struct blob_attr *c2,$/;"	f
uci_blob_diff	blob.c	/^uci_blob_diff(struct blob_attr **tb1, struct blob_attr **tb2,$/;"	f
uci_blob_param_info	uci_blob.h	/^struct uci_blob_param_info {$/;"	s
uci_blob_param_list	uci_blob.h	/^struct uci_blob_param_list {$/;"	s
uci_cleanup	libuci.c	/^__private void uci_cleanup(struct uci_context *ctx)$/;"	f
uci_close_stream	util.c	/^__private void uci_close_stream(FILE *stream)$/;"	f
uci_cmd	cli.c	/^static int uci_cmd(int argc, char **argv)$/;"	f	file:
uci_command	uci.h	/^enum uci_command {$/;"	g
uci_command_char	delta.c	/^char const uci_command_char[] = {$/;"	v
uci_commit	libuci.c	/^int uci_commit(struct uci_context *ctx, struct uci_package **package, bool overwrite)$/;"	f
uci_confdir	libuci.c	/^__private const char *uci_confdir = UCI_CONFDIR;$/;"	v
uci_config_path	file.c	/^static char *uci_config_path(struct uci_context *ctx, const char *name)$/;"	f	file:
uci_context	uci.h	/^struct uci_context$/;"	s
uci_dataptr	uci.h	630;"	d
uci_del_list	list.c	/^int uci_del_list(struct uci_context *ctx, struct uci_ptr *ptr)$/;"	f
uci_delete	list.c	/^int uci_delete(struct uci_context *ctx, struct uci_ptr *ptr)$/;"	f
uci_delta	uci.h	/^struct uci_delta$/;"	s
uci_delta_save	delta.c	/^static void uci_delta_save(struct uci_context *ctx, FILE *f,$/;"	f	file:
uci_do_add	cli.c	/^static int uci_do_add(int argc, char **argv)$/;"	f	file:
uci_do_import	cli.c	/^static int uci_do_import(int argc, char **argv)$/;"	f	file:
uci_do_package_cmd	cli.c	/^static int uci_do_package_cmd(int cmd, int argc, char **argv)$/;"	f	file:
uci_do_section_cmd	cli.c	/^static int uci_do_section_cmd(int cmd, int argc, char **argv)$/;"	f	file:
uci_element	uci.h	/^struct uci_element$/;"	s
uci_errstr	libuci.c	/^static const char *uci_errstr[] = {$/;"	v	file:
uci_escape	file.c	/^static const char *uci_escape(struct uci_context *ctx, const char *str)$/;"	f	file:
uci_expand_ptr	list.c	/^uci_expand_ptr(struct uci_context *ctx, struct uci_ptr *ptr, bool complete)$/;"	f
uci_export	file.c	/^int uci_export(struct uci_context *ctx, FILE *stream, struct uci_package *package, bool header)$/;"	f
uci_export_package	file.c	/^static void uci_export_package(struct uci_package *p, FILE *stream, bool header)$/;"	f	file:
uci_file_commit	file.c	/^static void uci_file_commit(struct uci_context *ctx, struct uci_package **package, bool overwrite)$/;"	f	file:
uci_file_load	file.c	/^static struct uci_package *uci_file_load(struct uci_context *ctx, const char *name)$/;"	f	file:
uci_fill_ptr	file.c	/^uci_fill_ptr(struct uci_context *ctx, struct uci_ptr *ptr, struct uci_element *e)$/;"	f	file:
uci_filter_delta	delta.c	/^static void uci_filter_delta(struct uci_context *ctx, const char *name, const char *section, const char *option)$/;"	f	file:
uci_fixup_section	list.c	/^__private void uci_fixup_section(struct uci_context *ctx, struct uci_section *s)$/;"	f
uci_flags	uci.h	/^enum uci_flags {$/;"	g
uci_foreach_element	uci.h	547;"	d
uci_foreach_element_safe	uci.h	563;"	d
uci_free_any	list.c	/^uci_free_any(struct uci_element **e)$/;"	f	file:
uci_free_context	libuci.c	/^void uci_free_context(struct uci_context *ctx)$/;"	f
uci_free_delta	delta.c	/^uci_free_delta(struct uci_delta *h)$/;"	f
uci_free_element	list.c	/^uci_free_element(struct uci_element *e)$/;"	f
uci_free_option	list.c	/^uci_free_option(struct uci_option *o)$/;"	f	file:
uci_free_package	list.c	/^uci_free_package(struct uci_package **package)$/;"	f
uci_free_section	list.c	/^uci_free_section(struct uci_section *s)$/;"	f	file:
uci_get_errorstr	libuci.c	/^uci_get_errorstr(struct uci_context *ctx, char **dest, const char *prefix)$/;"	f
uci_getln	file.c	/^__private void uci_getln(struct uci_context *ctx, int offset)$/;"	f
uci_hash_list	parse.c	/^static uint32_t uci_hash_list(uint32_t h, const struct uci_list *list)$/;"	f	file:
uci_hash_options	parse.c	/^uint32_t uci_hash_options(struct uci_option **tb, int n_opts)$/;"	f
uci_import	file.c	/^int uci_import(struct uci_context *ctx, FILE *stream, const char *name, struct uci_package **package, bool single)$/;"	f
uci_list	uci.h	/^struct uci_list$/;"	s
uci_list_add	uci_internal.h	/^static inline void uci_list_add(struct uci_list *head, struct uci_list *ptr)$/;"	f
uci_list_config_files	file.c	/^static char **uci_list_config_files(struct uci_context *ctx)$/;"	f	file:
uci_list_configs	libuci.c	/^int uci_list_configs(struct uci_context *ctx, char ***list)$/;"	f
uci_list_del	uci_internal.h	/^static inline void uci_list_del(struct uci_list *ptr)$/;"	f
uci_list_empty	uci.h	573;"	d
uci_list_fixup	list.c	/^static inline void uci_list_fixup(struct uci_list *ptr)$/;"	f	file:
uci_list_init	uci_internal.h	/^static inline void uci_list_init(struct uci_list *ptr)$/;"	f
uci_list_insert	uci_internal.h	/^static inline void uci_list_insert(struct uci_list *list, struct uci_list *ptr)$/;"	f
uci_list_set_pos	list.c	/^static void uci_list_set_pos(struct uci_list *head, struct uci_list *ptr, int pos)$/;"	f	file:
uci_load	libuci.c	/^int uci_load(struct uci_context *ctx, const char *name, struct uci_package **package)$/;"	f
uci_load_delta	delta.c	/^__private int uci_load_delta(struct uci_context *ctx, struct uci_package *p, bool flush)$/;"	f
uci_load_delta_file	delta.c	/^static int uci_load_delta_file(struct uci_context *ctx, struct uci_package *p, char *filename, FILE **f, bool flush)$/;"	f	file:
uci_lookup_ext_section	list.c	/^uci_lookup_ext_section(struct uci_context *ctx, struct uci_ptr *ptr)$/;"	f	file:
uci_lookup_list	list.c	/^uci_lookup_list(struct uci_list *list, const char *name)$/;"	f
uci_lookup_next	list.c	/^uci_lookup_next(struct uci_context *ctx, struct uci_element **e, struct uci_list *list, const char *name)$/;"	f
uci_lookup_option	uci.h	/^uci_lookup_option(struct uci_context *ctx, struct uci_section *s, const char *name)$/;"	f
uci_lookup_option_string	uci.h	/^uci_lookup_option_string(struct uci_context *ctx, struct uci_section *s, const char *name)$/;"	f
uci_lookup_package	uci.h	/^uci_lookup_package(struct uci_context *ctx, const char *name)$/;"	f
uci_lookup_ptr	list.c	/^uci_lookup_ptr(struct uci_context *ctx, struct uci_ptr *ptr, char *str, bool extended)$/;"	f
uci_lookup_section	uci.h	/^uci_lookup_section(struct uci_context *ctx, struct uci_package *p, const char *name)$/;"	f
uci_lookup_section_ref	cli.c	/^uci_lookup_section_ref(struct uci_section *s)$/;"	f	file:
uci_lua_add	lua/uci.c	/^uci_lua_add(lua_State *L)$/;"	f	file:
uci_lua_add_change	lua/uci.c	/^uci_lua_add_change(lua_State *L, struct uci_element *e)$/;"	f	file:
uci_lua_add_delta	lua/uci.c	/^uci_lua_add_delta(lua_State *L)$/;"	f	file:
uci_lua_changes	lua/uci.c	/^uci_lua_changes(lua_State *L)$/;"	f	file:
uci_lua_changes_pkg	lua/uci.c	/^uci_lua_changes_pkg(lua_State *L, struct uci_context *ctx, const char *package)$/;"	f	file:
uci_lua_commit	lua/uci.c	/^uci_lua_commit(lua_State *L)$/;"	f	file:
uci_lua_cursor	lua/uci.c	/^uci_lua_cursor(lua_State *L)$/;"	f	file:
uci_lua_delete	lua/uci.c	/^uci_lua_delete(lua_State *L)$/;"	f	file:
uci_lua_foreach	lua/uci.c	/^uci_lua_foreach(lua_State *L)$/;"	f	file:
uci_lua_gc	lua/uci.c	/^uci_lua_gc(lua_State *L)$/;"	f	file:
uci_lua_get	lua/uci.c	/^uci_lua_get(lua_State *L)$/;"	f	file:
uci_lua_get_all	lua/uci.c	/^uci_lua_get_all(lua_State *L)$/;"	f	file:
uci_lua_get_any	lua/uci.c	/^uci_lua_get_any(lua_State *L, bool all)$/;"	f	file:
uci_lua_get_confdir	lua/uci.c	/^uci_lua_get_confdir(lua_State *L)$/;"	f	file:
uci_lua_get_savedir	lua/uci.c	/^uci_lua_get_savedir(lua_State *L)$/;"	f	file:
uci_lua_load	lua/uci.c	/^uci_lua_load(lua_State *L)$/;"	f	file:
uci_lua_package_cmd	lua/uci.c	/^uci_lua_package_cmd(lua_State *L, enum pkg_cmd cmd)$/;"	f	file:
uci_lua_rename	lua/uci.c	/^uci_lua_rename(lua_State *L)$/;"	f	file:
uci_lua_reorder	lua/uci.c	/^uci_lua_reorder(lua_State *L)$/;"	f	file:
uci_lua_revert	lua/uci.c	/^uci_lua_revert(lua_State *L)$/;"	f	file:
uci_lua_save	lua/uci.c	/^uci_lua_save(lua_State *L)$/;"	f	file:
uci_lua_set	lua/uci.c	/^uci_lua_set(lua_State *L)$/;"	f	file:
uci_lua_set_confdir	lua/uci.c	/^uci_lua_set_confdir(lua_State *L)$/;"	f	file:
uci_lua_set_savedir	lua/uci.c	/^uci_lua_set_savedir(lua_State *L)$/;"	f	file:
uci_lua_unload	lua/uci.c	/^uci_lua_unload(lua_State *L)$/;"	f	file:
uci_malloc	util.c	/^__private void *uci_malloc(struct uci_context *ctx, size_t size)$/;"	f
uci_map	ucimap.h	/^struct uci_map {$/;"	s
uci_open_stream	util.c	/^__private FILE *uci_open_stream(struct uci_context *ctx, const char *filename, const char *origfilename, int pos, bool write, bool create)$/;"	f
uci_option	uci.h	/^struct uci_option$/;"	s
uci_option_type	uci.h	/^enum uci_option_type {$/;"	g
uci_optmap	ucimap.h	/^struct uci_optmap {$/;"	s
uci_package	uci.h	/^struct uci_package$/;"	s
uci_parse_argument	file.c	/^int uci_parse_argument(struct uci_context *ctx, FILE *stream, char **str, char **result)$/;"	f
uci_parse_config	file.c	/^static void uci_parse_config(struct uci_context *ctx)$/;"	f	file:
uci_parse_context	uci_internal.h	/^struct uci_parse_context$/;"	s
uci_parse_delta	delta.c	/^static int uci_parse_delta(struct uci_context *ctx, FILE *stream, struct uci_package *p)$/;"	f	file:
uci_parse_delta_line	delta.c	/^static void uci_parse_delta_line(struct uci_context *ctx, struct uci_package *p)$/;"	f	file:
uci_parse_delta_tuple	delta.c	/^static inline int uci_parse_delta_tuple(struct uci_context *ctx, struct uci_ptr *ptr)$/;"	f	file:
uci_parse_error	util.c	/^__private void uci_parse_error(struct uci_context *ctx, char *reason)$/;"	f
uci_parse_line	file.c	/^static void uci_parse_line(struct uci_context *ctx, bool single)$/;"	f	file:
uci_parse_option	file.c	/^static void uci_parse_option(struct uci_context *ctx, bool list)$/;"	f	file:
uci_parse_option	uci.h	/^struct uci_parse_option {$/;"	s
uci_parse_package	file.c	/^static void uci_parse_package(struct uci_context *ctx, bool single)$/;"	f	file:
uci_parse_ptr	util.c	/^int uci_parse_ptr(struct uci_context *ctx, struct uci_ptr *ptr, char *str)$/;"	f
uci_parse_section	parse.c	/^void uci_parse_section(struct uci_section *s, const struct uci_parse_option *opts,$/;"	f
uci_perror	libuci.c	/^uci_perror(struct uci_context *ctx, const char *str)$/;"	f
uci_print_value	cli.c	/^static void uci_print_value(FILE *f, const char *v)$/;"	f	file:
uci_ptr	uci.h	/^struct uci_ptr$/;"	s
uci_push_option	lua/uci.c	/^uci_push_option(lua_State *L, struct uci_option *o)$/;"	f	file:
uci_push_package	lua/uci.c	/^uci_push_package(lua_State *L, struct uci_package *p)$/;"	f	file:
uci_push_section	lua/uci.c	/^uci_push_section(lua_State *L, struct uci_section *s, int index)$/;"	f	file:
uci_push_status	lua/uci.c	/^uci_push_status(lua_State *L, struct uci_context *ctx, bool hasarg)$/;"	f	file:
uci_realloc	util.c	/^__private void *uci_realloc(struct uci_context *ctx, void *ptr, size_t size)$/;"	f
uci_rename	list.c	/^int uci_rename(struct uci_context *ctx, struct uci_ptr *ptr)$/;"	f
uci_reorder_section	list.c	/^int uci_reorder_section(struct uci_context *ctx, struct uci_section *s, int pos)$/;"	f
uci_reset_typelist	cli.c	/^uci_reset_typelist(void)$/;"	f	file:
uci_revert	delta.c	/^int uci_revert(struct uci_context *ctx, struct uci_ptr *ptr)$/;"	f
uci_save	delta.c	/^int uci_save(struct uci_context *ctx, struct uci_package *p)$/;"	f
uci_savedir	libuci.c	/^__private const char *uci_savedir = UCI_SAVEDIR;$/;"	v
uci_section	uci.h	/^struct uci_section$/;"	s
uci_sectionmap	ucimap.h	/^struct uci_sectionmap {$/;"	s
uci_set	list.c	/^int uci_set(struct uci_context *ctx, struct uci_ptr *ptr)$/;"	f
uci_set_backend	libuci.c	/^int uci_set_backend(struct uci_context *ctx, const char *name)$/;"	f
uci_set_confdir	libuci.c	/^int uci_set_confdir(struct uci_context *ctx, const char *dir)$/;"	f
uci_set_savedir	delta.c	/^int uci_set_savedir(struct uci_context *ctx, const char *dir)$/;"	f
uci_show_changes	cli.c	/^static void uci_show_changes(struct uci_package *p)$/;"	f	file:
uci_show_option	cli.c	/^static void uci_show_option(struct uci_option *o, bool quote)$/;"	f	file:
uci_show_package	cli.c	/^static void uci_show_package(struct uci_package *p)$/;"	f	file:
uci_show_section	cli.c	/^static void uci_show_section(struct uci_section *s)$/;"	f	file:
uci_show_value	cli.c	/^static void uci_show_value(struct uci_option *o, bool quote)$/;"	f	file:
uci_strdup	util.c	/^__private char *uci_strdup(struct uci_context *ctx, const char *str)$/;"	f
uci_switch_config	file.c	/^static void uci_switch_config(struct uci_context *ctx)$/;"	f	file:
uci_to_blob	blob.c	/^uci_to_blob(struct blob_buf *b, struct uci_section *s,$/;"	f
uci_type	uci.h	/^enum uci_type {$/;"	g
uci_type_backend	uci.h	576;"	d
uci_type_delta	uci.h	577;"	d
uci_type_list	cli.c	/^struct uci_type_list {$/;"	s	file:
uci_type_option	uci.h	580;"	d
uci_type_package	uci.h	578;"	d
uci_type_section	uci.h	579;"	d
uci_typecast_error	uci.h	/^static void uci_typecast_error(int from, int to)$/;"	f
uci_typestr	uci.h	/^static const char *uci_typestr[] = {$/;"	v
uci_unload	list.c	/^int uci_unload(struct uci_context *ctx, struct uci_package *p)$/;"	f
uci_usage	cli.c	/^static void uci_usage(void)$/;"	f	file:
uci_validate_name	uci_internal.h	/^static inline bool uci_validate_name(const char *str)$/;"	f
uci_validate_package	uci_internal.h	/^static inline bool uci_validate_package(const char *str)$/;"	f
uci_validate_str	util.c	/^__private bool uci_validate_str(const char *str, bool name, bool package)$/;"	f
uci_validate_text	util.c	/^bool uci_validate_text(const char *str)$/;"	f
uci_validate_type	uci_internal.h	/^static inline bool uci_validate_type(const char *str)$/;"	f
ucimap_add_alloc	ucimap.c	/^ucimap_add_alloc(struct ucimap_section_data *sd, void *ptr)$/;"	f	file:
ucimap_add_custom_alloc	ucimap.c	/^ucimap_add_custom_alloc(struct ucimap_section_data *sd, struct uci_optmap *om, void *ptr)$/;"	f	file:
ucimap_add_fixup	ucimap.c	/^ucimap_add_fixup(struct ucimap_section_data *sd, union ucimap_data *data, struct uci_optmap *om, const char *str)$/;"	f	file:
ucimap_add_section	ucimap.c	/^ucimap_add_section(struct ucimap_section_data *sd)$/;"	f	file:
ucimap_add_section_list	ucimap.c	/^ucimap_add_section_list(struct uci_map *map, struct ucimap_section_data *sd)$/;"	f	file:
ucimap_add_value	ucimap.c	/^ucimap_add_value(union ucimap_data *data, struct uci_optmap *om, struct ucimap_section_data *sd, const char *str)$/;"	f	file:
ucimap_alloc	ucimap.c	/^struct ucimap_alloc {$/;"	s	file:
ucimap_alloc_custom	ucimap.c	/^struct ucimap_alloc_custom {$/;"	s	file:
ucimap_check_optmap_type	ucimap.c	/^ucimap_check_optmap_type(struct uci_sectionmap *sm, struct uci_optmap *om)$/;"	f	file:
ucimap_cleanup	ucimap.c	/^ucimap_cleanup(struct uci_map *map)$/;"	f
ucimap_convert_list	ucimap.c	/^ucimap_convert_list(union ucimap_data *data, struct uci_optmap *om, struct ucimap_section_data *sd, const char *str)$/;"	f	file:
ucimap_count_alloc	ucimap.c	/^ucimap_count_alloc(struct uci_optmap *om, int *n_alloc, int *n_custom)$/;"	f	file:
ucimap_data	ucimap.h	/^union ucimap_data {$/;"	u
ucimap_data_to_string	ucimap.c	/^ucimap_data_to_string(struct ucimap_section_data *sd, struct uci_optmap *om, union ucimap_data *data)$/;"	f	file:
ucimap_fill_ptr	ucimap.c	/^ucimap_fill_ptr(struct uci_ptr *ptr, struct uci_section *s, const char *option)$/;"	f	file:
ucimap_find_section	ucimap.c	/^ucimap_find_section(struct uci_map *map, struct ucimap_fixup *f)$/;"	f	file:
ucimap_fixup	ucimap.c	/^struct ucimap_fixup {$/;"	s	file:
ucimap_foreach_option	ucimap.c	49;"	d	file:
ucimap_free_item	ucimap.c	/^ucimap_free_item(struct ucimap_section_data *sd, void *item)$/;"	f
ucimap_free_section	ucimap.c	/^ucimap_free_section(struct uci_map *map, struct ucimap_section_data *sd)$/;"	f
ucimap_get_data	ucimap.c	/^ucimap_get_data(struct ucimap_section_data *sd, struct uci_optmap *om)$/;"	f	file:
ucimap_get_type_name	ucimap.c	/^ucimap_get_type_name(int type)$/;"	f	file:
ucimap_handle_fixup	ucimap.c	/^ucimap_handle_fixup(struct uci_map *map, struct ucimap_fixup *f)$/;"	f	file:
ucimap_init	ucimap.c	/^ucimap_init(struct uci_map *map)$/;"	f
ucimap_is_alloc	ucimap.c	/^ucimap_is_alloc(enum ucimap_type type)$/;"	f	file:
ucimap_is_custom	ucimap.c	/^ucimap_is_custom(enum ucimap_type type)$/;"	f	file:
ucimap_is_fixup	ucimap.c	/^ucimap_is_fixup(enum ucimap_type type)$/;"	f	file:
ucimap_is_list	ucimap.c	/^ucimap_is_list(enum ucimap_type type)$/;"	f	file:
ucimap_is_list_auto	ucimap.c	/^ucimap_is_list_auto(enum ucimap_type type)$/;"	f	file:
ucimap_is_simple	ucimap.c	/^ucimap_is_simple(enum ucimap_type type)$/;"	f	file:
ucimap_list	ucimap.h	/^struct ucimap_list {$/;"	s
ucimap_list_append	ucimap.c	/^ucimap_list_append(struct ucimap_list *list)$/;"	f	file:
ucimap_parse	ucimap.c	/^ucimap_parse(struct uci_map *map, struct uci_package *pkg)$/;"	f
ucimap_parse_options	ucimap.c	/^ucimap_parse_options(struct uci_map *map, struct uci_sectionmap *sm, struct ucimap_section_data *sd, struct uci_section *s)$/;"	f	file:
ucimap_parse_section	ucimap.c	/^ucimap_parse_section(struct uci_map *map, struct uci_sectionmap *sm, struct ucimap_section_data *sd, struct uci_section *s)$/;"	f
ucimap_ptr_section	ucimap.c	/^ucimap_ptr_section(struct uci_sectionmap *sm, void *ptr) {$/;"	f	file:
ucimap_resize_list	ucimap.c	/^ucimap_resize_list(struct ucimap_section_data *sd, struct ucimap_list **list, int items)$/;"	f
ucimap_section_data	ucimap.h	/^struct ucimap_section_data {$/;"	s
ucimap_section_ptr	ucimap.c	/^ucimap_section_ptr(struct ucimap_section_data *sd)$/;"	f	file:
ucimap_set_changed	ucimap.c	/^ucimap_set_changed(struct ucimap_section_data *sd, void *field)$/;"	f
ucimap_store_section	ucimap.c	/^ucimap_store_section(struct uci_map *map, struct uci_package *p, struct ucimap_section_data *sd)$/;"	f
ucimap_type	ucimap.h	/^enum ucimap_type {$/;"	g
ucimap_type_names	ucimap.c	/^static const char *ucimap_type_names[] = {$/;"	v	file:
unlikely	ucimap.h	51;"	d
unlikely	ucimap.h	90;"	d
v	uci.h	/^	} v;$/;"	m	struct:uci_option	typeref:union:uci_option::__anon5
validate	uci_blob.h	/^	const char * const *validate;$/;"	m	struct:uci_blob_param_list
value	uci.h	/^	char *value;$/;"	m	struct:uci_delta
value	uci.h	/^	const char *value;$/;"	m	struct:uci_ptr
