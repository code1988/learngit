1. 所谓"迭代器"，就是一种可以遍历某个集合中所有元素的机制，在lua中迭代器通常表示为函数，而具体的实现有很多种。
   整个迭代的过程基本如下：
            首先是通过迭代器工厂创建迭代器;
            然后每次调用这个迭代器时，它就会从指定的集合中返回下一个元素;
            直到最后一个元素返回后，迭代器就会返回nil，以此表示迭代结束。

2. 闭包是一种最典型的迭代器，因为闭包中的"非局部的变量"可以用来在每次调用之间保持一些状态，从而使闭包可以记住每次迭代所在的位置。

3. lua中的泛型for天然就是为迭代而设计的，其语法格式如下：
            for <var-list> in <exp-list> do
                <body>
            end
            备注：<var-list>是变量名列表，用来存储迭代器函数的返回值，其中的第一个变量固定称为"控制变量"，当它为nil时迭代结束;
                  <exp-list>是表达式列表，通常只有一个，即对迭代器工厂的调用。
   泛型for的执行流程如下：
            [1]. 对关键字"in"后面的表达式求值，该表达式通常会返回3个值供for保存，迭代器函数、恒定状态、控制变量的初值 
            [2]. 将恒定状态(比如要遍历的table)和控制变量作为实参，调用迭代器函数
            [3]. 将迭代器函数的返回值赋给变量列表，如果控制变量为nil，则迭代结束
            [4]. 如果控制变量是有效值，则执行循环体，随后再次调用迭代器函数，执行下一次迭代
   备注：泛型for中的迭代器函数即可以是一个闭包，也可以是一个普通函数，如果是闭包，通常意味着迭代器工厂返回的恒定状态和控制变量的初值为nil

            

