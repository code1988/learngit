Lua中设计"栈"的目的就是解决Lua与C的通信。
无论是Lua到C，还是C到Lua，所有的数据交换都需要通过"栈"来完成，此外还可以用"栈"来保存一些中间结果。
"栈"解决了Lua和C语言之间存在的两大差异：
        [1]. lua自带垃圾回收机制，而C需要手动显式的释放内存
        [2]. lua使用动态类型，而C使用静态类型

"栈"实际是由lua管理的，"栈"中的每个元素都能保存任何类型的lua值，lua严格按照LIFO(后进先出)规则来操作栈，这些都意味着一个C值一旦入栈，就是进入了lua的世界。
不同于lua中只能操作"栈"的顶部，C-API则拥有更大的自由度，可以操作"栈"中任意位置的元素。

C-API是一组能使C代码与Lua交互的函数，这些API实现了读写Lua中的变量、调用Lua函数、运行一段Lua代码、注册C函数到Lua等功能。
几乎所有C-API实质都是对"栈"的操作，以下是对主要的C-API进行了分类。

1. 这部分API包含了对"栈"上元素的一些基本操作
    --[[    lua_gettop()
    返回栈顶元素的正索引，也就是获取栈中元素的个数
    备注：返回0意味着栈为空
    --]]
    --[[    lua_settop(idx)
    将栈顶设置到一个指定位置idx，即修改栈中元素的数量
    备注：idx为正时，如果比之前的栈顶高，会向栈中压入nil来补足大小，如果比之前的栈顶低，意味着多出来的元素会被丢弃;
          idx为负时，只有丢弃功能
    --]]
