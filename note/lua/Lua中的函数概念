1. 不同于C，lua中的函数是一种first-class-value，这意味着:
            lua中的函数可以视作一种"值"存储到变量或table中;
            可以作为其他函数的实参;
            可以作为其他函数中的返回值;
            可以嵌套在其他函数中被构造创建，而无需在设计阶段就定义好.
   
2. lua中的函数本身其实都是没有名字的，也就是说通常讨论的函数名(比如print)，实际不过是持有某个函数的变量.
   所以，lua中函数的标准定义形式其实是：
            var = function (x) <body> end
   也就是说，一个函数定义其实就是一条赋值语句，这条语句首先是构造一种类型为"函数"的值，然后将这个值赋给一个变量

3. 跟其他大部分语言一样，lua遵循"词法域"(即静态作用域)的原则，又因为lua函数是一种first-class-value，所以才有了闭包(closure)的概念:
            一个闭包就是一个函数加上构造该函数时所需的所有"非局部的变量"(non-local variable)

   一个闭包的典型例子如下：
            function newCounter ()
                local i = 0
                return function ()  -- 匿名函数，也就是闭包
                    i = i + 1
                    return i 
                end
            end
            c1 = newCounter()
            c2 = newCounter()
            print(c1)   -- 1
            print(c1)   -- 2
            print(c2)   -- 1
   这个例子中，变量i对于匿名函数来说，既不是全局变量，也不是局部变量，所以就被称为了"非局部的变量";
   调用函数newCounter的过程，其实就是创建一个闭包的过程;
   这里要注意一点，函数名不带括号赋值给一个变量，其实是表示共同持有某个函数，而函数名带括号赋值给一个变量，其实是表示首先调用该函数，然后将该函数的返回值赋值给变量;
   所以以上例子中，c1和c2是同一个函数所创建的两个独立的闭包，也就是说，它们各自拥有独立的i

