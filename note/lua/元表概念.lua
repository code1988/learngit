元表，顾名思义，它本身就是一个table，再具体一点说，就是用来存放元方法的table。
元表的作用就是修改一个值的行为(更确切的说，这是元方法的能力)，需要注意的是，这种修改会覆盖掉原本该值可能存在的相应的预定义行为。

1. lua中的每个值都可以有一个元表，只是table和userdata可以有各自独立的元表，而其他类型的值则共享其类型所属的单一元表。
   lua代码中只能设置table的元表，至于其他类型值的元表只能通过C代码设置。
   多个table可以共享一个通用的元表，但是每个table只能拥有一个元表。

2. 算术类和关系类元方法主要有以下几种：
        __add   - 加法
        __sub   - 减法
        __mul   - 乘法
        __div   - 除法
        __unm   - 相反数
        __mod   - 取模
        __pow   - 乘幂
        __concat    - 描述连接操作符".."行为
        __eq    - 等于
        __le    - 小于等于
        __lt    - 小于
   对于二元操作符，按照从左到右的顺序从操作对象中查找对应的元方法。

3. 库定义的元方法主要有：
        __tostring  - 用于重定义各种类型的值的print输出。
                      调用print输出某个值时会检查该值是否有一个__tostring的元方法，如果有，就用这个元方法来生成输出字符串
        __metatable - 用于保护集合的元表，使用户既不能看也不能修改集合的元表
                      设置了该字段后，调用getmetatable就会返回该字段的值，而调用setmetatable则会引发一个错误

4. __index元方法用于改变访问table中不存在的key时的行为。
   当访问一个table中不存在的key时，如果在该table的元表中定义了__index字段，那么lua就会用调用该元方法，规则如下：
            当__index元方法是一个函数时，lua会用table和不存在的key作为入参来调用该函数;
            当__index元方法是一个table时，lua就会用不存在的key访问这个table。

   如果不想在访问一个table时自动调用到它的__index元方法，就需要使用函数rawget。

   一个典型的__index元方法应用案例就是：实现具有默认值的table
            

5. __newindex元方法用于改变设置table中不存在的key时的行为。
   当对一个table中不存在的key赋值时，如果在该table的元表中定义了__newindex字段，那么lua就会调用该元方法，规则基本类似__index
   
   如果不想在设置一个table时自动调用到它的__newindex元方法，就需要使用函数rawset。

