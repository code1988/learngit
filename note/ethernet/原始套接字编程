1. 面向IP层的原始套接字编程
-----------------------------------------------------------------------------------------------------------------------------
    socket(AF_INET,SOCK_RAW,protocol)

    [1]. protocol字段定义在netinet/in.h中，常见的由IPPROTO_TCP IPPROTO_UDP IPPROTO_ICMP IPPROTO_RAW
    [2]. 构建原始套接字时protocol字段不能填0（IPPROTO_IP）,因为这样会导致系统不知道用哪种协议了
    [3]. 默认情况下，我们所构造的报文从IP首部之后的第一个字节开始，IP首部由内核自己维护，首部中的协议字段会被设置为我们
         调用socket()函数时传递给它的protocol字段;
         当开启IP_HDRINCL时,我们可以从IP首部第一个字节开始构造整个IP报文，其中IP首部中的标识字段和校验和字段总是内核自己
         维护的
         开启IP_HDRINCL的模板代码：
            const int on = 1;
            if(setsockopt(fd,IPPROTO_IP,IP_HDRINCL,&on,sizeof(int)) < 0)
            {
                printf("set socket option error!\n");
            }

2. 面向链路层的原始套接字编程
-----------------------------------------------------------------------------------------------------------------------------
    socket(PF_PACKET,type,htons(protocol))

    [1]. type字段可以取SOCK_DGRAM或SOCK_RAW，含义分别为：
            SOCK_DGRAM - 这种类型的套接字我们所构造的报文冲链路层首部之后的第一个字节开始，跟IP层的原始套接字在开启
                         IP_HDRINCL时的区别在于，它可以接收所有的二层报文
            SOCK_RAW   - 这种类型的套接字是最强大的，处理的是完整的以太网报文
    [2]. protocol字段可取的值如下：
            ETH_P_IP    - 只接收目的mac是本机的IP类型数据帧
            ETH_P_ARP   - 只接收目的mac是本机的ARP类型数据帧
            ETH_P_RARP  - 只接收目的mac是本机的RARP类型数据帧
            ETH_P_ALL   - 接收目的mac是本机的所有类型数据帧，同时还可以接收本机发出的所有数据帧，混杂模式打开时，还可以接收到目
                          的mac不是本机的数据帧


备注：原始套接字编程必须是root用户，可以通过setuid(getuid())暂时获取root权限
