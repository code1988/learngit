1. 主机字节序、网络字节序
---------------------------------------------------------------------------------------------------
    主机字节序通常采用little-endian，低字节放低地址，高字节放高地址
    网络字节序采用big-endian，低字节放高地址，高字节放低地址

    unsigned long htonl(unsigned long host)     // 主机long转网络long
    unsigned long ntohl(unsigned long net)      // 网络long转主机long
    unsigned short htons(unsigned short host)   // 主机short转网络short
    unsigned short ntohs(unsigned short net)    // 网络short转主机short

2. 点分十进制字符串IP和32位整型IP
---------------------------------------------------------------------------------------------------
    int inet_aton(const char *cp,struct in_addr *inp)   // 点分十进制字符串IP转32位整型IP,成功返回非0,失败返回0
    char *inet_ntoa(struct in_addr in)                  // 32位整型IP转点分十进制字符串IP
    
    更新的程序用inet_pton和inet_ntop来代替上面两个函数，因为新函数支持ipv4和ipv6
    int inet_pton(int af,const char *src,void *dst)                         // 点分十进制字符串IP转32位整型IP
    const char *inet_ntop(int af,const void *src,char *dst,socklen_t size)  // 32位整型IP转点分十进制字符串IP

    上面转换函数都用到的一个结构
        typedef uint32_t in_addt_t;
        struct in_addr{
            in_addr_t s_addr;                           // 网络字节序       
        }; 

3. 主机名和IP地址的对应关系
---------------------------------------------------------------------------------------------------
    struct hostent *gethostbyname(const char *name)                     // 根据主机名来获取其IP地址
    struct hostent *gethostbyaddr(const void *addr,int len,int type)    // 根据IP地址获取主机名

4. 网络编程使用的相关头文件(适用于linux 3.1以后)
---------------------------------------------------------------------------------------------------
    #include <linux/if_ether.h> - 该头文件是802.3标准以太网物理层接口的全局定义。(要注意的一点是，该头文件跟 net/ethernet.h 存在冲突，避免同时使用)
                                - 主要定义了一些以太网帧相关的常量；
                                - 以太网帧头struct ethhdr
                                - 以太网帧协议类型ID
                                - 套接字过滤用的ID，比如ETH_P_ALL

    #include <linux/if_packet.h>   - 该头文件用于linux AF_PACKET套接字。(要注意的一点是，该头文件跟 netpacket/packet.h 存在冲突，避免同时使用)
                                    - 主要定义了链路层套接字地址 struct sockaddr_ll；
                                    - 包类型(用于sll_pkttype)；
                                    - setsockopt设置SOL_PACKET层的套接字选项；
                                    - setsockopt设置SOL_PACKET层的数据结构struct packet_mreq;
                                    - setsockopt设置内容(用于mr_type)

    #include <linux/in.h>   - 该头文件是IP层的全局定义
                            - 主要定义了IP层套接字地址 struct sockaddr_in;
                            - IP层的协议类型ID
                            - IP层地址结构struct in_addr，常用于IP地址格式转换
                            - setsockopt设置SOL_IP层的套接字选项
                            - setsockopt设置SOL_IP层的数据结构struct ip_mreq;

    #include <linux/if.h> - 该头文件用于网络接口的查询，比如ioctl。(要注意的一点是，该头文件跟 net/if.h 存在冲突，避免同时使用)
                        - 主要定义了struct ifreq(用于ioctl)
                        - 接口返回的标准状态

    #include <sys/socket.h> - 该头文件用于socket编程，定义了所有socket编程相关的API接口
    #include <sys/ioctl.h>  - 顾名思义，该头文件用于ioctl接口，凡是需要调用ioctl的地方都需要该头文件
    #include <sys/epoll.h>  - 顾名思义，该头文件用于epoll接口，凡是需要调用epoll相关API的地方都需要该头文件

    备注：/usr/include/net/目录下所有头文件中的定义在/usr/include/linux/目录下相应的头文件中都可以找到同样的定义，而且后者包含的内容似乎更多，
          所以后续可以做一个决定，那就是以后用户层在编程时，废弃使用/usr/include/net/目录下的头文件，而全部使用/usr/include/linux/*.h
