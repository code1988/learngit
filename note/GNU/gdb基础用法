											GDB通用命令 
***************************************************************************************************
***************************************************************************************************
1. gdb 可执行文件 
	启动GDB调试。
    备注：如果可执行文件需要root权限，则命令前加sudo；
          可执行文件如果不在当前目录，则需要带上路径 
2. l [可以指定行号]
	查看所载入的文件
3. b [行号/函数名/+offset/-offset/address/if ...]
	在指定行 / 函数名 / 当前行的前面/后面offset行 / 指定内存地址 / 条件成立时 设置断点

4. info(i)
    [1]. info b
	    查看设置的断点
    [2]. info program
        查看gdb停住的原因
    [3]. info sharedlibrary
        查看当前加载的共享库
	
5. r
	运行代码

6. print(p) 
    [1]. print 变量
	    查看变量
    [2]. print 函数
        调用函数
    [3]. print $寄存器
        查看寄存器值

7. n/s
	单步运行，s会进入函数而n不会进入
	
8. continue(c)
	继续程序执行

9. delete breakpoints [断点号]
	断点号为“info b”中的第一栏，若缺省断点号则意味着删除所有断点
		
10. backtrace(bt)
    查看当前的函数堆栈

11. set args xx xxx
    设置程序的命令行参数

12. show args
    查看程序的命令行参数

13. start
    运行到main函数处停止

14. finish
    运行程序，直到当前函数完成返回，同时会打印当前函数的返回值

15. return
    直接从当前函数返回，可以在后面携带自定义的返回值

16. call 函数
    调用函数

***************************************************************************************************

                                        GDB调试进阶用法
***************************************************************************************************
***************************************************************************************************
1. gdb调试运行中的程序
    有3种启动调试的方法：
            [1]. 通过程序和PID来绑定： "gdb 可执行文件 pid" 
            [2]. 先获取程序的PID，然后直接绑定PID： "gdb --pid PID"
            [3]. 先启动gdb后，通过attach绑定PID："(gdb) attach PID"
                 可以使用detach来取消绑定的进程

2. gdb调试宏
    gcc编译时默认不包含调试信息，即使加了-g选项，产生的调试信息中也仍旧不会包含宏信息，解决的办法是
    改加-ggdb3选项。
    在gdb环境下，有以下几条命令可用于调试宏：
            [1]. info macro 宏名                    - 显示指定宏的定义，并显示这个宏定义在代码的何处
            [2]. macro expand 宏名(如果有,带参数)   - 展开指定宏
            [3]. macro define 宏名 宏定义           - gdb中动态定义一个具体的宏
            [4]. macro list                         - 列出所有通过[3]动态定义的宏
            [5]. macro undef 宏名                   - 删除通过[3]动态定义的宏，不能删除代码中定义的宏

3. gdb调试coredump文件
    默认情况下，core文件跟对应的可执行文件在同一目录，所以调试方法如下：
        gdb 可执行文件 core文件
    对于嵌入式系统来说稍微复杂点，需要将生成的core文件拷贝到桌面linux中，并和对应的可执行文件放在同一
    目录下，然后使用对应的交叉编译gdb进行调试：
        xxx-linux-gdb 可执行文件 core文件

    进入gdb环境后，执行bt/where就可以看到产生coredump的地方
***************************************************************************************************

									    GDB调试时的注意点	
***************************************************************************************************
***************************************************************************************************
1. gdb调试过程中有时需要看某个变量var的值，但"p var"时，却出现"optimized out"消息，这是由于该变量在
   编译时被优化掉了。
   解决方法就是设置编译时优化等级为-O0

