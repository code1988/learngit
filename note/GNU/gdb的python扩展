gdb启动时会自动导入一个名为"gdb"的python模块    

gdb.PYTHONDIR
    当前python目录的字符串，作用类似环境变量PATH

gdb.execute(command [, from_tty = False, to_string = False])
    执行字符串格式的gdb命令，带2个可选参数
    from_tty, 用来指定这条gdb命令的标准输入
    to_string, 用来将这条gdb命令的输出内容重定向到字符串

gdb.breakpoints()
    返回一个集合，集合中记录了当前所有断点对象

gdb.parameter(parameter)
    获取一个字符串格式的gdb参数的配置值（show命令展示的就是gdb参数)，并转换成合适类型的python值返回

gdb.history(number)
    获取一个指定的gdb历史值(gdb的print命令会产生历史值$number)，并封装成一个gdb.Value对象返回

gdb.parse_and_eval(expression)
    解析并执行字符串格式的python表达式，并将结果封装成一个gdb.Value对象返回
    利用这个API可以获取代码中的目标变量

gdb.find_pc_line(pc)
    获取pc地址上的指令所在的文件行号(显然该功能需要调试信息支持)，并将结果封装成一个gdb.Symtab_and_line对象返回

gdb.post_event(event)
    将一个callable对象注册到gdb的事件队列，随后由gdb负责回调(按注册顺序)

gdb.write(string[, stream = gdb.STDOUT])
    打印一个字符串，带1个可选参数
    stream, 用来指定输出流的目的位置，另外可选gdb.STDERR/gdb.STDLOG

gdb.solib_name(address)
    以字符串格式返回目标地址所处的共享库名

gdb.GdbError(string)
    配合raise，用来从命令或函数中终止，并抛出一条字符串格式的异常信息(不输出调用栈)

gdb.lookup_type(name[, block])
    根据类型名查找对应的类型, 并封装成一个gdb.Type对象返回
    block, 默认全局搜索，如果指定了block则只在该作用域中搜索



一个gdb.Type对象有如下几种属性：
    .code       该gdb.Type对象的type id, TYPE_CODE_*
    .name       该gdb.Type对象的类型名(struct类型无法显示)
    .sizeof     该gdb.Type对象大小，单位byte
    .tag        该gdb.Type对象的tag名，tag名就是struct、enum、union后面的那部分

gdb.Type有如下几种实例方法:
    .fields()           返回该gdb.Type对象的字段集合，集合中的每个字段被封装成gdb.Field对象
                        对于结构体、类、枚举类型的gdb.Type对象，也可以使用python字典语法访问其字段对象(gdb.Field)
    .strip_typedefs()   返回该gdb.Type对象剥掉typedef后的真实gdb.Type对象
    .pointer()          返回该gdb.Type对象的指针gdb.Type对象
    .reference()        返回该gdb.Type对象的引用gdb.Type对象
    .const()            返回该gdb.Type对象的const gdb.Type对象
    .volatile()         返回该gdb.Type对象的volatile gdb.Type对象

gdb.Type对象又被gdb分为以下几类：
    gdb.TYPE_CODE_PTR       1       指针
    gdb.TYPE_CODE_ARRAY     2       数组
    gdb.TYPE_CODE_STRUCT    3       struct
    gdb.TYPE_CODE_UNION     4       union
    gdb.TYPE_CODE_ENUM      5       enum
    gdb.TYPE_CODE_FUNC      7       函数
    gdb.TYPE_CODE_INT       8       整型
    gdb.TYPE_CODE_FLT       9       浮点型
    gdb.TYPE_CODE_VOID      10      void
    gdb.TYPE_CODE_STRING    13      字符串，这种类型只面向那些定义了字符串类型的语言(显然不包括C语言)
    gdb.TYPE_CODE_CHAR      20      char
    gdb.TYPE_CODE_BOOL      21      bool
    gdb.TYPE_CODE_TYPEDEF   23      typedef
    gdb.TYPE_CODE_INTERNAL_FUNCTION   27      typedef

一个gdb.Field对象有如下几种属性：
    .bitpos         该字段在所属gdb.Type对象中的偏移量，单位bit
                    这个属性不适用于枚举字段和C++中的静态字段
    .enumval        显然该属性只适用于枚举字段，表示枚举值
    .name           该字段名
    .artificial     如果该字段是编译器额外加进去的，则该属性为True，否则默认就是False
    .is_base_class  如果该字段类型是C++的基类结构，则该属性为True，否则默认就是False
    .bitsize        这个属性只适用于位域，表示该位域的位长，除此之外都为0(这类字段大小可以通过Type的sizeof属性获取)
    .type           该字段的类型, 也就是gdb.Type对象

一个gdb.Value对象有如下几种属性：
    .address            该变量的地址，封装成一个gdb.Value对象返回
    .is_optimized_out   如果该变量被编译器优化掉则返回true
    .type               该变量的类型，封装成一个gdb.Value对象返回
gdb.Value有如下几种实例方法：
    .cast(<type>)       将该变量强转成目标类型(以gdb.Type格式传入)，并封装成一个gdb.Value对象返回
    .dereference()      只支持对该指针变量进行解引用，并将解引用后的值封装成一个gdb.Value对象返回
    .referenced_value() 如果该变量是引用类型则返回被引用的变量，如果该变量是指针类型则返回被指向的的变量，返回值均封装成一个gdb.Value对象
    .reference()        返回该变量的引用
    .const_value()      返回该变量的const版本
    .string()           将该字符串变量转换成Python字符串
    

gdb.selected_thread()   
    获取当前选中的线程，并封装成一个gdb.InferiorThread对象返回
gdb.InferiorThread对象用来描述一个线程，有如下几种属性：
    .name               该线程名，可修改
    .num/.global_num    gdb分配的线程ID
    .ptid               三元组：进程PID，该线程LWPID，该线程TID(一般为0)
gdb.InferiorThread有如下几种实例方法:
    .is_vaild()         判断该线程当前是否有效，调用其他的线程实例方法前必须确保该线程有效
    .switch()           将该线程设置为当前选中线程


gdb.selected_frame()
    获取当前选中的栈帧，并封装成一个gdb.Frame对象返回
gdb.newest_frame()
    获取当前选中线程最顶上那个栈帧，并封装成一个gdb.Frame对象返回
gdb.Frame对象用来描述一个栈帧，有如下几种实例方法：
    .is_vaild()         判断该栈帧当前是否有效，调用其他的栈帧实例方法前必须确保该栈帧有效
    .name()             返回字符串格式的栈帧名，如果不存在则返回None
    .architecture()     获取该栈帧的布局信息，并封装成一个gdb.Architecture对象返回
    .type()             返回该栈帧的类型，包括：
                        gdb.NORMAL_FRAME    普通栈帧
                        gdb.INLINE_FRAME    内联栈帧
                        gdb.SIGTRAMP_FRAME  信号捕获函数的上一栈帧，这帧由内核构造
    .pc()               返回该栈帧的pc值
    .block()            返回该栈帧的block对象gdb.Block，只有代调试信息的程序才有block，所以没有调试信息的程序这里就会抛异常
    .function()         返回该栈帧的symbol对象gdb.Symbol
    .older()            返回该栈帧的前一栈帧对象gdb.Frame
    .newer()            返回该栈帧的后一栈帧对象gdb.Frame
    .find_sal()         返回该栈帧的gdb.Symtab_and_line
    .read_register(register)        返回该栈帧中目标寄存器的值对象gdb.Value   
                                    入参是字符串格式的寄存器名
    .read_var(variable[, block])    返回该栈帧中目标变量的值
                                    variable是字符串格式或gdb.Symbol对象的目标变量名
                                    block是可选参数，缺省在当前block中找，否则在指定block中找

gdb.pretty_printers 全局的pretty_printer列表, 可以将自定义的pretty_printer探测函数注册到这张表中
    注册方法：
            gdb.pretty_printers.append(<探测函数>)
    探测函数格式：
            入参: gdb.Value封装的要打印的变量
            返回值: 匹配成功则构造自定义的pretty_printer对象返回，否则返回None 
    探测函数实现思路: 
            通常通过type属性来获取目标变量的类型, 然后跟期望类型进行比对，比对成功则构造自定义的pretty_printer对象返回，否则返回None 
自定义的pretty_printer对象需要实现以下几个方法：
    .__init__(self, val)     构造函数，val表示一个gdb.Value封装的要打印的变量
    .to_string(self)         返回一个字符串作为该变量的打印结果
    .children(self)          可选，gdb会在to_string后调用children，通常用来打印结构体、类的成员
                             本函数返回一个迭代器，迭代器每次迭代返回名-值形式的元组
    .display_hint(self)      可选，暗示输出的样式，可以返回"array"、"map"、"string"之一

通过继承gdb.Command类，可以实现自定义的gdb命令，其中命令中的注释会自动提取为该命令的帮助信息，以下是几个需要实现的方法：
    .__init__(name, command_class[, completer_class[, prefix]])     这是父类gdb.Command所需的构造函数，通过子类的构造函数调用
                                                                    name    字符串格式的命令名，如果包含多个单词则表示这是一个包含前缀命令的多级命令
                                                                    command_class   用来告诉gdb如何对该命令进行归类，通常使用COMMAND_USER即可
                                                                    completer_class 可选参数，用来告诉gdb如何结束命令，默认gdb调用complete方法，COMPLETE_* 
                                                                    prefix          可选参数，标识这是否是一个前缀命令，默认为False
    .dont_repeat()                  默认一个命令执行后再敲回车就会重复执行，本方法用来使该命令禁用这种行为
    .invoke(argument, from_tty)     在gdb中调用该命令时就会自动调用该方法，可以通过抛异常的方式返回错误信息
                                    argument    字符串格式的参数集，通过调用gdb.string_to_argv(argument)可以将整个字符串分割成字符串数组
                                    from_tty    标识该命令是否从终端键入



