在一个源文件中，只能有一个公有类，但可以有任意数目的非公有类。

构造器：
	构造器与类同名；
	每个类可以有一个以上的构造器；
	构造器可以有0个、1个或多个参数；
	构造器没有返回值；
	构造器总是伴随着new操作一起调用；
	在一个构造器中，可以通过关键字this调用同一个类的另一个构造器

使用工厂方法(而不是构造器)的场景：
	需要对一个类不同的构造方法区分命令时，只能使用工厂方法(构造器的名字必须与类名相同)。
	需要改变所构造的对象类型时(比如需要构造一个子类对象)，必须使用工厂方法(构造器只能构造所属类的对象)。
	
编写访问器方法需要注意一点：不要返回可变对象的引用，因为这会导致该引用的对象时刻处于不确定状态。

一个方法可以直接访问所属类的任意一个对象的私有数据，而不需要使用对应的访问器方法。

final域：
	修饰为final的实例域，在构造器执行后，这个域的值不允许再被修改；
	修饰为final的静态域(即静态常量/公有常量)，这个域的值只允许通过本地方法修改。
	被final修饰的对象引用仅仅表示该引用不会再指向其他对象，但当前引用的对象可以修改状态，这点特性类似于C语言中的常量指针。
	
静态方法：
	静态方法不能向对象实施操作，没有this参数；
	静态方法可以访问自身类中的静态域；
	静态方法主要通过类名调用，但也可以使用对象进行调用(虽然不建议这么做)；
	
java中所有方法参数都是采用按值调用，之所以可以改变传入对象的状态，是因为传入的实际上是同一个对象的引用。

方法签名包括方法名和类型参数，但不包括返回类型。

初始化实例域的3种方法：
	在声明中直接赋值；
	在初始化块中设置值；
	在构造器中设置值。
	
初始化静态域的2种方法：
	在声明中直接赋值；
	在静态初始化块中设置值。
	
finalize方法会在GC清除对象前被调用，但实际使用中不建议使用finalize方法回收资源，而应该用try...final...方式进行回收。

import语句：
	可以使用import语句导入一个特定的类/特定的静态方法/特定的静态域；
	import配合*号还可以导入包中的所有类/类中的所有静态方法/类中的所有静态域；
	import语句应该位于源文件的顶部(但位于package语句后面)。
	
访问修饰符(适用于类、方法、域)：
	标记为public的部分可以被任意类使用；
	标记为private的部分只能被定义它们的类使用；
	没有访问修饰符标记的部分可以被同一个包中的所有方法访问
	
类路径的设置方法：
	通过-classpath选项设置；
	通过CLASSPATH环境变量设置。
