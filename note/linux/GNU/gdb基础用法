											GDB通用命令 
***************************************************************************************************
***************************************************************************************************
1. gdb 可执行文件 
	启动GDB调试。
    备注：如果可执行文件需要root权限，则命令前加sudo；
          可执行文件如果不在当前目录，则需要带上路径 
2. l [可以指定行号]
	查看所载入的文件
3. b [行号/函数名/+offset/-offset/address/if ...]
	在指定行 / 函数名 / 当前行的前面/后面offset行 / 指定内存地址 / 条件成立时 设置断点

4. info b
	查看设置的断点
	
5. r
	运行代码

6. p 变量
	查看变量，只有在代码处于运行或暂停状态才能查看变量值

7. n/s
	单步运行，s会进入函数而n不会进入
	
8. c
	恢复程序执行

9. delete breakpoints [断点号]
	断点号为“info b”中的第一栏，若缺省断点号则意味着删除所有断点
		
10. bt
    查看当前的函数堆栈

11. set args xx xxx
    设置程序的命令行参数

12. show args
    查看程序的命令行参数

13. start
    运行到main函数处停止

14. info program
    查看gdb停住的原因

15. finish
    运行程序，直到当前函数完成返回
***************************************************************************************************

									    GDB调试进阶用法
***************************************************************************************************
***************************************************************************************************
1. gdb调试运行中的程序
    有3种启动调试的方法：
            [1]. 通过程序和PID来绑定： "gdb 可执行文件 pid" 
            [2]. 先获取程序的PID，然后直接绑定PID： "gdb --pid PID"
            [3]. 先启动gdb后，通过attach绑定PID："(gdb) attach PID"
                 可以使用detach来取消绑定的进程
***************************************************************************************************

									    GDB调试时的注意点	
***************************************************************************************************
***************************************************************************************************
1. gdb调试过程中有时需要看某个变量var的值，但"p var"时，却出现"optimized out"消息，这是由于该变量在
   编译时被优化掉了。
   解决方法就是设置编译时优化等级为-O0

