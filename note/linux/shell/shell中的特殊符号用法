#!/bin/sh

1. ":" 用法
*************************************************************************************************
	":"是shell中的一个内建命令，是一个空命令，只起到占位符的作用，相当于true，返回0
		if [ : ]; then		# ":"在这里相当于true	
			:				# ":"在这里啥也不做，只起到占位符的作用，如果没有":",执行时就会报错
		fi
		
	":"作为脚本注释符时，必须确保位于行首,而且必须紧跟一个空格
	: 添加单行注释
	: "通过双引号、单引号、<<等
	添加多行注释"
	
	":"作为空命令还可以实现参数扩展(基于”命令+空格+参数“原理)
	: ${var=value}			# 这里把${var=value}作为":"命令的参数
							# 没有":"的话，shell会把${var=value}当命令处理，因为这只是个变量值，不能作为一条命令，所以会导致报错

	":"作为空命令还可以实现清空文件功能
	: > file				# 清空文件file中的数据


2. ``  ''  "" 用法
*************************************************************************************************
    反引号 `` 作用：命令替换，shell会执行反引号中的命令，然后返回结果
    单引号 '' 作用：把带有空格的字符串赋值给变量，单引号内忽略所有特殊字符
    双引号 "" 作用：把带有空格的字符串赋值给变量，双引号内忽略大多数，但不包括'$ ` \ '这三个


3. "$0" "$1" "$*" "$@" "$#" 等位置参数用法
*************************************************************************************************
    $0 是命令行第0号参数，也就是该shell脚本自身文件名（函数内部的$0指的是调用该函数的shell脚本名） 
    $1 是命令行第1号参数，$2 $3 $4...同理（函数内部的$1 $2 $3...依次指的是调用该函数时传入的参数）
    $* 表示从命令行/函数传入的所有参数，并且所有参数作为一个整体返回，使用$*和$@时需要用双引号括住
    $@ 表示从命令行/函数传入的所有参数，并且每个参数作为单元返回一张参数列表
    $# 表示命令行/函数传入参数的总个数


4. ">" "<" ">>" 重定向符用法
*************************************************************************************************
	"<" 把当前这条命令的STDIN重定向到指定的文件
	">" 把当前这条命令的STDOUT重定向到指定的文件，如果文件不存在则创建，如果文件存在则先清空
	">>" 把当前这条命令的STDOUT重定向到指定的文件，如果文件不存在则创建，如果文件存在则在后面追加
	"2>" 把当前这条命令的STDERR重定向到指定的文件
	">&" 把当前这条命令的STDOUT和STDERR都重定向到指定的文件 

