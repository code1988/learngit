										"="、":="、"?="、"+="四种赋值符号的用法
/***************************************************************************************************
"="用法：会将整个Makefile展开后，再决定变量的值，即变量的值将会是整个makefie中最后被指定的值。
例：
	x = foo
	y = $(x)bar
	x = xyz
	此例中，y的值将会是xyzbar,而不是foobar
	
":="用法：表示变量的值决定于它在makefile中的位置，而不是整个makefile展开后的最终值。
例：
	x := foo
	y := $(x)bar
	x := xyz
	此例中，y的值将会是foobar，而不是xyzbar

"?="用法，表示如果没有被赋值过就赋予等号后面的值，即只有当变量还没有被定义过的时候，才会将右边的值赋给变量
例：
	x := foo
	x ?=xyz
	此时 x的值为foo
	x :=foo
	y ?= $(x)bar
	此时 y的值为foobar
	x :=
	x ?= foo
	此时x的值为空
***************************************************************************************************/

										makefile中的隐含规则
/***************************************************************************************************
隐含规则，就是早先约定好了，不需要再写出来的规则.

隐含规则会使用makefile的一些预定义变量，比如$(CFLAGS)，所以可以通过改变这些预定义变量的值，来定制隐含规则运行时的参数;
要想激活隐含规则，唯一要做的就是不写出目标的规则(规则包括依赖和对应的命令)，这样makefile就会试图去自动推导产生这个目标的规则.

以编译C程序为例，常见的隐含规则如下：
	1. 	%:%.c
			$(CC) $(CFLAGS) $(LDFLAGS) $^ $(LDLIBS) -o $@
		释义：所有可执行文件默认都可由对应的".c"文件自动生成
	2. 	%:%.o
			$(CC) $(LDFLAGS) $^ $(LDLIBS) -o $@
		释义：所有可执行文件默认都可由对应的".o"文件自动生成
	3. 	%.o:%.c
			$(CC) $(CFLAGS) -c -o $@ $<	
		释义：所有".o"文件默认都可由对应的".c"文件自动生成

	备注：这3条隐含规则只能自动推导相同文件名的不同后缀名文件，如a.o文件必须由a.c文件生成，
		  这种一对一的依赖关系导致前2条隐含规则适用条件太单一，所以最常用的往往只有第3条
		  

***************************************************************************************************/
											
										makefile中的模式规则
/***************************************************************************************************
模式规则,就是专门用来定义隐含规则的，以上3条隐含规则就是makefile预定义的模式规则，所以用户也可以使用模式规则自定义/重定义一个隐含规则.

模式规则的目标定义中必须包含"%"，否则就是一般的规则；
目标中的"%"表示长度任意的非空字符串，同时目标中的"%"的值决定了依赖对象中的"%"值，make会去匹配当前目录下所有的文件名，
一旦找到，make就会执行该模式规则中的命令.
***************************************************************************************************/

										makefile函数
/***************************************************************************************************
makefile里的函数使用，和使用变量类似，也是“$()”格式，括号里面是函数名和形参，形参之间一般用“,”隔开

1. wildcard
	用法：	SRC = $(wildcard *.c ./sub/*.c)
	释义：	搜索当前目录和./sub目录下所有以.c结尾的文件，生成一个以空格间隔的文件名列表，并赋值给SRC。当前目录文件只有文件名，子目录下文件名包含相对路径
	
2. notdir
	用法：	SOURCE = $(notdir $(SRC))
	释义： 	去除所有的路径信息，返回文件名列表的非目录部分

3. dir
	用法：	DIR = $(dir $(SRC))
	释义：	取目录函数，返回文件名列表的目录部分
		
3. patsubst
	用法：	OBJ = $(patsubst %c,%o,$(SOURCE))
	释义：	将DIR中所有结尾是c字符的变量替换成o字符，这里还有另外一种替换方法，其格式是“$(var:a=b)/${var:a=b}”，含义同patsubst

4. strip
			$(strip $(string))
	释义：	将字符串"string"中多个连续的空字符合并为一个空字符，strip函数通常用在条件判断语句的表达式中，确保表达式的可靠和健壮

5. findstring
	用法:	$(findstring find,string)
	释义:	搜索字符串"string"，查找"find"字符串，如果存在则返回"find"字符串，否则返回空

6. call
	用法：	$(call expression,parm1,parm2,...)
	释义：	call函数可以用来向表达式expression传入一系列参数parm，而expression的返回值就是call函数的返回值	

7. subst
	用法：	$(subst from,to,string)
	释义：	把字符串string中的from字符串替换成to字符串，返回被替换过后的字符串
***************************************************************************************************/

									生成可执行文件的makefile
/***************************************************************************************************
#source file
# 源文件，自动找所有 .c 和 .cpp 文件，并将目标定义为同名 .o 文件
SOURCE  := $(wildcard *.c) $(wildcard *.cpp)
OBJS    := $(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$(SOURCE)))
 
#target you can change test to what you want
# 目标文件名，输入任意你想要的执行文件名
TARGET  := test
 
#compile and lib parameter
# 编译参数
CC      := gcc
LIBS    :=
LDFLAGS:= 
DEFINES:=
INCLUDE:= -I.
CFLAGS  := -g -Wall -O3 $(DEFINES) $(INCLUDE)
CXXFLAGS:= $(CFLAGS) -DHAVE_CONFIG_H
 
 
#i think you should do anything here
# 下面的基本上不需要做任何改动了
.PHONY : everything objs clean veryclean rebuild
 
everything : $(TARGET)
 
all : $(TARGET)
 
objs : $(OBJS)
 
rebuild: veryclean everything
               
clean :
    rm -fr *.so
    rm -fr *.o
   
veryclean : clean
    rm -fr $(TARGET)
 
$(TARGET) : $(OBJS) 
    $(CC) $(CXXFLAGS) -o $@ $(OBJS) $(LDFLAGS) $(LIBS)
***************************************************************************************************/	

										生成静态链接库的makefile
/***************************************************************************************************
#target you can change test to what you want
# 共享库文件名， lib*.a
TARGET  := libtest.a
 
#compile and lib parameter
# 编译参数
CC      := gcc
AR      = ar
RANLIB  = ranlib
LIBS    :=
LDFLAGS:= 
DEFINES:=
INCLUDE:= -I.
CFLAGS  := -g -Wall -O3 $(DEFINES) $(INCLUDE)
CXXFLAGS:= $(CFLAGS) -DHAVE_CONFIG_H
 
#i think you should do anything here
# 下面的基本上不需要做任何改动了
 
#source file
# 源文件，自动找所有 .c 和 .cpp 文件，并将目标定义为同名 .o 文件
SOURCE  := $(wildcard *.c) $(wildcard *.cpp)
OBJS    := $(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$(SOURCE)))
 
.PHONY : everything objs clean veryclean rebuild
 
everything : $(TARGET)
 
all : $(TARGET)
 
objs : $(OBJS)
 
rebuild: veryclean everything
               
clean :
    rm -fr *.o
   
veryclean : clean
    rm -fr $(TARGET)
 
$(TARGET) : $(OBJS) 
    $(AR) cru $(TARGET) $(OBJS)
    $(RANLIB) $(TARGET)
***************************************************************************************************/		

										生成动态链接库的makefile
/***************************************************************************************************
#target you can change test to what you want
# 共享库文件名， lib*.so
TARGET  := libtest.so
 
#compile and lib parameter
# 编译参数
CC      := gcc
LIBS    :=
LDFLAGS:= 
DEFINES:=
INCLUDE:= -I.
CFLAGS  := -g -Wall -O3 $(DEFINES) $(INCLUDE)
CXXFLAGS:= $(CFLAGS) -DHAVE_CONFIG_H
SHARE   := -fPIC -shared -o
 
#i think you should do anything here
# 下面的基本上不需要做任何改动了
 
#source file
# 源文件，自动找所有 .c 和 .cpp 文件，并将目标定义为同名 .o 文件
SOURCE  := $(wildcard *.c) $(wildcard *.cpp)
OBJS    := $(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$(SOURCE)))
 
.PHONY : everything objs clean veryclean rebuild
 
everything : $(TARGET)
 
all : $(TARGET)
 
objs : $(OBJS)
 
rebuild: veryclean everything
               
clean :
    rm -fr *.o
   
veryclean : clean
    rm -fr $(TARGET)
 
$(TARGET) : $(OBJS) 
    $(CC) $(CXXFLAGS) $(SHARE) $@ $(OBJS) $(LDFLAGS) $(LIBS)
***************************************************************************************************/												
