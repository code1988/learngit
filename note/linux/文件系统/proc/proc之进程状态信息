/proc下以数字命名的目录通常都是进程目录，当前运行的每个进程都有一个对应的目录，目录名为PID号，里面详细记录了该进程相关的信息。
/proc/self目录则链接到读取进程本身

目前主要针对内存相关部分进行分析
-----------------------------------------------------------------------------------------------------------------------------
1. /proc/$PID/maps
    记录了进程的虚拟地址空间使用分布情况，一共6列
    第一列：本段内存映射的虚拟地址空间范围
    第二列：本段内存的属性，rwxp，其中p表示私有
    第三列：对于有名内存段，记录本段虚拟内存在该进程ELF文件中以页为单位的偏移量；对于匿名内存段，通常就是0
    第四列：对于有名内存段，记录被映射文件的所属设备的主、次设备号；对于匿名内存段，通常就是 00:00
    第五列：对于有名内存段，记录被映射文件的inode号；对于匿名内存段，通常就是 0
    第六列：对于有名内存段，记录被映射文件的绝对路径；对于匿名内存段，通常记录了本段内存在进程中的角色，
            但也有什么都不显示的情况，比如作为栈溢出保护空间时

    备注：[1]. 被映射的内存段可以来自一个文件，这种内存区域叫有名内存;
               也可以就是一段普通的内存，这种内存区域叫匿名内存，比如stack、heap
          [2]. 每段虚拟内存都是按页分配的，一页通常是4KB，所以从第一列可以看出，所有的地址都是4KB的倍数
          [3]. 一个进程的虚拟地址空间使用分布情况通常如下：
                    本进程可执行文件.text段     (r-xp)
                    本进程可执行文件.rodata段   (r--p)      
                    本进程可执行文件.data段     (rw-p)
                    heap                        (rw-p)
                    共享库.text段               (r-xp) 
                    共享库.rodata段             (r--p) 
                    共享库.data段               (rw-p) 
                    stack                       (rw-p)
          [4]. 如果该进程并未使用malloc相关，则maps文件中就没有heap那行；
               只有进程使用了malloc相关，maps文件中才会存在heap行，当然有时并不会显式标注
          [5]. 系统对每个进程的stack大小一般有8MB的上限，可以通过命令 "#ulimit -S XXX" 修改
          [6]. 每个进程拥有3G虚拟地址空间，所以虚拟地址上限是0xC0000000

2. /proc/$PID/status | /proc/$PID/stat
    记录了进程的整体状态信息，status和stat包含的内容相同，只是status展现的信息更具有可读性，以下基于status文件进行分析

    VmPeak  - 运行过程中，该进程占用虚拟内存的峰值
    VmSize  - 当前该进程占用的虚拟内存大小，是VmData、VmStk、VmExe、VmLib的总和.
              VmSize(即ps命令中的VSZ)并不代表该进程实际占用的物理内存大小
    VmHWM   - 运行过程中，该进程虚拟地址空间中驻留在物理内存那部分的峰值
    VmRSS   - 当前该进程虚拟地址空间中驻留在物理内存那部分的大小，驻留表示没有swap到存储设备中.
              VmRSS(即ps命令中的RSS)才是该进程实际占用的物理内存大小
    VmData  - 该进程heap占用的虚拟内存大小
              VmData跟VmRSS并没有直接联系，因为VmData大小的虚拟内存并不一定全部占用物理内存，只有初始化了的那部分才会占用
    VmStk   - 该进程stack占用的虚拟内存大小
              VmStk跟VmRSS并没有直接联系，因为VmStk大小的虚拟内存并不一定全部占用物理内存，只有初始化了的那部分才会占用
    VmExe   - 该进程文件.text段、.rodata段占用的虚拟内存大小
              由于这部分可以为不同进程之间所共享，所以不计入该进程实际占用的物理内存中
    VmLib   - 被映射到该进程空间的动态库占用的虚拟内存大小

    备注：[1]. status中记录的所有内存指标都是立足于虚拟地址空间
          [2]. 实际测试可以发现，即便不显式的进行任何内存分配，以上这些参数也都会有一个预分配的初始值，具体跟系统和硬件有关
          [3]. 实际测试可以发现，随着内存分配的增加，以上部分参数也不是连续增长的，而是呈现阶越式增长，具体跟系统和硬件有关
          [4]. 实际测试可以发现，该进程文件的.data段是直接作用在VmSize/VmPeak上;
               并且.data段的初始化了的那部分也直接作用在VmRSS/VmHWM上
          [5]. 实际测试可以发现，对于PC系统来说，通常分配了swap分区，所以VmData的上限大概是物理内存剩余大小+swap分区剩余大小；
               而对于嵌入式系统来说，通常不存在swap分区，所以VmData的上限大概是物理内存剩余大小

    
